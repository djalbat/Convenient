'use strict';

var fs = require('fs');

function entryExists(absoluteFilePath) {
  return fs.existsSync(absoluteFilePath);
}

function fileExists(absoluteFilePath) {
  return fs.existsSync(absoluteFilePath);
}

function isEntryDirectory(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory();

  return entryDirectory;
}

function isDirectoryEmpty(absoluteDirectoryPath) {
  var subEntryNames = readDirectory(absoluteDirectoryPath),
      subEntryNamesLength = subEntryNames.length,
      directoryEmpty = subEntryNamesLength === 0;

  return directoryEmpty;
}

function writeFile(absoluteFilePath, content) {
  fs.writeFileSync(absoluteFilePath, content);
}

function readFile(absoluteFilePath) {
  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';

  var options = {
    encoding: encoding
  },
      content = fs.readFileSync(absoluteFilePath, options);

  return content;
}

function readDirectory(absoluteDirectoryPath) {
  var subEntryNames = fs.readdirSync(absoluteDirectoryPath);

  return subEntryNames;
}

module.exports = {
  entryExists: entryExists,
  fileExists: fileExists,
  isEntryDirectory: isEntryDirectory,
  isDirectoryEmpty: isDirectoryEmpty,
  writeFile: writeFile,
  readFile: readFile,
  readDirectory: readDirectory
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsdGllcy9maWxlU3lzdGVtLmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsImVudHJ5RXhpc3RzIiwiYWJzb2x1dGVGaWxlUGF0aCIsImV4aXN0c1N5bmMiLCJmaWxlRXhpc3RzIiwiaXNFbnRyeURpcmVjdG9yeSIsImFic29sdXRlUGF0aCIsInN0YXQiLCJzdGF0U3luYyIsImVudHJ5RGlyZWN0b3J5IiwiaXNEaXJlY3RvcnkiLCJpc0RpcmVjdG9yeUVtcHR5IiwiYWJzb2x1dGVEaXJlY3RvcnlQYXRoIiwic3ViRW50cnlOYW1lcyIsInJlYWREaXJlY3RvcnkiLCJzdWJFbnRyeU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwiZGlyZWN0b3J5RW1wdHkiLCJ3cml0ZUZpbGUiLCJjb250ZW50Iiwid3JpdGVGaWxlU3luYyIsInJlYWRGaWxlIiwiZW5jb2RpbmciLCJvcHRpb25zIiwicmVhZEZpbGVTeW5jIiwicmVhZGRpclN5bmMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxLQUFLQyxRQUFRLElBQVIsQ0FBWDs7QUFFQSxTQUFTQyxXQUFULENBQXFCQyxnQkFBckIsRUFBdUM7QUFDckMsU0FBT0gsR0FBR0ksVUFBSCxDQUFjRCxnQkFBZCxDQUFQO0FBQ0Q7O0FBRUQsU0FBU0UsVUFBVCxDQUFvQkYsZ0JBQXBCLEVBQXNDO0FBQ3BDLFNBQU9ILEdBQUdJLFVBQUgsQ0FBY0QsZ0JBQWQsQ0FBUDtBQUNEOztBQUVELFNBQVNHLGdCQUFULENBQTBCQyxZQUExQixFQUF3QztBQUN0QyxNQUFNQyxPQUFPUixHQUFHUyxRQUFILENBQVlGLFlBQVosQ0FBYjtBQUFBLE1BQ01HLGlCQUFpQkYsS0FBS0csV0FBTCxFQUR2Qjs7QUFHQSxTQUFPRCxjQUFQO0FBQ0Q7O0FBRUQsU0FBU0UsZ0JBQVQsQ0FBMEJDLHFCQUExQixFQUFpRDtBQUMvQyxNQUFNQyxnQkFBZ0JDLGNBQWNGLHFCQUFkLENBQXRCO0FBQUEsTUFDTUcsc0JBQXNCRixjQUFjRyxNQUQxQztBQUFBLE1BRU1DLGlCQUFrQkYsd0JBQXdCLENBRmhEOztBQUlBLFNBQU9FLGNBQVA7QUFDRDs7QUFFRCxTQUFTQyxTQUFULENBQW1CaEIsZ0JBQW5CLEVBQXFDaUIsT0FBckMsRUFBOEM7QUFDNUNwQixLQUFHcUIsYUFBSCxDQUFpQmxCLGdCQUFqQixFQUFtQ2lCLE9BQW5DO0FBQ0Q7O0FBRUQsU0FBU0UsUUFBVCxDQUFrQm5CLGdCQUFsQixFQUF1RDtBQUFBLE1BQW5Cb0IsUUFBbUIsdUVBQVIsTUFBUTs7QUFDckQsTUFBTUMsVUFBVTtBQUNSRCxjQUFVQTtBQURGLEdBQWhCO0FBQUEsTUFHTUgsVUFBVXBCLEdBQUd5QixZQUFILENBQWdCdEIsZ0JBQWhCLEVBQWtDcUIsT0FBbEMsQ0FIaEI7O0FBS0EsU0FBT0osT0FBUDtBQUNEOztBQUVELFNBQVNMLGFBQVQsQ0FBdUJGLHFCQUF2QixFQUE4QztBQUM1QyxNQUFNQyxnQkFBZ0JkLEdBQUcwQixXQUFILENBQWViLHFCQUFmLENBQXRCOztBQUVBLFNBQU9DLGFBQVA7QUFDRDs7QUFFRGEsT0FBT0MsT0FBUCxHQUFpQjtBQUNmMUIsZUFBYUEsV0FERTtBQUVmRyxjQUFZQSxVQUZHO0FBR2ZDLG9CQUFrQkEsZ0JBSEg7QUFJZk0sb0JBQWtCQSxnQkFKSDtBQUtmTyxhQUFXQSxTQUxJO0FBTWZHLFlBQVVBLFFBTks7QUFPZlAsaUJBQWVBO0FBUEEsQ0FBakIiLCJmaWxlIjoiZmlsZVN5c3RlbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5mdW5jdGlvbiBlbnRyeUV4aXN0cyhhYnNvbHV0ZUZpbGVQYXRoKSB7XG4gIHJldHVybiBmcy5leGlzdHNTeW5jKGFic29sdXRlRmlsZVBhdGgpO1xufVxuXG5mdW5jdGlvbiBmaWxlRXhpc3RzKGFic29sdXRlRmlsZVBhdGgpIHtcbiAgcmV0dXJuIGZzLmV4aXN0c1N5bmMoYWJzb2x1dGVGaWxlUGF0aCk7XG59XG5cbmZ1bmN0aW9uIGlzRW50cnlEaXJlY3RvcnkoYWJzb2x1dGVQYXRoKSB7XG4gIGNvbnN0IHN0YXQgPSBmcy5zdGF0U3luYyhhYnNvbHV0ZVBhdGgpLFxuICAgICAgICBlbnRyeURpcmVjdG9yeSA9IHN0YXQuaXNEaXJlY3RvcnkoKTtcblxuICByZXR1cm4gZW50cnlEaXJlY3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGlzRGlyZWN0b3J5RW1wdHkoYWJzb2x1dGVEaXJlY3RvcnlQYXRoKSB7XG4gIGNvbnN0IHN1YkVudHJ5TmFtZXMgPSByZWFkRGlyZWN0b3J5KGFic29sdXRlRGlyZWN0b3J5UGF0aCksXG4gICAgICAgIHN1YkVudHJ5TmFtZXNMZW5ndGggPSBzdWJFbnRyeU5hbWVzLmxlbmd0aCxcbiAgICAgICAgZGlyZWN0b3J5RW1wdHkgPSAoc3ViRW50cnlOYW1lc0xlbmd0aCA9PT0gMCk7XG5cbiAgcmV0dXJuIGRpcmVjdG9yeUVtcHR5O1xufVxuXG5mdW5jdGlvbiB3cml0ZUZpbGUoYWJzb2x1dGVGaWxlUGF0aCwgY29udGVudCkge1xuICBmcy53cml0ZUZpbGVTeW5jKGFic29sdXRlRmlsZVBhdGgsIGNvbnRlbnQpO1xufVxuXG5mdW5jdGlvbiByZWFkRmlsZShhYnNvbHV0ZUZpbGVQYXRoLCBlbmNvZGluZyA9ICd1dGY4Jykge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIGVuY29kaW5nOiBlbmNvZGluZ1xuICAgICAgICB9LFxuICAgICAgICBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGFic29sdXRlRmlsZVBhdGgsIG9wdGlvbnMpO1xuXG4gIHJldHVybiBjb250ZW50O1xufVxuXG5mdW5jdGlvbiByZWFkRGlyZWN0b3J5KGFic29sdXRlRGlyZWN0b3J5UGF0aCkge1xuICBjb25zdCBzdWJFbnRyeU5hbWVzID0gZnMucmVhZGRpclN5bmMoYWJzb2x1dGVEaXJlY3RvcnlQYXRoKTtcblxuICByZXR1cm4gc3ViRW50cnlOYW1lcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVudHJ5RXhpc3RzOiBlbnRyeUV4aXN0cyxcbiAgZmlsZUV4aXN0czogZmlsZUV4aXN0cyxcbiAgaXNFbnRyeURpcmVjdG9yeTogaXNFbnRyeURpcmVjdG9yeSxcbiAgaXNEaXJlY3RvcnlFbXB0eTogaXNEaXJlY3RvcnlFbXB0eSxcbiAgd3JpdGVGaWxlOiB3cml0ZUZpbGUsXG4gIHJlYWRGaWxlOiByZWFkRmlsZSxcbiAgcmVhZERpcmVjdG9yeTogcmVhZERpcmVjdG9yeVxufTtcbiJdfQ==