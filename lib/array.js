'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function first(array) {
  return array[0];
}

function second(array) {
  return array[1];
}

function third(array) {
  return array[2];
}

function fourth(array) {
  return array[3];
}

function fifth(array) {
  return array[4];
}

function last(array) {
  return array[array.length - 1];
}

function ultimate(array) {
  return array[array.length - 1];
}

function penultimate(array) {
  return array[array.length - 2];
}

function tail(array) {
  return array.slice(1);
}

function push(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}

function unshift(array1, array2) {
  Array.prototype.unshift.apply(array1, array2);
}

function copy(array1, array2) {
  var start = 0,
      deleteCount = array2.length; ///

  splice(array1, start, deleteCount, array2);
}

function merge(array1, array2) {
  var start = array2.length,
      ///
  deleteCount = 0;

  splice(array1, start, deleteCount, array2);
}

function splice(array1, start, deleteCount) {
  var array2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  var args = [start, deleteCount].concat(_toConsumableArray(array2)),
      deletedItemsArray = Array.prototype.splice.apply(array1, args);

  return deletedItemsArray;
}

function replace(array, element, test) {
  var start = -1;

  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      start = index; ///

      return true;
    }
  });

  if (found) {
    var deleteCount = 1;

    array.splice(start, deleteCount, element);
  }

  return found;
}

function filter(array, test) {
  backwardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (!passed) {
      var start = index,
          ///
      deleteCount = 1;

      array.splice(start, deleteCount);
    }
  });
}

function find(array, test) {
  var elements = [];

  forwardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (passed) {
      elements.push(element);
    }
  });

  return elements;
}

function prune(array, test) {
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      var start = index,
          ///
      deleteCount = 1;

      array.splice(start, deleteCount);

      return true;
    }
  });

  return found;
}

function patch(array, element, test) {
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      return true;
    }
  });

  if (!found) {
    array.push(element);
  }

  return found;
}

function augment(array1, array2, test) {
  array2.forEach(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      array1.push(element);
    }
  });
}

function separate(array, test, array1, array2) {
  array.forEach(function (element, index) {
    var passed = test(element, index);

    passed ? array1.push(element) : array2.push(element);
  });
}

function forwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function backwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function forwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index];

    callback(element, index);
  }
}

function backwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index];

    callback(element, index);
  }
}

module.exports = {
  first: first,
  second: second,
  third: third,
  fourth: fourth,
  fifth: fifth,
  last: last,
  ultimate: ultimate,
  penultimate: penultimate,
  tail: tail,
  push: push,
  unshift: unshift,
  copy: copy,
  merge: merge,
  splice: splice,
  replace: replace,
  filter: filter,
  find: find,
  prune: prune,
  patch: patch,
  augment: augment,
  separate: separate,
  forwardsSome: forwardsSome,
  backwardsSome: backwardsSome,
  forwardsForEach: forwardsForEach,
  backwardsForEach: backwardsForEach
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9hcnJheS5qcyJdLCJuYW1lcyI6WyJmaXJzdCIsImFycmF5Iiwic2Vjb25kIiwidGhpcmQiLCJmb3VydGgiLCJmaWZ0aCIsImxhc3QiLCJsZW5ndGgiLCJ1bHRpbWF0ZSIsInBlbnVsdGltYXRlIiwidGFpbCIsInNsaWNlIiwicHVzaCIsImFycmF5MSIsImFycmF5MiIsIkFycmF5IiwicHJvdG90eXBlIiwiYXBwbHkiLCJ1bnNoaWZ0IiwiY29weSIsInN0YXJ0IiwiZGVsZXRlQ291bnQiLCJzcGxpY2UiLCJtZXJnZSIsImFyZ3MiLCJkZWxldGVkSXRlbXNBcnJheSIsInJlcGxhY2UiLCJlbGVtZW50IiwidGVzdCIsImZvdW5kIiwic29tZSIsImluZGV4IiwicGFzc2VkIiwiZmlsdGVyIiwiYmFja3dhcmRzRm9yRWFjaCIsImZpbmQiLCJlbGVtZW50cyIsImZvcndhcmRzRm9yRWFjaCIsInBydW5lIiwicGF0Y2giLCJhdWdtZW50IiwiZm9yRWFjaCIsInNlcGFyYXRlIiwiZm9yd2FyZHNTb21lIiwiY2FsbGJhY2siLCJhcnJheUxlbmd0aCIsInJlc3VsdCIsImJhY2t3YXJkc1NvbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLFNBQVNBLEtBQVQsQ0FBZUMsS0FBZixFQUFzQjtBQUFFLFNBQU9BLE1BQU0sQ0FBTixDQUFQO0FBQWtCOztBQUUxQyxTQUFTQyxNQUFULENBQWdCRCxLQUFoQixFQUF1QjtBQUFFLFNBQU9BLE1BQU0sQ0FBTixDQUFQO0FBQWtCOztBQUUzQyxTQUFTRSxLQUFULENBQWVGLEtBQWYsRUFBc0I7QUFBRSxTQUFPQSxNQUFNLENBQU4sQ0FBUDtBQUFrQjs7QUFFMUMsU0FBU0csTUFBVCxDQUFnQkgsS0FBaEIsRUFBdUI7QUFBRSxTQUFPQSxNQUFNLENBQU4sQ0FBUDtBQUFrQjs7QUFFM0MsU0FBU0ksS0FBVCxDQUFlSixLQUFmLEVBQXNCO0FBQUUsU0FBT0EsTUFBTSxDQUFOLENBQVA7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LElBTlM7QUFPZkUsWUFBVUEsUUFQSztBQVFmQyxlQUFhQSxXQVJFO0FBU2ZDLFFBQU1BLElBVFM7QUFVZkUsUUFBTUEsSUFWUztBQVdmTSxXQUFTQSxPQVhNO0FBWWZDLFFBQU1BLElBWlM7QUFhZkksU0FBT0EsS0FiUTtBQWNmRCxVQUFRQSxNQWRPO0FBZWZJLFdBQVNBLE9BZk07QUFnQmZPLFVBQVFBLE1BaEJPO0FBaUJmRSxRQUFNQSxJQWpCUztBQWtCZkcsU0FBT0EsS0FsQlE7QUFtQmZDLFNBQU9BLEtBbkJRO0FBb0JmQyxXQUFTQSxPQXBCTTtBQXFCZkUsWUFBVUEsUUFyQks7QUFzQmZDLGdCQUFjQSxZQXRCQztBQXVCZkksaUJBQWVBLGFBdkJBO0FBd0JmVixtQkFBaUJBLGVBeEJGO0FBeUJmSCxvQkFBa0JBO0FBekJILENBQWpCIiwiZmlsZSI6ImFycmF5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBmaXJzdChhcnJheSkgeyByZXR1cm4gYXJyYXlbMF07IH1cblxuZnVuY3Rpb24gc2Vjb25kKGFycmF5KSB7IHJldHVybiBhcnJheVsxXTsgfVxuXG5mdW5jdGlvbiB0aGlyZChhcnJheSkgeyByZXR1cm4gYXJyYXlbMl07IH1cblxuZnVuY3Rpb24gZm91cnRoKGFycmF5KSB7IHJldHVybiBhcnJheVszXTsgfVxuXG5mdW5jdGlvbiBmaWZ0aChhcnJheSkgeyByZXR1cm4gYXJyYXlbNF07IH1cblxuZnVuY3Rpb24gbGFzdChhcnJheSkgeyByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07IH1cblxuZnVuY3Rpb24gdWx0aW1hdGUoYXJyYXkpIHsgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdOyB9XG5cbmZ1bmN0aW9uIHBlbnVsdGltYXRlKGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAyXTsgfVxuXG5mdW5jdGlvbiB0YWlsKGFycmF5KSB7IHJldHVybiBhcnJheS5zbGljZSgxKTsgfVxuXG5mdW5jdGlvbiBwdXNoKGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5mdW5jdGlvbiB1bnNoaWZ0KGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5mdW5jdGlvbiBjb3B5KGFycmF5MSwgYXJyYXkyKSB7XG4gIGNvbnN0IHN0YXJ0ID0gMCxcbiAgICAgICAgZGVsZXRlQ291bnQgPSBhcnJheTIubGVuZ3RoOyAgLy8vXG4gIFxuICBzcGxpY2UoYXJyYXkxLCBzdGFydCwgZGVsZXRlQ291bnQsIGFycmF5Mik7XG59XG5cbmZ1bmN0aW9uIG1lcmdlKGFycmF5MSwgYXJyYXkyKSB7XG4gIGNvbnN0IHN0YXJ0ID0gYXJyYXkyLmxlbmd0aCwgIC8vL1xuICAgICAgICBkZWxldGVDb3VudCA9IDA7XG5cbiAgc3BsaWNlKGFycmF5MSwgc3RhcnQsIGRlbGV0ZUNvdW50LCBhcnJheTIpO1xufVxuXG5mdW5jdGlvbiBzcGxpY2UoYXJyYXkxLCBzdGFydCwgZGVsZXRlQ291bnQsIGFycmF5MiA9IFtdKSB7XG4gIGNvbnN0IGFyZ3MgPSBbc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5hcnJheTJdLFxuICAgICAgICBkZWxldGVkSXRlbXNBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoYXJyYXkxLCBhcmdzKTtcblxuICByZXR1cm4gZGVsZXRlZEl0ZW1zQXJyYXk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2UoYXJyYXksIGVsZW1lbnQsIHRlc3QpIHtcbiAgbGV0IHN0YXJ0ID0gLTE7XG4gIFxuICBjb25zdCBmb3VuZCA9IGFycmF5LnNvbWUoZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIHN0YXJ0ID0gaW5kZXg7ICAvLy9cbiAgICAgIFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgXG4gIGlmIChmb3VuZCkge1xuICAgIGNvbnN0IGRlbGV0ZUNvdW50ID0gMTtcblxuICAgIGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIGVsZW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXIoYXJyYXksIHRlc3QpIHtcbiAgYmFja3dhcmRzRm9yRWFjaChhcnJheSwgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcGFzc2VkKSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xuXG4gICAgICBhcnJheS5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaW5kKGFycmF5LCB0ZXN0KSB7XG4gIGNvbnN0IGVsZW1lbnRzID0gW107XG5cbiAgZm9yd2FyZHNGb3JFYWNoKGFycmF5LCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHBhc3NlZCkge1xuICAgICAgZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlbGVtZW50cztcbn1cblxuZnVuY3Rpb24gcHJ1bmUoYXJyYXksIHRlc3QpIHtcbiAgY29uc3QgZm91bmQgPSBhcnJheS5zb21lKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IDE7XG5cbiAgICAgIGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBmb3VuZDtcbn1cblxuZnVuY3Rpb24gcGF0Y2goYXJyYXksIGVsZW1lbnQsIHRlc3QpIHtcbiAgY29uc3QgZm91bmQgPSBhcnJheS5zb21lKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG5cbiAgaWYgKCFmb3VuZCkge1xuICAgIGFycmF5LnB1c2goZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gZm91bmQ7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnQoYXJyYXkxLCBhcnJheTIsIHRlc3QpIHtcbiAgYXJyYXkyLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIGFycmF5MS5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNlcGFyYXRlKGFycmF5LCB0ZXN0LCBhcnJheTEsIGFycmF5Mikge1xuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBwYXNzZWQgP1xuICAgICAgYXJyYXkxLnB1c2goZWxlbWVudCkgOlxuICAgICAgICBhcnJheTIucHVzaChlbGVtZW50KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRzU29tZShhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5TGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG4gICAgXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBiYWNrd2FyZHNTb21lKGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpbmRleCA9IGFycmF5TGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkc0ZvckVhY2goYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF07XG5cbiAgICBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFja3dhcmRzRm9yRWFjaChhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaW5kZXggPSBhcnJheUxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaXJzdDogZmlyc3QsXG4gIHNlY29uZDogc2Vjb25kLFxuICB0aGlyZDogdGhpcmQsXG4gIGZvdXJ0aDogZm91cnRoLFxuICBmaWZ0aDogZmlmdGgsXG4gIGxhc3Q6IGxhc3QsXG4gIHVsdGltYXRlOiB1bHRpbWF0ZSxcbiAgcGVudWx0aW1hdGU6IHBlbnVsdGltYXRlLFxuICB0YWlsOiB0YWlsLFxuICBwdXNoOiBwdXNoLFxuICB1bnNoaWZ0OiB1bnNoaWZ0LFxuICBjb3B5OiBjb3B5LFxuICBtZXJnZTogbWVyZ2UsXG4gIHNwbGljZTogc3BsaWNlLFxuICByZXBsYWNlOiByZXBsYWNlLFxuICBmaWx0ZXI6IGZpbHRlcixcbiAgZmluZDogZmluZCxcbiAgcHJ1bmU6IHBydW5lLFxuICBwYXRjaDogcGF0Y2gsXG4gIGF1Z21lbnQ6IGF1Z21lbnQsXG4gIHNlcGFyYXRlOiBzZXBhcmF0ZSxcbiAgZm9yd2FyZHNTb21lOiBmb3J3YXJkc1NvbWUsXG4gIGJhY2t3YXJkc1NvbWU6IGJhY2t3YXJkc1NvbWUsXG4gIGZvcndhcmRzRm9yRWFjaDogZm9yd2FyZHNGb3JFYWNoLFxuICBiYWNrd2FyZHNGb3JFYWNoOiBiYWNrd2FyZHNGb3JFYWNoXG59O1xuIl19