'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function first(array) {
  return array[0];
}

function second(array) {
  return array[1];
}

function third(array) {
  return array[2];
}

function fourth(array) {
  return array[3];
}

function fifth(array) {
  return array[4];
}

function last(array) {
  return array[array.length - 1];
}

function lastButOne(array) {
  return array[array.length - 2];
}

function tail(array) {
  return array.slice(1);
}

function push(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}

function unshift(array1, array2) {
  Array.prototype.unshift.apply(array1, array2);
}

function splice(array1, start, deleteCount) {
  var array2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  var args = [start, deleteCount].concat(_toConsumableArray(array2)),
      deletedItemsArray = Array.prototype.splice.apply(array1, args);

  return deletedItemsArray;
}

function replace(array, element, test) {
  var start = -1;

  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      start = index; ///

      return true;
    }
  });

  if (found) {
    var deleteCount = 1;

    array.splice(start, deleteCount, element);
  }

  return found;
}

function filter(array, test) {
  backwardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (!passed) {
      var start = index,
          ///
      deleteCount = 1;

      array.splice(start, deleteCount);
    }
  });
}

function find(array, test) {
  var elements = [];

  fowardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (passed) {
      elements.push(element);
    }
  });

  return elements;
}

function prune(array, test) {
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      var start = index,
          ///
      deleteCount = 1;

      array.splice(start, deleteCount);

      return true;
    }
  });

  return found;
}

function patch(array, element, test) {
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      return true;
    }
  });

  if (!found) {
    array.push(element);
  }

  return found;
}

function augment(array1, array2, test) {
  array2.forEach(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      array1.push(element);
    }
  });
}

function separate(array, test, array1, array2) {
  array.forEach(function (element, index) {
    var passed = test(element, index);

    passed ? array1.push(element) : array2.push(element);
  });
}

function forwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function backwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function forwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index];

    callback(element, index);
  }
}

function backwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index];

    callback(element, index);
  }
}

module.exports = {
  first: first,
  second: second,
  third: third,
  fourth: fourth,
  fifth: fifth,
  last: last,
  lastButOne: lastButOne,
  tail: tail,
  push: push,
  unshift: unshift,
  splice: splice,
  replace: replace,
  filter: filter,
  find: find,
  prune: prune,
  patch: patch,
  augment: augment,
  separate: separate,
  forwardsSome: forwardsSome,
  backwardsSome: backwardsSome,
  forwardsForEach: forwardsForEach,
  backwardsForEach: backwardsForEach
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9hcnJheS5qcyJdLCJuYW1lcyI6WyJmaXJzdCIsImFycmF5Iiwic2Vjb25kIiwidGhpcmQiLCJmb3VydGgiLCJmaWZ0aCIsImxhc3QiLCJsZW5ndGgiLCJsYXN0QnV0T25lIiwidGFpbCIsInNsaWNlIiwicHVzaCIsImFycmF5MSIsImFycmF5MiIsIkFycmF5IiwicHJvdG90eXBlIiwiYXBwbHkiLCJ1bnNoaWZ0Iiwic3BsaWNlIiwic3RhcnQiLCJkZWxldGVDb3VudCIsImFyZ3MiLCJkZWxldGVkSXRlbXNBcnJheSIsInJlcGxhY2UiLCJlbGVtZW50IiwidGVzdCIsImZvdW5kIiwic29tZSIsImluZGV4IiwicGFzc2VkIiwiZmlsdGVyIiwiYmFja3dhcmRzRm9yRWFjaCIsImZpbmQiLCJlbGVtZW50cyIsImZvd2FyZHNGb3JFYWNoIiwicHJ1bmUiLCJwYXRjaCIsImF1Z21lbnQiLCJmb3JFYWNoIiwic2VwYXJhdGUiLCJmb3J3YXJkc1NvbWUiLCJjYWxsYmFjayIsImFycmF5TGVuZ3RoIiwicmVzdWx0IiwiYmFja3dhcmRzU29tZSIsImZvcndhcmRzRm9yRWFjaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsU0FBU0EsS0FBVCxDQUFlQyxLQUFmLEVBQXNCO0FBQUUsU0FBT0EsTUFBTSxDQUFOLENBQVA7QUFBa0I7O0FBRTFDLFNBQVNDLE1BQVQsQ0FBZ0JELEtBQWhCLEVBQXVCO0FBQUUsU0FBT0EsTUFBTSxDQUFOLENBQVA7QUFBa0I7O0FBRTNDLFNBQVNFLEtBQVQsQ0FBZUYsS0FBZixFQUFzQjtBQUFFLFNBQU9BLE1BQU0sQ0FBTixDQUFQO0FBQWtCOztBQUUxQyxTQUFTRyxNQUFULENBQWdCSCxLQUFoQixFQUF1QjtBQUFFLFNBQU9BLE1BQU0sQ0FBTixDQUFQO0FBQWtCOztBQUUzQyxTQUFTSSxLQUFULENBQWVKLEtBQWYsRUFBc0I7QUFBRSxTQUFPQSxNQUFNLENBQU4sQ0FBUDtBQUFrQjs7QUFF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QVFjLFdBQTVCLEVBQXlDZCxPQUF6QyxFQUFrRDtBQUNoRCxRQUFNSixVQUFVdkIsTUFBTTJCLEtBQU4sQ0FBaEI7O0FBRUFhLGFBQVNqQixPQUFULEVBQWtCSSxLQUFsQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0csZ0JBQVQsQ0FBMEI5QixLQUExQixFQUFpQ3dDLFFBQWpDLEVBQTJDO0FBQ3pDLE1BQU1DLGNBQWN6QyxNQUFNTSxNQUExQjs7QUFFQSxPQUFLLElBQUlxQixRQUFRYyxjQUFjLENBQS9CLEVBQWtDZCxTQUFTLENBQTNDLEVBQThDQSxPQUE5QyxFQUF1RDtBQUNyRCxRQUFNSixVQUFVdkIsTUFBTTJCLEtBQU4sQ0FBaEI7O0FBRUFhLGFBQVNqQixPQUFULEVBQWtCSSxLQUFsQjtBQUNEO0FBQ0Y7O0FBRURrQixPQUFPQyxPQUFQLEdBQWlCO0FBQ2YvQyxTQUFPQSxLQURRO0FBRWZFLFVBQVFBLE1BRk87QUFHZkMsU0FBT0EsS0FIUTtBQUlmQyxVQUFRQSxNQUpPO0FBS2ZDLFNBQU9BLEtBTFE7QUFNZkMsUUFBTUEsSUFOUztBQU9mRSxjQUFZQSxVQVBHO0FBUWZDLFFBQU1BLElBUlM7QUFTZkUsUUFBTUEsSUFUUztBQVVmTSxXQUFTQSxPQVZNO0FBV2ZDLFVBQVFBLE1BWE87QUFZZkssV0FBU0EsT0FaTTtBQWFmTyxVQUFRQSxNQWJPO0FBY2ZFLFFBQU1BLElBZFM7QUFlZkcsU0FBT0EsS0FmUTtBQWdCZkMsU0FBT0EsS0FoQlE7QUFpQmZDLFdBQVNBLE9BakJNO0FBa0JmRSxZQUFVQSxRQWxCSztBQW1CZkMsZ0JBQWNBLFlBbkJDO0FBb0JmSSxpQkFBZUEsYUFwQkE7QUFxQmZDLG1CQUFpQkEsZUFyQkY7QUFzQmZkLG9CQUFrQkE7QUF0QkgsQ0FBakIiLCJmaWxlIjoiYXJyYXkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGZpcnN0KGFycmF5KSB7IHJldHVybiBhcnJheVswXTsgfVxuXG5mdW5jdGlvbiBzZWNvbmQoYXJyYXkpIHsgcmV0dXJuIGFycmF5WzFdOyB9XG5cbmZ1bmN0aW9uIHRoaXJkKGFycmF5KSB7IHJldHVybiBhcnJheVsyXTsgfVxuXG5mdW5jdGlvbiBmb3VydGgoYXJyYXkpIHsgcmV0dXJuIGFycmF5WzNdOyB9XG5cbmZ1bmN0aW9uIGZpZnRoKGFycmF5KSB7IHJldHVybiBhcnJheVs0XTsgfVxuXG5mdW5jdGlvbiBsYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTsgfVxuXG5mdW5jdGlvbiBsYXN0QnV0T25lKGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAyXTsgfVxuXG5mdW5jdGlvbiB0YWlsKGFycmF5KSB7IHJldHVybiBhcnJheS5zbGljZSgxKTsgfVxuXG5mdW5jdGlvbiBwdXNoKGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5mdW5jdGlvbiB1bnNoaWZ0KGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5mdW5jdGlvbiBzcGxpY2UoYXJyYXkxLCBzdGFydCwgZGVsZXRlQ291bnQsIGFycmF5MiA9IFtdKSB7XG4gIGNvbnN0IGFyZ3MgPSBbc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5hcnJheTJdLFxuICAgICAgICBkZWxldGVkSXRlbXNBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoYXJyYXkxLCBhcmdzKTtcblxuICByZXR1cm4gZGVsZXRlZEl0ZW1zQXJyYXk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2UoYXJyYXksIGVsZW1lbnQsIHRlc3QpIHtcbiAgbGV0IHN0YXJ0ID0gLTE7XG4gIFxuICBjb25zdCBmb3VuZCA9IGFycmF5LnNvbWUoZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIHN0YXJ0ID0gaW5kZXg7ICAvLy9cbiAgICAgIFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgXG4gIGlmIChmb3VuZCkge1xuICAgIGNvbnN0IGRlbGV0ZUNvdW50ID0gMTtcblxuICAgIGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIGVsZW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXIoYXJyYXksIHRlc3QpIHtcbiAgYmFja3dhcmRzRm9yRWFjaChhcnJheSwgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcGFzc2VkKSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xuXG4gICAgICBhcnJheS5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaW5kKGFycmF5LCB0ZXN0KSB7XG4gIGNvbnN0IGVsZW1lbnRzID0gW107XG5cbiAgZm93YXJkc0ZvckVhY2goYXJyYXksIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICBlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBwcnVuZShhcnJheSwgdGVzdCkge1xuICBjb25zdCBmb3VuZCA9IGFycmF5LnNvbWUoZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gaW5kZXgsICAvLy9cbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcblxuICAgICAgYXJyYXkuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBwYXRjaChhcnJheSwgZWxlbWVudCwgdGVzdCkge1xuICBjb25zdCBmb3VuZCA9IGFycmF5LnNvbWUoZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cblxuICBpZiAoIWZvdW5kKSB7XG4gICAgYXJyYXkucHVzaChlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBmb3VuZDtcbn1cblxuZnVuY3Rpb24gYXVnbWVudChhcnJheTEsIGFycmF5MiwgdGVzdCkge1xuICBhcnJheTIuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHBhc3NlZCkge1xuICAgICAgYXJyYXkxLnB1c2goZWxlbWVudCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2VwYXJhdGUoYXJyYXksIHRlc3QsIGFycmF5MSwgYXJyYXkyKSB7XG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIHBhc3NlZCA/XG4gICAgICBhcnJheTEucHVzaChlbGVtZW50KSA6XG4gICAgICAgIGFycmF5Mi5wdXNoKGVsZW1lbnQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZHNTb21lKGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlMZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcbiAgICBcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGJhY2t3YXJkc1NvbWUoYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAodmFyIGluZGV4ID0gYXJyYXlMZW5ndGggLSAxOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRzRm9yRWFjaChhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5TGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFycmF5W2luZGV4XTtcblxuICAgIGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYWNrd2FyZHNGb3JFYWNoKGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpbmRleCA9IGFycmF5TGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF07XG5cbiAgICBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZpcnN0OiBmaXJzdCxcbiAgc2Vjb25kOiBzZWNvbmQsXG4gIHRoaXJkOiB0aGlyZCxcbiAgZm91cnRoOiBmb3VydGgsXG4gIGZpZnRoOiBmaWZ0aCxcbiAgbGFzdDogbGFzdCxcbiAgbGFzdEJ1dE9uZTogbGFzdEJ1dE9uZSxcbiAgdGFpbDogdGFpbCxcbiAgcHVzaDogcHVzaCxcbiAgdW5zaGlmdDogdW5zaGlmdCxcbiAgc3BsaWNlOiBzcGxpY2UsXG4gIHJlcGxhY2U6IHJlcGxhY2UsXG4gIGZpbHRlcjogZmlsdGVyLFxuICBmaW5kOiBmaW5kLFxuICBwcnVuZTogcHJ1bmUsXG4gIHBhdGNoOiBwYXRjaCxcbiAgYXVnbWVudDogYXVnbWVudCxcbiAgc2VwYXJhdGU6IHNlcGFyYXRlLFxuICBmb3J3YXJkc1NvbWU6IGZvcndhcmRzU29tZSxcbiAgYmFja3dhcmRzU29tZTogYmFja3dhcmRzU29tZSxcbiAgZm9yd2FyZHNGb3JFYWNoOiBmb3J3YXJkc0ZvckVhY2gsXG4gIGJhY2t3YXJkc0ZvckVhY2g6IGJhY2t3YXJkc0ZvckVhY2hcbn07XG4iXX0=