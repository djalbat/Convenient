'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function first(array) {
  return array[0];
}

function second(array) {
  return array[1];
}

function last(array) {
  return array[array.length - 1];
}

function tail(array) {
  return array.slice(1);
}

function push(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}

function unshift(array1, array2) {
  Array.prototype.unshift.apply(array1, array2);
}

function splice(array, start, deleteCount) {
  var itemsArray = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  var args = [start, deleteCount].concat(_toConsumableArray(itemsArray)),
      deletedItemsArray = Array.prototype.splice.apply(array, args);

  return deletedItemsArray;
}

function combine(array1) {
  var array2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var test = arguments[2];

  array1 = array2.reduce(function (array1, element, index) {
    var passed = test(element, index);

    if (passed) {
      array1.push(element);
    }

    return array1;
  }, array1);

  return array1;
}

function forwardsForEach(array, callback) {
  array.forEach(function (element, index) {
    callback(element, index);
  });
}

function backwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index];

    callback(element, index);
  }
}

module.exports = {
  first: first,
  second: second,
  last: last,
  tail: tail,
  push: push,
  unshift: unshift,
  splice: splice,
  combine: combine,
  forwardsForEach: forwardsForEach,
  backwardsForEach: backwardsForEach
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9hcnJheS5qcyJdLCJuYW1lcyI6WyJmaXJzdCIsImFycmF5Iiwic2Vjb25kIiwibGFzdCIsImxlbmd0aCIsInRhaWwiLCJzbGljZSIsInB1c2giLCJhcnJheTEiLCJhcnJheTIiLCJBcnJheSIsInByb3RvdHlwZSIsImFwcGx5IiwidW5zaGlmdCIsInNwbGljZSIsInN0YXJ0IiwiZGVsZXRlQ291bnQiLCJpdGVtc0FycmF5IiwiYXJncyIsImRlbGV0ZWRJdGVtc0FycmF5IiwiY29tYmluZSIsInRlc3QiLCJyZWR1Y2UiLCJlbGVtZW50IiwiaW5kZXgiLCJwYXNzZWQiLCJmb3J3YXJkc0ZvckVhY2giLCJjYWxsYmFjayIsImZvckVhY2giLCJiYWNrd2FyZHNGb3JFYWNoIiwiYXJyYXlMZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLFNBQVNBLEtBQVQsQ0FBZUMsS0FBZixFQUFzQjtBQUFFLFNBQU9BLE1BQU0sQ0FBTixDQUFQO0FBQWtCOztBQUUxQyxTQUFTQyxNQUFULENBQWdCRCxLQUFoQixFQUF1QjtBQUFFLFNBQU9BLE1BQU0sQ0FBTixDQUFQO0FBQWtCOztBQUUzQyxTQUFTRSxJQUFULENBQWNGLEtBQWQsRUFBcUI7QUFBRSxTQUFPQSxNQUFNQSxNQUFNRyxNQUFOLEdBQWUsQ0FBckIsQ0FBUDtBQUFpQzs7QUFFeEQsU0FBU0MsSUFBVCxDQUFjSixLQUFkLEVBQXFCO0FBQUUsU0FBT0EsTUFBTUssS0FBTixDQUFZLENBQVosQ0FBUDtBQUF3Qjs7QUFFL0MsU0FBU0MsSUFBVCxDQUFjQyxNQUFkLEVBQXNCQyxNQUF0QixFQUE4QjtBQUFFQyxRQUFNQyxTQUFOLENBQWdCSixJQUFoQixDQUFxQkssS0FBckIsQ0FBMkJKLE1BQTNCLEVBQW1DQyxNQUFuQztBQUE2Qzs7QUFFN0UsU0FBU0ksT0FBVCxDQUFpQkwsTUFBakIsRUFBeUJDLE1BQXpCLEVBQWlDO0FBQUVDLFFBQU1DLFNBQU4sQ0FBZ0JFLE9BQWhCLENBQXdCRCxLQUF4QixDQUE4QkosTUFBOUIsRUFBc0NDLE1BQXRDO0FBQWdEOztBQUVuRixTQUFTSyxNQUFULENBQWdCYixLQUFoQixFQUF1QmMsS0FBdkIsRUFBOEJDLFdBQTlCLEVBQTREO0FBQUEsTUFBakJDLFVBQWlCLHVFQUFKLEVBQUk7O0FBQzFELE1BQU1DLFFBQVFILEtBQVIsRUFBZUMsV0FBZiw0QkFBK0JDLFVBQS9CLEVBQU47QUFBQSxNQUNNRSxvQkFBb0JULE1BQU1DLFNBQU4sQ0FBZ0JHLE1BQWhCLENBQXVCRixLQUF2QixDQUE2QlgsS0FBN0IsRUFBb0NpQixJQUFwQyxDQUQxQjs7QUFHQSxTQUFPQyxpQkFBUDtBQUNEOztBQUVELFNBQVNDLE9BQVQsQ0FBaUJaLE1BQWpCLEVBQTRDO0FBQUEsTUFBbkJDLE1BQW1CLHVFQUFWLEVBQVU7QUFBQSxNQUFOWSxJQUFNOztBQUMxQ2IsV0FBU0MsT0FBT2EsTUFBUCxDQUFjLFVBQVNkLE1BQVQsRUFBaUJlLE9BQWpCLEVBQTBCQyxLQUExQixFQUFpQztBQUN0RCxRQUFNQyxTQUFTSixLQUFLRSxPQUFMLEVBQWNDLEtBQWQsQ0FBZjs7QUFFQSxRQUFJQyxNQUFKLEVBQVk7QUFDVmpCLGFBQU9ELElBQVAsQ0FBWWdCLE9BQVo7QUFDRDs7QUFFRCxXQUFPZixNQUFQO0FBQ0QsR0FSUSxFQVFOQSxNQVJNLENBQVQ7O0FBVUEsU0FBT0EsTUFBUDtBQUNEOztBQUVELFNBQVNrQixlQUFULENBQXlCekIsS0FBekIsRUFBZ0MwQixRQUFoQyxFQUEwQztBQUN4QzFCLFFBQU0yQixPQUFOLENBQWMsVUFBU0wsT0FBVCxFQUFrQkMsS0FBbEIsRUFBeUI7QUFDckNHLGFBQVNKLE9BQVQsRUFBa0JDLEtBQWxCO0FBQ0QsR0FGRDtBQUdEOztBQUVELFNBQVNLLGdCQUFULENBQTBCNUIsS0FBMUIsRUFBaUMwQixRQUFqQyxFQUEyQztBQUN6QyxNQUFNRyxjQUFjN0IsTUFBTUcsTUFBMUI7O0FBRUEsT0FBSyxJQUFJb0IsUUFBUU0sY0FBYyxDQUEvQixFQUFrQ04sU0FBUyxDQUEzQyxFQUE4Q0EsT0FBOUMsRUFBdUQ7QUFDckQsUUFBTUQsVUFBVXRCLE1BQU11QixLQUFOLENBQWhCOztBQUVBRyxhQUFTSixPQUFULEVBQWtCQyxLQUFsQjtBQUNEO0FBQ0Y7O0FBRURPLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmhDLFNBQU9BLEtBRFE7QUFFZkUsVUFBUUEsTUFGTztBQUdmQyxRQUFNQSxJQUhTO0FBSWZFLFFBQU1BLElBSlM7QUFLZkUsUUFBTUEsSUFMUztBQU1mTSxXQUFTQSxPQU5NO0FBT2ZDLFVBQVFBLE1BUE87QUFRZk0sV0FBU0EsT0FSTTtBQVNmTSxtQkFBaUJBLGVBVEY7QUFVZkcsb0JBQWtCQTtBQVZILENBQWpCIiwiZmlsZSI6ImFycmF5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBmaXJzdChhcnJheSkgeyByZXR1cm4gYXJyYXlbMF07IH1cblxuZnVuY3Rpb24gc2Vjb25kKGFycmF5KSB7IHJldHVybiBhcnJheVsxXTsgfVxuXG5mdW5jdGlvbiBsYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTsgfVxuXG5mdW5jdGlvbiB0YWlsKGFycmF5KSB7IHJldHVybiBhcnJheS5zbGljZSgxKTsgfVxuXG5mdW5jdGlvbiBwdXNoKGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5mdW5jdGlvbiB1bnNoaWZ0KGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5mdW5jdGlvbiBzcGxpY2UoYXJyYXksIHN0YXJ0LCBkZWxldGVDb3VudCwgaXRlbXNBcnJheSA9IFtdKSB7XG4gIGNvbnN0IGFyZ3MgPSBbc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5pdGVtc0FycmF5XSxcbiAgICAgICAgZGVsZXRlZEl0ZW1zQXJyYXkgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KGFycmF5LCBhcmdzKTtcblxuICByZXR1cm4gZGVsZXRlZEl0ZW1zQXJyYXk7XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmUoYXJyYXkxLCBhcnJheTIgPSBbXSwgdGVzdCkge1xuICBhcnJheTEgPSBhcnJheTIucmVkdWNlKGZ1bmN0aW9uKGFycmF5MSwgZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIGFycmF5MS5wdXNoKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTE7XG4gIH0sIGFycmF5MSk7XG5cbiAgcmV0dXJuIGFycmF5MTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZHNGb3JFYWNoKGFycmF5LCBjYWxsYmFjaykge1xuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYmFja3dhcmRzRm9yRWFjaChhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaW5kZXggPSBhcnJheUxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaXJzdDogZmlyc3QsXG4gIHNlY29uZDogc2Vjb25kLFxuICBsYXN0OiBsYXN0LFxuICB0YWlsOiB0YWlsLFxuICBwdXNoOiBwdXNoLFxuICB1bnNoaWZ0OiB1bnNoaWZ0LFxuICBzcGxpY2U6IHNwbGljZSxcbiAgY29tYmluZTogY29tYmluZSxcbiAgZm9yd2FyZHNGb3JFYWNoOiBmb3J3YXJkc0ZvckVhY2gsXG4gIGJhY2t3YXJkc0ZvckVhY2g6IGJhY2t3YXJkc0ZvckVhY2hcbn07XG4iXX0=