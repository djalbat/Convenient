'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function first(array) {
  return array[0];
}

function second(array) {
  return array[1];
}

function third(array) {
  return array[2];
}

function fourth(array) {
  return array[3];
}

function fifth(array) {
  return array[4];
}

function last(array) {
  return array[array.length - 1];
}

function lastButOne(array) {
  return array[array.length - 2];
}

function tail(array) {
  return array.slice(1);
}

function push(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}

function unshift(array1, array2) {
  Array.prototype.unshift.apply(array1, array2);
}

function splice(array, start, deleteCount) {
  var itemsArray = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  var args = [start, deleteCount].concat(_toConsumableArray(itemsArray)),
      deletedItemsArray = Array.prototype.splice.apply(array, args);

  return deletedItemsArray;
}

function filter(array, test) {
  arrayUtil.backwardsForEach(array, function (element, index) {
    var passed = test(element, index),
        failed = !passed;

    if (failed) {
      ///
      var start = index,
          ///
      deleteCount = 1;

      array.splice(start, deleteCount);
    }
  });
}

function prune(array, test) {
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      var start = index,
          ///
      deleteCount = 1;

      array.splice(start, deleteCount);

      return true;
    }
  });

  return found;
}

function augment(array, test, element) {
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      return true;
    }
  });

  if (!found) {
    array.push(element);
  }

  return found;
}

function separate(array, test, array1, array2) {
  array.forEach(function (element, index) {
    var passed = test(element, index);

    passed ? array1.push(element) : array2.push(element);
  });
}

function combine(array1) {
  var array2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var test = arguments[2];

  array1 = array2.reduce(function (array1, element, index) {
    var passed = test(element, index);

    if (passed) {
      array1.push(element);
    }

    return array1;
  }, array1);

  return array1;
}

function forwardsForEach(array, callback) {
  array.forEach(function (element, index) {
    callback(element, index);
  });
}

function backwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index];

    callback(element, index);
  }
}

module.exports = {
  first: first,
  second: second,
  third: third,
  fourth: fourth,
  fifth: fifth,
  last: last,
  lastButOne: lastButOne,
  tail: tail,
  push: push,
  unshift: unshift,
  splice: splice,
  combine: combine,
  forwardsForEach: forwardsForEach,
  backwardsForEach: backwardsForEach
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9hcnJheS5qcyJdLCJuYW1lcyI6WyJmaXJzdCIsImFycmF5Iiwic2Vjb25kIiwidGhpcmQiLCJmb3VydGgiLCJmaWZ0aCIsImxhc3QiLCJsZW5ndGgiLCJsYXN0QnV0T25lIiwidGFpbCIsInNsaWNlIiwicHVzaCIsImFycmF5MSIsImFycmF5MiIsIkFycmF5IiwicHJvdG90eXBlIiwiYXBwbHkiLCJ1bnNoaWZ0Iiwic3BsaWNlIiwic3RhcnQiLCJkZWxldGVDb3VudCIsIml0ZW1zQXJyYXkiLCJhcmdzIiwiZGVsZXRlZEl0ZW1zQXJyYXkiLCJmaWx0ZXIiLCJ0ZXN0IiwiYXJyYXlVdGlsIiwiYmFja3dhcmRzRm9yRWFjaCIsImVsZW1lbnQiLCJpbmRleCIsInBhc3NlZCIsImZhaWxlZCIsInBydW5lIiwiZm91bmQiLCJzb21lIiwiYXVnbWVudCIsInNlcGFyYXRlIiwiZm9yRWFjaCIsImNvbWJpbmUiLCJyZWR1Y2UiLCJmb3J3YXJkc0ZvckVhY2giLCJjYWxsYmFjayIsImFycmF5TGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxTQUFTQSxLQUFULENBQWVDLEtBQWYsRUFBc0I7QUFBRSxTQUFPQSxNQUFNLENBQU4sQ0FBUDtBQUFrQjs7QUFFMUMsU0FBU0MsTUFBVCxDQUFnQkQsS0FBaEIsRUFBdUI7QUFBRSxTQUFPQSxNQUFNLENBQU4sQ0FBUDtBQUFrQjs7QUFFM0MsU0FBU0UsS0FBVCxDQUFlRixLQUFmLEVBQXNCO0FBQUUsU0FBT0EsTUFBTSxDQUFOLENBQVA7QUFBa0I7O0FBRTFDLFNBQVNHLE1BQVQsQ0FBZ0JILEtBQWhCLEVBQXVCO0FBQUUsU0FBT0EsTUFBTSxDQUFOLENBQVA7QUFBa0I7O0FBRTNDLFNBQVNJLEtBQVQsQ0FBZUosS0FBZixFQUFzQjtBQUFFLFNBQU9BLE1BQU0sQ0FBTixDQUFQO0FBQWtCOztBQUUxQyxTQUFTSyxJQUFULENBQWNMLEtBQWQsRUFBcUI7QUFBRSxTQUFP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QUFpQjtBQUNmNUMsU0FBT0EsS0FEUTtBQUVmRSxVQUFRQSxNQUZPO0FBR2ZDLFNBQU9BLEtBSFE7QUFJZkMsVUFBUUEsTUFKTztBQUtmQyxTQUFPQSxLQUxRO0FBTWZDLFFBQU1BLElBTlM7QUFPZkUsY0FBWUEsVUFQRztBQVFmQyxRQUFNQSxJQVJTO0FBU2ZFLFFBQU1BLElBVFM7QUFVZk0sV0FBU0EsT0FWTTtBQVdmQyxVQUFRQSxNQVhPO0FBWWZvQixXQUFTQSxPQVpNO0FBYWZFLG1CQUFpQkEsZUFiRjtBQWNmYixvQkFBa0JBO0FBZEgsQ0FBakIiLCJmaWxlIjoiYXJyYXkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGZpcnN0KGFycmF5KSB7IHJldHVybiBhcnJheVswXTsgfVxuXG5mdW5jdGlvbiBzZWNvbmQoYXJyYXkpIHsgcmV0dXJuIGFycmF5WzFdOyB9XG5cbmZ1bmN0aW9uIHRoaXJkKGFycmF5KSB7IHJldHVybiBhcnJheVsyXTsgfVxuXG5mdW5jdGlvbiBmb3VydGgoYXJyYXkpIHsgcmV0dXJuIGFycmF5WzNdOyB9XG5cbmZ1bmN0aW9uIGZpZnRoKGFycmF5KSB7IHJldHVybiBhcnJheVs0XTsgfVxuXG5mdW5jdGlvbiBsYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTsgfVxuXG5mdW5jdGlvbiBsYXN0QnV0T25lKGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAyXTsgfVxuXG5mdW5jdGlvbiB0YWlsKGFycmF5KSB7IHJldHVybiBhcnJheS5zbGljZSgxKTsgfVxuXG5mdW5jdGlvbiBwdXNoKGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5mdW5jdGlvbiB1bnNoaWZ0KGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5mdW5jdGlvbiBzcGxpY2UoYXJyYXksIHN0YXJ0LCBkZWxldGVDb3VudCwgaXRlbXNBcnJheSA9IFtdKSB7XG4gIGNvbnN0IGFyZ3MgPSBbc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5pdGVtc0FycmF5XSxcbiAgICAgICAgZGVsZXRlZEl0ZW1zQXJyYXkgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KGFycmF5LCBhcmdzKTtcblxuICByZXR1cm4gZGVsZXRlZEl0ZW1zQXJyYXk7XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihhcnJheSwgdGVzdCkge1xuICBhcnJheVV0aWwuYmFja3dhcmRzRm9yRWFjaChhcnJheSwgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KSxcbiAgICAgICAgZmFpbGVkID0gIXBhc3NlZDtcblxuICAgIGlmIChmYWlsZWQpIHsgIC8vL1xuICAgICAgY29uc3Qgc3RhcnQgPSBpbmRleCwgIC8vL1xuICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcblxuICAgICAgYXJyYXkuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcHJ1bmUoYXJyYXksIHRlc3QpIHtcbiAgY29uc3QgZm91bmQgPSBhcnJheS5zb21lKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xuXG4gICAgICBhcnJheS5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZm91bmQ7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnQoYXJyYXksIHRlc3QsIGVsZW1lbnQpIHtcbiAgY29uc3QgZm91bmQgPSBhcnJheS5zb21lKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG5cbiAgaWYgKCFmb3VuZCkge1xuICAgIGFycmF5LnB1c2goZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gZm91bmQ7XG59XG5cbmZ1bmN0aW9uIHNlcGFyYXRlKGFycmF5LCB0ZXN0LCBhcnJheTEsIGFycmF5Mikge1xuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBwYXNzZWQgP1xuICAgICAgICBhcnJheTEucHVzaChlbGVtZW50KSA6XG4gICAgICAgIGFycmF5Mi5wdXNoKGVsZW1lbnQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY29tYmluZShhcnJheTEsIGFycmF5MiA9IFtdLCB0ZXN0KSB7XG4gIGFycmF5MSA9IGFycmF5Mi5yZWR1Y2UoZnVuY3Rpb24oYXJyYXkxLCBlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHBhc3NlZCkge1xuICAgICAgYXJyYXkxLnB1c2goZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5MTtcbiAgfSwgYXJyYXkxKTtcblxuICByZXR1cm4gYXJyYXkxO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkc0ZvckVhY2goYXJyYXksIGNhbGxiYWNrKSB7XG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBiYWNrd2FyZHNGb3JFYWNoKGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpbmRleCA9IGFycmF5TGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF07XG5cbiAgICBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZpcnN0OiBmaXJzdCxcbiAgc2Vjb25kOiBzZWNvbmQsXG4gIHRoaXJkOiB0aGlyZCxcbiAgZm91cnRoOiBmb3VydGgsXG4gIGZpZnRoOiBmaWZ0aCxcbiAgbGFzdDogbGFzdCxcbiAgbGFzdEJ1dE9uZTogbGFzdEJ1dE9uZSxcbiAgdGFpbDogdGFpbCxcbiAgcHVzaDogcHVzaCxcbiAgdW5zaGlmdDogdW5zaGlmdCxcbiAgc3BsaWNlOiBzcGxpY2UsXG4gIGNvbWJpbmU6IGNvbWJpbmUsXG4gIGZvcndhcmRzRm9yRWFjaDogZm9yd2FyZHNGb3JFYWNoLFxuICBiYWNrd2FyZHNGb3JFYWNoOiBiYWNrd2FyZHNGb3JFYWNoXG59O1xuIl19