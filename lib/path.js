'use strict';

var array = require('./array');

var second = array.second;


function isPathRelativePath(path) {
  var position = path.search(/^\.{1,2}\//),
      pathRelativePath = position !== -1;

  return pathRelativePath;
}

function isPathAbsolutePath(path) {
  var pathRelativePath = isPathRelativePath(path),
      pathAbsolutePath = !pathRelativePath; ///

  return pathAbsolutePath;
}

function isPathTopmostDirectoryName(path) {
  var topmostDirectoryName = topmostDirectoryNameFromPath(path),
      pathTopmostDirectoryName = topmostDirectoryName === null; ///

  return pathTopmostDirectoryName;
}

function isTopmostDirectoryNameContainedInPath(topmostDirectoryName, path) {
  var regExp = new RegExp('^' + topmostDirectoryName),
      position = path.search(regExp),
      topmostDirectoryNameContainedInFilePath = position !== -1;

  return topmostDirectoryNameContainedInFilePath;
}

function combinePaths(directoryPath, relativePath) {
  var absolutePath = null;

  var directoryPathSubEntryNames = directoryPath.split('/'),
      relativeFilePathSubEntryNames = relativePath.split('/');

  var firstRelativeFilePathSubEntryName = first(relativeFilePathSubEntryNames),
      lastDirectoryPathSubEntryName = void 0;

  if (firstRelativeFilePathSubEntryName === '.') {
    relativeFilePathSubEntryNames.shift();
  }

  firstRelativeFilePathSubEntryName = first(relativeFilePathSubEntryNames);
  lastDirectoryPathSubEntryName = last(directoryPathSubEntryNames);

  while (firstRelativeFilePathSubEntryName === '..' && lastDirectoryPathSubEntryName !== undefined) {
    relativeFilePathSubEntryNames.shift();
    directoryPathSubEntryNames.pop();

    firstRelativeFilePathSubEntryName = first(relativeFilePathSubEntryNames);
    lastDirectoryPathSubEntryName = last(directoryPathSubEntryNames);
  }

  if (lastDirectoryPathSubEntryName !== undefined) {
    var absoluteFilePathSubEntryNames = [].concat(directoryPathSubEntryNames).concat(relativeFilePathSubEntryNames);

    absolutePath = absoluteFilePathSubEntryNames.join('/');
  }

  return absolutePath;
}

function concatenatePaths(path1, path2) {
  path1 = pathWithoutTrailingSlashFromPath(path1); ///

  var combinedPath = path1 + '/' + path2;

  return combinedPath;
}

function bottommostNameFromPath(path) {
  var bottommostName = null;

  var matches = path.match(/^.*\/([^\/]*)$/);

  if (matches !== null) {
    var secondMatch = second(matches);

    bottommostName = secondMatch; ///
  }

  return bottommostName;
}

function directoryPathFromPath(path) {
  var matches = path.match(/^(.*)\/[^\/]*$/),
      secondMatch = second(matches),
      directoryPath = secondMatch; ///

  return directoryPath;
}

function topmostDirectoryNameFromPath(path) {
  var topmostDirectoryName = null;

  var matches = path.match(/^([^\/]*)\//);

  if (matches !== null) {
    var secondMatch = second(matches);

    topmostDirectoryName = secondMatch; ///
  }

  return topmostDirectoryName;
}

function pathWithoutTrailingSlashFromPath(path) {
  var pathWithoutTrailingSlash = path.replace(/\/$/, '');

  return pathWithoutTrailingSlash;
}

function pathWithoutBottommostNameFromPath(path) {
  var pathWithoutBottommostName = null;

  var matches = path.match(/(^.*)\/[^\/]*$/);

  if (matches !== null) {
    var secondMatch = second(matches);

    pathWithoutBottommostName = secondMatch; ///
  }

  return pathWithoutBottommostName;
}

function pathWithoutTopmostDirectoryNameFromPath(path) {
  var pathWithoutTopmostDirectoryName = null;

  var matches = path.match(/^[^\/]*\/(.*)$/);

  if (matches !== null) {
    var secondMatch = second(matches);

    pathWithoutTopmostDirectoryName = secondMatch;
  }

  return pathWithoutTopmostDirectoryName;
}

module.exports = {
  isPathRelativePath: isPathRelativePath,
  isPathAbsolutePath: isPathAbsolutePath,
  isPathTopmostDirectoryName: isPathTopmostDirectoryName,
  isTopmostDirectoryNameContainedInPath: isTopmostDirectoryNameContainedInPath,
  combinePaths: combinePaths,
  concatenatePaths: concatenatePaths,
  bottommostNameFromPath: bottommostNameFromPath,
  directoryPathFromPath: directoryPathFromPath,
  topmostDirectoryNameFromPath: topmostDirectoryNameFromPath,
  pathWithoutTrailingSlashFromPath: pathWithoutTrailingSlashFromPath,
  pathWithoutBottommostNameFromPath: pathWithoutBottommostNameFromPath,
  pathWithoutTopmostDirectoryNameFromPath: pathWithoutTopmostDirectoryNameFromPath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9wYXRoLmpzIl0sIm5hbWVzIjpbImFycmF5IiwicmVxdWlyZSIsInNlY29uZCIsImlzUGF0aFJlbGF0aXZlUGF0aCIsInBhdGgiLCJwb3NpdGlvbiIsInNlYXJjaCIsInBhdGhSZWxhdGl2ZVBhdGgiLCJpc1BhdGhBYnNvbHV0ZVBhdGgiLCJwYXRoQWJzb2x1dGVQYXRoIiwiaXNQYXRoVG9wbW9zdERpcmVjdG9yeU5hbWUiLCJ0b3Btb3N0RGlyZWN0b3J5TmFtZSIsInRvcG1vc3REaXJlY3RvcnlOYW1lRnJvbVBhdGgiLCJwYXRoVG9wbW9zdERpcmVjdG9yeU5hbWUiLCJpc1RvcG1vc3REaXJlY3RvcnlOYW1lQ29udGFpbmVkSW5QYXRoIiwicmVnRXhwIiwiUmVnRXhwIiwidG9wbW9zdERpcmVjdG9yeU5hbWVDb250YWluZWRJbkZpbGVQYXRoIiwiY29tYmluZVBhdGhzIiwiZGlyZWN0b3J5UGF0aCIsInJlbGF0aXZlUGF0aCIsImFic29sdXRlUGF0aCIsImRpcmVjdG9yeVBhdGhTdWJFbnRyeU5hbWVzIiwic3BsaXQiLCJyZWxhdGl2ZUZpbGVQYXRoU3ViRW50cnlOYW1lcyIsImZpcnN0UmVsYXRpdmVGaWxlUGF0aFN1YkVudHJ5TmFtZSIsImZpcnN0IiwibGFzdERpcmVjdG9yeVBhdGhTdWJFbnRyeU5hbWUiLCJzaGlmdCIsImxhc3QiLCJ1bmRlZmluZWQiLCJwb3AiLCJhYnNvbHV0ZUZpbGVQYXRoU3ViRW50cnlOYW1lcyIsImNvbmNhdCIsImpvaW4iLCJjb25jYXRlbmF0ZVBhdGhzIiwicGF0aDEiLCJwYXRoMiIsInBhdGhXaXRob3V0VHJhaWxpbmdTbGFzaEZyb21QYXRoIiwiY29tYmluZWRQYXRoIiwiYm90dG9tbW9zdE5hbWVGcm9tUGF0aCIsImJvdHRvbW1vc3ROYW1lIiwibWF0Y2hlcyIsIm1hdGNoIiwic2Vjb25kTWF0Y2giLCJkaXJlY3RvcnlQYXRoRnJvbVBhdGgiLCJwYXRoV2l0aG91dFRyYWlsaW5nU2xhc2giLCJyZXBsYWNlIiwicGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZUZyb21QYXRoIiwicGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZSIsInBhdGhXaXRob3V0VG9wbW9zdERpcmVjdG9yeU5hbWVGcm9tUGF0aCIsInBhdGhXaXRob3V0VG9wbW9zdERpcmVjdG9yeU5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxRQUFRQyxRQUFRLFNBQVIsQ0FBZDs7SUFFUUMsTSxHQUFXRixLLENBQVhFLE07OztBQUVSLFNBQVNDLGtCQUFULENBQTRCQyxJQUE1QixFQUFrQztBQUNoQyxNQUFNQyxXQUFXRCxLQUFLRSxNQUFMLENBQVksWUFBWixDQUFqQjtBQUFBLE1BQ01DLG1CQUFvQkYsYUFBYSxDQUFDLENBRHhDOztBQUdBLFNBQU9FLGdCQUFQO0FBQ0Q7O0FBRUQsU0FBU0Msa0JBQVQsQ0FBNEJKLElBQTVCLEVBQWtDO0FBQ2hDLE1BQU1HLG1CQUFtQkosbUJBQW1CQyxJQUFuQixDQUF6QjtBQUFBLE1BQ01LLG1CQUFtQixDQUFDRixnQkFEMUIsQ0FEZ0MsQ0FFWTs7QUFFNUMsU0FBT0UsZ0JBQVA7QUFDRDs7QUFFRCxTQUFTQywwQkFBVCxDQUFvQ04sSUFBcEMsRUFBMEM7QUFDeEMsTUFBTU8sdUJBQXVCQyw2QkFBNkJSLElBQTdCLENBQTdCO0FBQUEsTUFDTVMsMkJBQTRCRix5QkFBeUIsSUFEM0QsQ0FEd0MsQ0FFMEI7O0FBRWxFLFNBQU9FLHdCQUFQO0FBQ0Q7O0FBRUQsU0FBU0MscUNBQVQsQ0FBK0NILG9CQUEvQyxFQUFxRVAsSUFBckUsRUFBMkU7QUFDekUsTUFBTVcsU0FBUyxJQUFJQyxNQUFKLE9BQWVMLG9CQUFmLENBQWY7QUFBQSxNQUNNTixXQUFXRCxLQUFLRSxNQUFMLENBQVlTLE1BQVosQ0FEakI7QUFBQSxNQUVNRSwwQ0FBMkNaLGFBQWEsQ0FBQyxDQUYvRDs7QUFJQSxTQUFPWSx1Q0FBUDtBQUNEOztBQUVELFNBQVNDLFlBQVQsQ0FBc0JDLGFBQXRCLEVBQXFD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Q0FHcUI7QUFDMUM7O0FBRUQsU0FBT0sseUJBQVA7QUFDRDs7QUFFRCxTQUFTQyx1Q0FBVCxDQUFpRDlDLElBQWpELEVBQXVEO0FBQ3JELE1BQUkrQyxrQ0FBa0MsSUFBdEM7O0FBRUEsTUFBTVQsVUFBVXRDLEtBQUt1QyxLQUFMLENBQVcsZ0JBQVgsQ0FBaEI7O0FBRUEsTUFBSUQsWUFBWSxJQUFoQixFQUFzQjtBQUNwQixRQUFNRSxjQUFjMUMsT0FBT3dDLE9BQVAsQ0FBcEI7O0FBRUFTLHNDQUFrQ1AsV0FBbEM7QUFDRDs7QUFFRCxTQUFPTywrQkFBUDtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZsRCxzQkFBb0JBLGtCQURMO0FBRWZLLHNCQUFvQkEsa0JBRkw7QUFHZkUsOEJBQTRCQSwwQkFIYjtBQUlmSSx5Q0FBdUNBLHFDQUp4QjtBQUtmSSxnQkFBY0EsWUFMQztBQU1maUIsb0JBQWtCQSxnQkFOSDtBQU9mSywwQkFBd0JBLHNCQVBUO0FBUWZLLHlCQUF1QkEscUJBUlI7QUFTZmpDLGdDQUE4QkEsNEJBVGY7QUFVZjBCLG9DQUFrQ0EsZ0NBVm5CO0FBV2ZVLHFDQUFtQ0EsaUNBWHBCO0FBWWZFLDJDQUF5Q0E7QUFaMUIsQ0FBakIiLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXJyYXkgPSByZXF1aXJlKCcuL2FycmF5Jyk7XG5cbmNvbnN0IHsgc2Vjb25kIH0gPSBhcnJheTtcblxuZnVuY3Rpb24gaXNQYXRoUmVsYXRpdmVQYXRoKHBhdGgpIHtcbiAgY29uc3QgcG9zaXRpb24gPSBwYXRoLnNlYXJjaCgvXlxcLnsxLDJ9XFwvLyksXG4gICAgICAgIHBhdGhSZWxhdGl2ZVBhdGggPSAocG9zaXRpb24gIT09IC0xKTtcblxuICByZXR1cm4gcGF0aFJlbGF0aXZlUGF0aDtcbn1cblxuZnVuY3Rpb24gaXNQYXRoQWJzb2x1dGVQYXRoKHBhdGgpIHtcbiAgY29uc3QgcGF0aFJlbGF0aXZlUGF0aCA9IGlzUGF0aFJlbGF0aXZlUGF0aChwYXRoKSxcbiAgICAgICAgcGF0aEFic29sdXRlUGF0aCA9ICFwYXRoUmVsYXRpdmVQYXRoOyAvLy9cblxuICByZXR1cm4gcGF0aEFic29sdXRlUGF0aDtcbn1cblxuZnVuY3Rpb24gaXNQYXRoVG9wbW9zdERpcmVjdG9yeU5hbWUocGF0aCkge1xuICBjb25zdCB0b3Btb3N0RGlyZWN0b3J5TmFtZSA9IHRvcG1vc3REaXJlY3RvcnlOYW1lRnJvbVBhdGgocGF0aCksXG4gICAgICAgIHBhdGhUb3Btb3N0RGlyZWN0b3J5TmFtZSA9ICh0b3Btb3N0RGlyZWN0b3J5TmFtZSA9PT0gbnVsbCk7IC8vL1xuXG4gIHJldHVybiBwYXRoVG9wbW9zdERpcmVjdG9yeU5hbWU7XG59XG5cbmZ1bmN0aW9uIGlzVG9wbW9zdERpcmVjdG9yeU5hbWVDb250YWluZWRJblBhdGgodG9wbW9zdERpcmVjdG9yeU5hbWUsIHBhdGgpIHtcbiAgY29uc3QgcmVnRXhwID0gbmV3IFJlZ0V4cChgXiR7dG9wbW9zdERpcmVjdG9yeU5hbWV9YCksXG4gICAgICAgIHBvc2l0aW9uID0gcGF0aC5zZWFyY2gocmVnRXhwKSxcbiAgICAgICAgdG9wbW9zdERpcmVjdG9yeU5hbWVDb250YWluZWRJbkZpbGVQYXRoID0gKHBvc2l0aW9uICE9PSAtMSk7XG5cbiAgcmV0dXJuIHRvcG1vc3REaXJlY3RvcnlOYW1lQ29udGFpbmVkSW5GaWxlUGF0aDtcbn1cblxuZnVuY3Rpb24gY29tYmluZVBhdGhzKGRpcmVjdG9yeVBhdGgsIHJlbGF0aXZlUGF0aCkge1xuICBsZXQgYWJzb2x1dGVQYXRoID0gbnVsbDtcblxuICBjb25zdCBkaXJlY3RvcnlQYXRoU3ViRW50cnlOYW1lcyA9IGRpcmVjdG9yeVBhdGguc3BsaXQoJy8nKSxcbiAgICAgICAgcmVsYXRpdmVGaWxlUGF0aFN1YkVudHJ5TmFtZXMgPSByZWxhdGl2ZVBhdGguc3BsaXQoJy8nKTtcblxuICBsZXQgZmlyc3RSZWxhdGl2ZUZpbGVQYXRoU3ViRW50cnlOYW1lID0gZmlyc3QocmVsYXRpdmVGaWxlUGF0aFN1YkVudHJ5TmFtZXMpLFxuICAgICAgbGFzdERpcmVjdG9yeVBhdGhTdWJFbnRyeU5hbWU7XG5cbiAgaWYgKGZpcnN0UmVsYXRpdmVGaWxlUGF0aFN1YkVudHJ5TmFtZSA9PT0gJy4nKSB7XG4gICAgcmVsYXRpdmVGaWxlUGF0aFN1YkVudHJ5TmFtZXMuc2hpZnQoKTtcbiAgfVxuXG4gIGZpcnN0UmVsYXRpdmVGaWxlUGF0aFN1YkVudHJ5TmFtZSA9IGZpcnN0KHJlbGF0aXZlRmlsZVBhdGhTdWJFbnRyeU5hbWVzKTtcbiAgbGFzdERpcmVjdG9yeVBhdGhTdWJFbnRyeU5hbWUgPSBsYXN0KGRpcmVjdG9yeVBhdGhTdWJFbnRyeU5hbWVzKTtcblxuICB3aGlsZSAoKGZpcnN0UmVsYXRpdmVGaWxlUGF0aFN1YkVudHJ5TmFtZSA9PT0gJy4uJykgJiYgKGxhc3REaXJlY3RvcnlQYXRoU3ViRW50cnlOYW1lICE9PSB1bmRlZmluZWQpKSB7XG4gICAgcmVsYXRpdmVGaWxlUGF0aFN1YkVudHJ5TmFtZXMuc2hpZnQoKTtcbiAgICBkaXJlY3RvcnlQYXRoU3ViRW50cnlOYW1lcy5wb3AoKTtcblxuICAgIGZpcnN0UmVsYXRpdmVGaWxlUGF0aFN1YkVudHJ5TmFtZSA9IGZpcnN0KHJlbGF0aXZlRmlsZVBhdGhTdWJFbnRyeU5hbWVzKTtcbiAgICBsYXN0RGlyZWN0b3J5UGF0aFN1YkVudHJ5TmFtZSA9IGxhc3QoZGlyZWN0b3J5UGF0aFN1YkVudHJ5TmFtZXMpO1xuICB9XG5cbiAgaWYgKGxhc3REaXJlY3RvcnlQYXRoU3ViRW50cnlOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBhYnNvbHV0ZUZpbGVQYXRoU3ViRW50cnlOYW1lcyA9IFtdLmNvbmNhdChkaXJlY3RvcnlQYXRoU3ViRW50cnlOYW1lcykuY29uY2F0KHJlbGF0aXZlRmlsZVBhdGhTdWJFbnRyeU5hbWVzKTtcblxuICAgIGFic29sdXRlUGF0aCA9IGFic29sdXRlRmlsZVBhdGhTdWJFbnRyeU5hbWVzLmpvaW4oJy8nKTtcbiAgfVxuXG4gIHJldHVybiBhYnNvbHV0ZVBhdGg7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdGVuYXRlUGF0aHMocGF0aDEsIHBhdGgyKSB7XG4gIHBhdGgxID0gcGF0aFdpdGhvdXRUcmFpbGluZ1NsYXNoRnJvbVBhdGgocGF0aDEpOyAgLy8vXG5cbiAgY29uc3QgY29tYmluZWRQYXRoID0gYCR7cGF0aDF9LyR7cGF0aDJ9YDtcblxuICByZXR1cm4gY29tYmluZWRQYXRoO1xufVxuXG5mdW5jdGlvbiBib3R0b21tb3N0TmFtZUZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IGJvdHRvbW1vc3ROYW1lID0gbnVsbDtcblxuICBjb25zdCBtYXRjaGVzID0gcGF0aC5tYXRjaCgvXi4qXFwvKFteXFwvXSopJC8pO1xuXG4gIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICBib3R0b21tb3N0TmFtZSA9IHNlY29uZE1hdGNoOyAgLy8vXG4gIH1cblxuICByZXR1cm4gYm90dG9tbW9zdE5hbWU7XG59XG5cbmZ1bmN0aW9uIGRpcmVjdG9yeVBhdGhGcm9tUGF0aChwYXRoKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBwYXRoLm1hdGNoKC9eKC4qKVxcL1teXFwvXSokLyksXG4gICAgICAgIHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpLFxuICAgICAgICBkaXJlY3RvcnlQYXRoID0gc2Vjb25kTWF0Y2g7IC8vL1xuXG4gIHJldHVybiBkaXJlY3RvcnlQYXRoO1xufVxuXG5mdW5jdGlvbiB0b3Btb3N0RGlyZWN0b3J5TmFtZUZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IHRvcG1vc3REaXJlY3RvcnlOYW1lID0gbnVsbDtcblxuICBjb25zdCBtYXRjaGVzID0gcGF0aC5tYXRjaCgvXihbXlxcL10qKVxcLy8pO1xuXG4gIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICB0b3Btb3N0RGlyZWN0b3J5TmFtZSA9IHNlY29uZE1hdGNoOyAgLy8vXG4gIH1cblxuICByZXR1cm4gdG9wbW9zdERpcmVjdG9yeU5hbWU7XG59XG5cbmZ1bmN0aW9uIHBhdGhXaXRob3V0VHJhaWxpbmdTbGFzaEZyb21QYXRoKHBhdGgpIHtcbiAgY29uc3QgcGF0aFdpdGhvdXRUcmFpbGluZ1NsYXNoID0gcGF0aC5yZXBsYWNlKC9cXC8kLywgJycpO1xuXG4gIHJldHVybiBwYXRoV2l0aG91dFRyYWlsaW5nU2xhc2g7XG59XG5cbmZ1bmN0aW9uIHBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWVGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lID0gbnVsbDtcblxuICBjb25zdCBtYXRjaGVzID0gcGF0aC5tYXRjaCgvKF4uKilcXC9bXlxcL10qJC8pO1xuXG4gIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICBwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lID0gc2Vjb25kTWF0Y2g7IC8vL1xuICB9XG5cbiAgcmV0dXJuIHBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWU7XG59XG5cbmZ1bmN0aW9uIHBhdGhXaXRob3V0VG9wbW9zdERpcmVjdG9yeU5hbWVGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBwYXRoV2l0aG91dFRvcG1vc3REaXJlY3RvcnlOYW1lID0gbnVsbDtcblxuICBjb25zdCBtYXRjaGVzID0gcGF0aC5tYXRjaCgvXlteXFwvXSpcXC8oLiopJC8pO1xuXG4gIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICBwYXRoV2l0aG91dFRvcG1vc3REaXJlY3RvcnlOYW1lID0gc2Vjb25kTWF0Y2g7XG4gIH1cblxuICByZXR1cm4gcGF0aFdpdGhvdXRUb3Btb3N0RGlyZWN0b3J5TmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzUGF0aFJlbGF0aXZlUGF0aDogaXNQYXRoUmVsYXRpdmVQYXRoLFxuICBpc1BhdGhBYnNvbHV0ZVBhdGg6IGlzUGF0aEFic29sdXRlUGF0aCxcbiAgaXNQYXRoVG9wbW9zdERpcmVjdG9yeU5hbWU6IGlzUGF0aFRvcG1vc3REaXJlY3RvcnlOYW1lLFxuICBpc1RvcG1vc3REaXJlY3RvcnlOYW1lQ29udGFpbmVkSW5QYXRoOiBpc1RvcG1vc3REaXJlY3RvcnlOYW1lQ29udGFpbmVkSW5QYXRoLFxuICBjb21iaW5lUGF0aHM6IGNvbWJpbmVQYXRocyxcbiAgY29uY2F0ZW5hdGVQYXRoczogY29uY2F0ZW5hdGVQYXRocyxcbiAgYm90dG9tbW9zdE5hbWVGcm9tUGF0aDogYm90dG9tbW9zdE5hbWVGcm9tUGF0aCxcbiAgZGlyZWN0b3J5UGF0aEZyb21QYXRoOiBkaXJlY3RvcnlQYXRoRnJvbVBhdGgsXG4gIHRvcG1vc3REaXJlY3RvcnlOYW1lRnJvbVBhdGg6IHRvcG1vc3REaXJlY3RvcnlOYW1lRnJvbVBhdGgsXG4gIHBhdGhXaXRob3V0VHJhaWxpbmdTbGFzaEZyb21QYXRoOiBwYXRoV2l0aG91dFRyYWlsaW5nU2xhc2hGcm9tUGF0aCxcbiAgcGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZUZyb21QYXRoOiBwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lRnJvbVBhdGgsXG4gIHBhdGhXaXRob3V0VG9wbW9zdERpcmVjdG9yeU5hbWVGcm9tUGF0aDogcGF0aFdpdGhvdXRUb3Btb3N0RGlyZWN0b3J5TmFtZUZyb21QYXRoXG59O1xuIl19