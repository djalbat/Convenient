'use strict';

var GET_METHOD = 'GET',
    POST_METHOD = 'POST',
    ETX_CHARACTER = '\x03';

function get(host, uri, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///
    parameters = {};
  }

  var method = GET_METHOD,
      body = undefined;

  request(host, uri, parameters, method, body, callback);
}

function post(host, uri, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///
    parameters = {};
  }

  var method = POST_METHOD,
      body = JSON.stringify(json);

  request(host, uri, parameters, method, body, callback);
}

function onETX(handler) {
  var _process = process,
      stdin = _process.stdin,
      setRawMode = stdin.setRawMode;


  if (setRawMode) {
    var rawMode = true,
        encoding = 'utf8';

    stdin.setRawMode(rawMode);
    stdin.setEncoding(encoding);

    stdin.resume();

    stdin.addListener('data', dataHandler);

    return offExt;
  }

  function offExt() {
    stdin.removeListener('data', dataHandler);
  }

  function dataHandler(character) {
    if (character === ETX_CHARACTER) {
      handler();
    }
  }
}

module.exports = {
  get: get,
  post: post,
  onETX: onETX
};

function request(host, uri, parameters, method, body, callback) {
  var url = urlFromHostURIAndParameters(host, uri, parameters),
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;


    if (readyState == 4) {
      if (status == 200) {
        var jsonString = responseText,
            ///
        json = JSON.parse(jsonString);

        callback(json);
      } else {
        callback(null);
      }
    }
  };

  xmlHttpRequest.open(method, url, true);

  xmlHttpRequest.setRequestHeader('Content-Type', 'application/json');

  xmlHttpRequest.send(body);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvbWlzY2VsbGFuZW91cy5qcyJdLCJuYW1lcyI6WyJHRVRfTUVUSE9EIiwiUE9TVF9NRVRIT0QiLCJFVFhfQ0hBUkFDVEVSIiwiZ2V0IiwiaG9zdCIsInVyaSIsInBhcmFtZXRlcnMiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsIm1ldGhvZCIsImJvZHkiLCJyZXF1ZXN0IiwicG9zdCIsImpzb24iLCJKU09OIiwic3RyaW5naWZ5Iiwib25FVFgiLCJoYW5kbGVyIiwicHJvY2VzcyIsInN0ZGluIiwic2V0UmF3TW9kZSIsInJhd01vZGUiLCJlbmNvZGluZyIsInNldEVuY29kaW5nIiwicmVzdW1lIiwiYWRkTGlzdGVuZXIiLCJkYXRhSGFuZGxlciIsIm9mZkV4dCIsInJlbW92ZUxpc3RlbmVyIiwiY2hhcmFjdGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsInVybCIsInVybEZyb21Ib3N0VVJJQW5kUGFyYW1ldGVycyIsInhtbEh0dHBSZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwianNvblN0cmluZyIsInBhcnNlIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxhQUFhLEtBQW5CO0FBQUEsSUFDTUMsY0FBYyxNQURwQjtBQUFBLElBRU1DLGdCQUFnQixNQUZ0Qjs7QUFJQSxTQUFTQyxHQUFULENBQWFDLElBQWIsRUFBbUJDLEdBQW5CLEVBQXdCQyxVQUF4QixFQUFvQ0MsUUFBcEMsRUFBOEM7QUFDNUMsTUFBSUEsYUFBYUMsU0FBakIsRUFBNEI7QUFDMUJELGVBQVdELFVBQVgsQ0FEMEIsQ0FDSDtBQUN2QkEsaUJBQWEsRUFBYjtBQUNEOztBQUVELE1BQU1HLFNBQVNULFVBQWY7QUFBQSxNQUNNVSxPQUFPRixTQURiOztBQUdBRyxVQUFRUCxJQUFSLEVBQWNDLEdBQWQsRUFBbUJDLFVBQW5CLEVBQStCRyxNQUEvQixFQUF1Q0MsSUFBdkMsRUFBNkNILFFBQTdDO0FBQ0Q7O0FBRUQsU0FBU0ssSUFBVCxDQUFjUixJQUFkLEVBQW9CQyxHQUFwQixFQUF5QlEsSUFBekIsRUFBK0JQLFVBQS9CLEVBQTJDQyxRQUEzQyxFQUFxRDtBQUNuRCxNQUFJQSxhQUFhQyxTQUFqQixFQUE0QjtBQUMxQkQsZUFBV0QsVUFBWCxDQUQwQixDQUNIO0FBQ3ZCQSxpQkFBYSxFQUFiO0FBQ0Q7O0FBRUQsTUFBTUcsU0FBU1IsV0FBZjtBQUFBLE1BQ01TLE9BQU9JLEtBQUtDLFNBQUwsQ0FBZUYsSUFBZixDQURiOztBQUdBRixVQUFRUCxJQUFSLEVBQWNDLEdBQWQsRUFBbUJDLFVBQW5CLEVBQStCRyxNQUEvQixFQUF1Q0MsSUFBdkMsRUFBNkNILFFBQTdDO0FBQ0Q7O0FBRUQsU0FBU1MsS0FBVCxDQUFlQyxPQUFmLEVBQXdCO0FBQUEsaUJBQ0pDLE9BREk7QUFBQSxNQUNkQyxLQURjLFlBQ2RBLEtBRGM7QUFBQSxNQUVkQyxVQUZjLEdBRUNELEtBRkQsQ0FFZEMsVUFGYzs7O0FBSXRCLE1BQUlBLFVBQUosRUFBZ0I7QUFDZCxRQUFNQyxVQUFVLElBQWhCO0FBQUEsUUFDTUMsV0FBVyxNQURqQjs7QUFHQUgsVUFBTUMsVUFBTixDQUFpQkMsT0FBakI7QUFDQUYsVUFBTUksV0FBTixDQUFrQkQsUUFBbEI7O0FBRUFILFVBQU1LLE1BQU47O0FBRUFMLFVBQU1NLFdBQU4sQ0FBa0IsTUFBbEIsRUFBMEJDLFdBQTFCOztBQUVBLFdBQU9DLE1BQVA7QUFDRDs7QUFFRCxXQUFTQSxNQUFULEdBQWtCO0FBQ2hCUixVQUFNUyxjQUFOLENBQXFCLE1BQXJCLEVBQTZCRixXQUE3QjtBQUNEOztBQUVELFdBQVNBLFdBQVQsQ0FBcUJHLFNBQXJCLEVBQWdDO0FBQzlCLFFBQUlBLGNBQWMzQixhQUFsQixFQUFpQztBQUMvQmU7QUFDRDtBQUNGO0FBQ0Y7O0FBRURhLE9BQU9DLE9BQVAsR0FBaUI7QUFDZjVCLE9BQUtBLEdBRFU7QUFFZlMsUUFBTUEsSUFGUztBQUdmSSxTQUFPQTtBQUhRLENBQWpCOztBQU1BLFNBQVNMLE9BQVQsQ0FBaUJQLElBQWpCLEVBQXVCQyxHQUF2QixFQUE0QkMsVUFBNUIsRUFBd0NHLE1BQXhDLEVBQWdEQyxJQUFoRCxFQUFzREgsUUFBdEQsRUFBZ0U7QUFDOUQsTUFBTXlCLE1BQU1DLDRCQUE0QjdCLElBQTVCLEVBQWtDQyxHQUFsQyxFQUF1Q0MsVUFBdkMsQ0FBWjtBQUFBLE1BQ000QixpQkFBaUIsSUFBSUMsY0FBSixFQUR2Qjs7QUFHQUQsaUJBQWVFLGtCQUFmLEdBQW9DLFlBQVc7QUFBQSxRQUNyQ0MsVUFEcUMsR0FDQUgsY0FEQSxDQUNyQ0csVUFEcUM7QUFBQSxRQUN6QkMsTUFEeUIsR0FDQUosY0FEQSxDQUN6QkksTUFEeUI7QUFBQSxRQUNqQkMsWUFEaUIsR0FDQUwsY0FEQSxDQUNqQkssWUFEaUI7OztBQUc3QyxRQUFJRixjQUFjLENBQWxCLEVBQXFCO0FBQ25CLFVBQUlDLFVBQVUsR0FBZCxFQUFtQjtBQUNqQixZQUFNRSxhQUFhRCxZQUFuQjtBQUFBLFlBQWlDO0FBQzNCMUIsZUFBT0MsS0FBSzJCLEtBQUwsQ0FBV0QsVUFBWCxDQURiOztBQUdBakMsaUJBQVNNLElBQVQ7QUFDRCxPQUxELE1BS087QUFDTE4saUJBQVMsSUFBVDtBQUNEO0FBQ0Y7QUFDRixHQWJEOztBQWVBMkIsaUJBQWVRLElBQWYsQ0FBb0JqQyxNQUFwQixFQUE0QnVCLEdBQTVCLEVBQWlDLElBQWpDOztBQUVBRSxpQkFBZVMsZ0JBQWYsQ0FBZ0MsY0FBaEMsRUFBZ0Qsa0JBQWhEOztBQUVBVCxpQkFBZVUsSUFBZixDQUFvQmxDLElBQXBCO0FBQ0QiLCJmaWxlIjoibWlzY2VsbGFuZW91cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgR0VUX01FVEhPRCA9ICdHRVQnLFxuICAgICAgUE9TVF9NRVRIT0QgPSAnUE9TVCcsXG4gICAgICBFVFhfQ0hBUkFDVEVSID0gJ1xcdTAwMDMnO1xuXG5mdW5jdGlvbiBnZXQoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gcGFyYW1ldGVyczsgLy8vXG4gICAgcGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gR0VUX01FVEhPRCxcbiAgICAgICAgYm9keSA9IHVuZGVmaW5lZDtcblxuICByZXF1ZXN0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIHBvc3QoaG9zdCwgdXJpLCBqc29uLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gcGFyYW1ldGVyczsgLy8vXG4gICAgcGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gUE9TVF9NRVRIT0QsXG4gICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShqc29uKTtcblxuICByZXF1ZXN0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIG9uRVRYKGhhbmRsZXIpIHtcbiAgY29uc3QgeyBzdGRpbiB9ID0gcHJvY2VzcyxcbiAgICAgICAgeyBzZXRSYXdNb2RlIH0gPSBzdGRpbjtcblxuICBpZiAoc2V0UmF3TW9kZSkge1xuICAgIGNvbnN0IHJhd01vZGUgPSB0cnVlLFxuICAgICAgICAgIGVuY29kaW5nID0gJ3V0ZjgnO1xuXG4gICAgc3RkaW4uc2V0UmF3TW9kZShyYXdNb2RlKTtcbiAgICBzdGRpbi5zZXRFbmNvZGluZyhlbmNvZGluZyk7XG5cbiAgICBzdGRpbi5yZXN1bWUoKTtcblxuICAgIHN0ZGluLmFkZExpc3RlbmVyKCdkYXRhJywgZGF0YUhhbmRsZXIpO1xuXG4gICAgcmV0dXJuIG9mZkV4dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9mZkV4dCgpIHtcbiAgICBzdGRpbi5yZW1vdmVMaXN0ZW5lcignZGF0YScsIGRhdGFIYW5kbGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRhdGFIYW5kbGVyKGNoYXJhY3Rlcikge1xuICAgIGlmIChjaGFyYWN0ZXIgPT09IEVUWF9DSEFSQUNURVIpIHtcbiAgICAgIGhhbmRsZXIoKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldDogZ2V0LFxuICBwb3N0OiBwb3N0LFxuICBvbkVUWDogb25FVFhcbn07XG5cbmZ1bmN0aW9uIHJlcXVlc3QoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHVybCA9IHVybEZyb21Ib3N0VVJJQW5kUGFyYW1ldGVycyhob3N0LCB1cmksIHBhcmFtZXRlcnMpLFxuICAgICAgICB4bWxIdHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gIHhtbEh0dHBSZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHsgcmVhZHlTdGF0ZSwgc3RhdHVzLCByZXNwb25zZVRleHQgfSA9IHhtbEh0dHBSZXF1ZXN0O1xuXG4gICAgaWYgKHJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgY29uc3QganNvblN0cmluZyA9IHJlc3BvbnNlVGV4dCwgLy8vXG4gICAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb25TdHJpbmcpO1xuXG4gICAgICAgIGNhbGxiYWNrKGpzb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHhtbEh0dHBSZXF1ZXN0Lm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuXG4gIHhtbEh0dHBSZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cbiAgeG1sSHR0cFJlcXVlc3Quc2VuZChib2R5KTtcbn1cblxuIl19