"use strict";

import { AMPERSAND_CHARACTER, EMPTY_STRING } from "../constants";
export function overwrite(headers, name, value) {
  const ownPropertyNames = Object.getOwnPropertyNames(headers),
        lowerCaseName = name.toLowerCase(),
        overwritten = ownPropertyNames.some(ownPropertyName => {
    const lowerCaseOwnPropertyName = ownPropertyName.toLowerCase();

    if (lowerCaseOwnPropertyName === lowerCaseName) {
      headers[ownPropertyName] = value;
      return true;
    }
  });

  if (!overwritten) {
    headers[name] = value;
  }
}
export function underwrite(headers, name, value) {
  const ownPropertyNames = Object.getOwnPropertyNames(headers),
        lowercaseName = name.toLowerCase(),
        lowerCaseOwnPropertyNames = ownPropertyNames.map(ownPropertyName => {
    const lowerCaseOwnPropertyName = ownPropertyName.toLowerCase();
    return lowerCaseOwnPropertyName;
  }),
        lowerCaseOwnPropertyNamesIncludesLowercaseName = lowerCaseOwnPropertyNames.includes(lowercaseName);

  if (!lowerCaseOwnPropertyNamesIncludesLowercaseName) {
    headers[name] = value;
  }
}
export function queryStringFromParameters(parameters) {
  const names = Object.keys(parameters),
        namesLength = names.length,
        lastIndex = namesLength - 1,
        queryString = names.reduce((queryString, name, index) => {
    const value = parameters[name],
          encodedName = encodeURIComponent(name),
          encodedValue = encodeURIComponent(value),
          ampersandOrNothing = index !== lastIndex ? AMPERSAND_CHARACTER : EMPTY_STRING;
    queryString += `${encodedName}=${encodedValue}${ampersandOrNothing}`;
    return queryString;
  }, "");
  return queryString;
}
export default {
  overwrite,
  underwrite,
  queryStringFromParameters
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHAuanMiXSwibmFtZXMiOlsiQU1QRVJTQU5EX0NIQVJBQ1RFUiIsIkVNUFRZX1NUUklORyIsIm92ZXJ3cml0ZSIsImhlYWRlcnMiLCJuYW1lIiwidmFsdWUiLCJvd25Qcm9wZXJ0eU5hbWVzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImxvd2VyQ2FzZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsIm92ZXJ3cml0dGVuIiwic29tZSIsIm93blByb3BlcnR5TmFtZSIsImxvd2VyQ2FzZU93blByb3BlcnR5TmFtZSIsInVuZGVyd3JpdGUiLCJsb3dlcmNhc2VOYW1lIiwibG93ZXJDYXNlT3duUHJvcGVydHlOYW1lcyIsIm1hcCIsImxvd2VyQ2FzZU93blByb3BlcnR5TmFtZXNJbmNsdWRlc0xvd2VyY2FzZU5hbWUiLCJpbmNsdWRlcyIsInF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMiLCJwYXJhbWV0ZXJzIiwibmFtZXMiLCJrZXlzIiwibmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJsYXN0SW5kZXgiLCJxdWVyeVN0cmluZyIsInJlZHVjZSIsImluZGV4IiwiZW5jb2RlZE5hbWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVkVmFsdWUiLCJhbXBlcnNhbmRPck5vdGhpbmciXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFNBQVNBLG1CQUFULEVBQThCQyxZQUE5QixRQUFrRCxjQUFsRDtBQUVBLE9BQU8sU0FBU0MsU0FBVCxDQUFtQkMsT0FBbkIsRUFBNEJDLElBQTVCLEVBQWtDQyxLQUFsQyxFQUF5QztBQUM5QyxRQUFNQyxnQkFBZ0IsR0FBR0MsTUFBTSxDQUFDQyxtQkFBUCxDQUEyQkwsT0FBM0IsQ0FBekI7QUFBQSxRQUNNTSxhQUFhLEdBQUdMLElBQUksQ0FBQ00sV0FBTCxFQUR0QjtBQUFBLFFBRU1DLFdBQVcsR0FBR0wsZ0JBQWdCLENBQUNNLElBQWpCLENBQXVCQyxlQUFELElBQXFCO0FBQ3ZELFVBQU1DLHdCQUF3QixHQUFHRCxlQUFlLENBQUNILFdBQWhCLEVBQWpDOztBQUVBLFFBQUlJLHdCQUF3QixLQUFLTCxhQUFqQyxFQUFnRDtBQUM5Q04sTUFBQUEsT0FBTyxDQUFDVSxlQUFELENBQVAsR0FBMkJSLEtBQTNCO0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQVJhLENBRnBCOztBQVlBLE1BQUksQ0FBQ00sV0FBTCxFQUFrQjtBQUNoQlIsSUFBQUEsT0FBTyxDQUFDQyxJQUFELENBQVAsR0FBZ0JDLEtBQWhCO0FBQ0Q7QUFDRjtBQUVELE9BQU8sU0FBU1UsVUFBVCxDQUFvQlosT0FBcEIsRUFBNkJDLElBQTdCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUMvQyxRQUFNQyxnQkFBZ0IsR0FBR0MsTUFBTSxDQUFDQyxtQkFBUCxDQUEyQkwsT0FBM0IsQ0FBekI7QUFBQSxRQUNNYSxhQUFhLEdBQUdaLElBQUksQ0FBQ00sV0FBTCxFQUR0QjtBQUFBLFFBRU1PLHlCQUF5QixHQUFHWCxnQkFBZ0IsQ0FBQ1ksR0FBakIsQ0FBc0JMLGVBQUQsSUFBcUI7QUFDcEUsVUFBTUMsd0JBQXdCLEdBQUdELGVBQWUsQ0FBQ0gsV0FBaEIsRUFBakM7QUFFQSxXQUFPSSx3QkFBUDtBQUNELEdBSjJCLENBRmxDO0FBQUEsUUFPTUssOENBQThDLEdBQUdGLHlCQUF5QixDQUFDRyxRQUExQixDQUFtQ0osYUFBbkMsQ0FQdkQ7O0FBU0EsTUFBSSxDQUFDRyw4Q0FBTCxFQUFxRDtBQUNuRGhCLElBQUFBLE9BQU8sQ0FBQ0MsSUFBRCxDQUFQLEdBQWdCQyxLQUFoQjtBQUNEO0FBQ0Y7QUFFRCxPQUFPLFNBQVNnQix5QkFBVCxDQUFtQ0MsVUFBbkMsRUFBK0M7QUFDcEQsUUFBTUMsS0FBSyxHQUFHaEIsTUFBTSxDQUFDaUIsSUFBUCxDQUFZRixVQUFaLENBQWQ7QUFBQSxRQUNNRyxXQUFXLEdBQUdGLEtBQUssQ0FBQ0csTUFEMUI7QUFBQSxRQUVNQyxTQUFTLEdBQUdGLFdBQVcsR0FBRyxDQUZoQztBQUFBLFFBR01HLFdBQVcsR0FBR0wsS0FBSyxDQUFDTSxNQUFOLENBQWEsQ0FBQ0QsV0FBRCxFQUFjeEIsSUFBZCxFQUFvQjBCLEtBQXBCLEtBQThCO0FBQ3ZELFVBQU16QixLQUFLLEdBQUdpQixVQUFVLENBQUNsQixJQUFELENBQXhCO0FBQUEsVUFDTTJCLFdBQVcsR0FBR0Msa0JBQWtCLENBQUM1QixJQUFELENBRHRDO0FBQUEsVUFFTTZCLFlBQVksR0FBR0Qsa0JBQWtCLENBQUMzQixLQUFELENBRnZDO0FBQUEsVUFHTTZCLGtCQUFrQixHQUFJSixLQUFLLEtBQUtILFNBQVgsR0FDRTNCLG1CQURGLEdBRUlDLFlBTC9CO0FBT0EyQixJQUFBQSxXQUFXLElBQUssR0FBRUcsV0FBWSxJQUFHRSxZQUFhLEdBQUVDLGtCQUFtQixFQUFuRTtBQUVBLFdBQU9OLFdBQVA7QUFDRCxHQVhhLEVBV1gsRUFYVyxDQUhwQjtBQWdCQSxTQUFPQSxXQUFQO0FBQ0Q7QUFFRCxlQUFlO0FBQ2IxQixFQUFBQSxTQURhO0FBRWJhLEVBQUFBLFVBRmE7QUFHYk0sRUFBQUE7QUFIYSxDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEFNUEVSU0FORF9DSEFSQUNURVIsIEVNUFRZX1NUUklORyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG92ZXJ3cml0ZShoZWFkZXJzLCBuYW1lLCB2YWx1ZSkge1xuICBjb25zdCBvd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycyksXG4gICAgICAgIGxvd2VyQ2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIG92ZXJ3cml0dGVuID0gb3duUHJvcGVydHlOYW1lcy5zb21lKChvd25Qcm9wZXJ0eU5hbWUpID0+IHtcbiAgICAgICAgICBjb25zdCBsb3dlckNhc2VPd25Qcm9wZXJ0eU5hbWUgPSBvd25Qcm9wZXJ0eU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgIGlmIChsb3dlckNhc2VPd25Qcm9wZXJ0eU5hbWUgPT09IGxvd2VyQ2FzZU5hbWUpIHtcbiAgICAgICAgICAgIGhlYWRlcnNbb3duUHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gIGlmICghb3ZlcndyaXR0ZW4pIHtcbiAgICBoZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuZGVyd3JpdGUoaGVhZGVycywgbmFtZSwgdmFsdWUpIHtcbiAgY29uc3Qgb3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLFxuICAgICAgICBsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBsb3dlckNhc2VPd25Qcm9wZXJ0eU5hbWVzID0gb3duUHJvcGVydHlOYW1lcy5tYXAoKG93blByb3BlcnR5TmFtZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGxvd2VyQ2FzZU93blByb3BlcnR5TmFtZSA9IG93blByb3BlcnR5TmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgcmV0dXJuIGxvd2VyQ2FzZU93blByb3BlcnR5TmFtZTtcbiAgICAgICAgfSksXG4gICAgICAgIGxvd2VyQ2FzZU93blByb3BlcnR5TmFtZXNJbmNsdWRlc0xvd2VyY2FzZU5hbWUgPSBsb3dlckNhc2VPd25Qcm9wZXJ0eU5hbWVzLmluY2x1ZGVzKGxvd2VyY2FzZU5hbWUpO1xuXG4gIGlmICghbG93ZXJDYXNlT3duUHJvcGVydHlOYW1lc0luY2x1ZGVzTG93ZXJjYXNlTmFtZSkge1xuICAgIGhlYWRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVycyhwYXJhbWV0ZXJzKSB7XG4gIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMocGFyYW1ldGVycyksXG4gICAgICAgIG5hbWVzTGVuZ3RoID0gbmFtZXMubGVuZ3RoLFxuICAgICAgICBsYXN0SW5kZXggPSBuYW1lc0xlbmd0aCAtIDEsXG4gICAgICAgIHF1ZXJ5U3RyaW5nID0gbmFtZXMucmVkdWNlKChxdWVyeVN0cmluZywgbmFtZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtZXRlcnNbbmFtZV0sXG4gICAgICAgICAgICAgICAgZW5jb2RlZE5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQobmFtZSksXG4gICAgICAgICAgICAgICAgZW5jb2RlZFZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSxcbiAgICAgICAgICAgICAgICBhbXBlcnNhbmRPck5vdGhpbmcgPSAoaW5kZXggIT09IGxhc3RJbmRleCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQU1QRVJTQU5EX0NIQVJBQ1RFUiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVNUFRZX1NUUklORztcbiAgXG4gICAgICAgICAgcXVlcnlTdHJpbmcgKz0gYCR7ZW5jb2RlZE5hbWV9PSR7ZW5jb2RlZFZhbHVlfSR7YW1wZXJzYW5kT3JOb3RoaW5nfWA7XG4gIFxuICAgICAgICAgIHJldHVybiBxdWVyeVN0cmluZztcbiAgICAgICAgfSwgXCJcIik7XG5cbiAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG92ZXJ3cml0ZSxcbiAgdW5kZXJ3cml0ZSxcbiAgcXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVyc1xufTtcbiJdfQ==