'use strict';

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    last = arrayUtilities.last;


function isPathName(path) {
  path = path.replace(/^\//, '').replace(/\/$/, ''); ///

  var pathName = /\//.test(path) === true;

  return pathName;
}

function isPathTopmostName(path) {
  var pathName = isPathName(path),
      pathAbsolutePath = isPathAbsolutePath(path),
      pathTopmostName = pathName && pathAbsolutePath;

  return pathTopmostName;
}

function isPathRelativePath(path) {
  var pathRelativePath = !/^\//.test(path);

  return pathRelativePath;
}

function isPathAbsolutePath(path) {
  var pathAbsolutePath = /^\//.test(path);

  return pathAbsolutePath;
}

function isTopmostNameInAbsolutePath(topmostName, absolutePath) {
  var regExp = new RegExp('^' + topmostName + '(?:\\/.+)?$'),
      topmostNameInAbsolutePath = regExp.test(absolutePath);

  return topmostNameInAbsolutePath;
}

function combinePaths(path, relativePath) {
  var combinedPath = null;

  var pathNames = path.split('/'),
      relativePathNames = relativePath.split('/');

  var lastPathName = void 0,
      firstRelativePathName = first(relativePathNames);

  if (firstRelativePathName === '.') {
    relativePathNames.shift();
  }

  firstRelativePathName = first(relativePathNames);
  lastPathName = last(pathNames);

  while (firstRelativePathName === '..' && lastPathName !== undefined) {
    relativePathNames.shift();
    pathNames.pop();

    firstRelativePathName = first(relativePathNames);
    lastPathName = last(pathNames);
  }

  if (lastPathName !== undefined) {
    var _pathNames = [].concat(_pathNames).concat(relativePathNames);

    combinedPath = _pathNames.join('/');
  }

  return combinedPath;
}

function concatenatePaths(path, relativePath) {
  path = path.replace(/\/$/, ''); ///

  var concatenatedPath = path + '/' + relativePath;

  return concatenatedPath;
}

function bottommostNameFromPath(path) {
  var bottommostName = null;

  var matches = path.match(/^.*\/([^\/]+\/?)$/);

  if (matches !== null) {
    var secondMatch = second(matches);

    bottommostName = secondMatch; ///
  }

  return bottommostName;
}

function topmostDirectoryPathFromPath(path) {
  var matches = path.match(/^(.+)\/[^\/]+\/?$/),
      secondMatch = second(matches),
      topmostDirectoryPath = secondMatch; ///

  return topmostDirectoryPath;
}

function topmostDirectoryNameFromPath(path) {
  var topmostDirectoryName = null;

  var matches = path.match(/^([^\/]+)\/.+$/);

  if (matches !== null) {
    var secondMatch = second(matches);

    topmostDirectoryName = secondMatch; ///
  }

  return topmostDirectoryName;
}

function pathWithoutBottommostNameFromPath(path) {
  var pathWithoutBottommostName = null;

  var matches = path.match(/^(.*)\/[^\/]+\/?$/);

  if (matches !== null) {
    var secondMatch = second(matches);

    pathWithoutBottommostName = secondMatch; ///
  }

  return pathWithoutBottommostName;
}

function pathWithoutTopmostDirectoryNameFromPath(path) {
  var pathWithoutTopmostDirectoryName = null;

  var matches = path.match(/^[^\/]+\/(.+)$/);

  if (matches !== null) {
    var secondMatch = second(matches);

    pathWithoutTopmostDirectoryName = secondMatch;
  }

  return pathWithoutTopmostDirectoryName;
}

module.exports = {
  isPathName: isPathName,
  isPathTopmostName: isPathTopmostName,
  isPathRelativePath: isPathRelativePath,
  isPathAbsolutePath: isPathAbsolutePath,
  isTopmostNameInAbsolutePath: isTopmostNameInAbsolutePath,
  combinePaths: combinePaths,
  concatenatePaths: concatenatePaths,
  bottommostNameFromPath: bottommostNameFromPath,
  topmostDirectoryPathFromPath: topmostDirectoryPathFromPath,
  topmostDirectoryNameFromPath: topmostDirectoryNameFromPath,
  pathWithoutBottommostNameFromPath: pathWithoutBottommostNameFromPath,
  pathWithoutTopmostDirectoryNameFromPath: pathWithoutTopmostDirectoryNameFromPath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcGF0aC5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInJlcXVpcmUiLCJmaXJzdCIsInNlY29uZCIsImxhc3QiLCJpc1BhdGhOYW1lIiwicGF0aCIsInJlcGxhY2UiLCJwYXRoTmFtZSIsInRlc3QiLCJpc1BhdGhUb3Btb3N0TmFtZSIsInBhdGhBYnNvbHV0ZVBhdGgiLCJpc1BhdGhBYnNvbHV0ZVBhdGgiLCJwYXRoVG9wbW9zdE5hbWUiLCJpc1BhdGhSZWxhdGl2ZVBhdGgiLCJwYXRoUmVsYXRpdmVQYXRoIiwiaXNUb3Btb3N0TmFtZUluQWJzb2x1dGVQYXRoIiwidG9wbW9zdE5hbWUiLCJhYnNvbHV0ZVBhdGgiLCJyZWdFeHAiLCJSZWdFeHAiLCJ0b3Btb3N0TmFtZUluQWJzb2x1dGVQYXRoIiwiY29tYmluZVBhdGhzIiwicmVsYXRpdmVQYXRoIiwiY29tYmluZWRQYXRoIiwicGF0aE5hbWVzIiwic3BsaXQiLCJyZWxhdGl2ZVBhdGhOYW1lcyIsImxhc3RQYXRoTmFtZSIsImZpcnN0UmVsYXRpdmVQYXRoTmFtZSIsInNoaWZ0IiwidW5kZWZpbmVkIiwicG9wIiwiY29uY2F0Iiwiam9pbiIsImNvbmNhdGVuYXRlUGF0aHMiLCJjb25jYXRlbmF0ZWRQYXRoIiwiYm90dG9tbW9zdE5hbWVGcm9tUGF0aCIsImJvdHRvbW1vc3ROYW1lIiwibWF0Y2hlcyIsIm1hdGNoIiwic2Vjb25kTWF0Y2giLCJ0b3Btb3N0RGlyZWN0b3J5UGF0aEZyb21QYXRoIiwidG9wbW9zdERpcmVjdG9yeVBhdGgiLCJ0b3Btb3N0RGlyZWN0b3J5TmFtZUZyb21QYXRoIiwidG9wbW9zdERpcmVjdG9yeU5hbWUiLCJwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lRnJvbVBhdGgiLCJwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lIiwicGF0aFdpdGhvdXRUb3Btb3N0RGlyZWN0b3J5TmFtZUZyb21QYXRoIiwicGF0aFdpdGhvdXRUb3Btb3N0RGly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Q0FBVCxDQUFpRDFDLElBQWpELEVBQXVEO0FBQ3JELE1BQUkyQyxrQ0FBa0MsSUFBdEM7O0FBRUEsTUFBTVYsVUFBVWpDLEtBQUtrQyxLQUFMLENBQVcsZ0JBQVgsQ0FBaEI7O0FBRUEsTUFBSUQsWUFBWSxJQUFoQixFQUFzQjtBQUNwQixRQUFNRSxjQUFjdEMsT0FBT29DLE9BQVAsQ0FBcEI7O0FBRUFVLHNDQUFrQ1IsV0FBbEM7QUFDRDs7QUFFRCxTQUFPUSwrQkFBUDtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2Y5Qyx3QkFEZTtBQUVmSyxzQ0FGZTtBQUdmSSx3Q0FIZTtBQUlmRix3Q0FKZTtBQUtmSSwwREFMZTtBQU1mTSw0QkFOZTtBQU9mYSxvQ0FQZTtBQVFmRSxnREFSZTtBQVNmSyw0REFUZTtBQVVmRSw0REFWZTtBQVdmRSxzRUFYZTtBQVlmRTtBQVplLENBQWpCIiwiZmlsZSI6InBhdGguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgZmlyc3QsIHNlY29uZCwgbGFzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGlzUGF0aE5hbWUocGF0aCkge1xuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9eXFwvLywnJykucmVwbGFjZSgvXFwvJC8sICcnKTsgLy8vXG5cbiAgY29uc3QgcGF0aE5hbWUgPSAoL1xcLy8udGVzdChwYXRoKSA9PT0gdHJ1ZSk7XG5cbiAgcmV0dXJuIHBhdGhOYW1lO1xufVxuXG5mdW5jdGlvbiBpc1BhdGhUb3Btb3N0TmFtZShwYXRoKSB7XG4gIGNvbnN0IHBhdGhOYW1lID0gaXNQYXRoTmFtZShwYXRoKSxcbiAgICAgICAgcGF0aEFic29sdXRlUGF0aCA9IGlzUGF0aEFic29sdXRlUGF0aChwYXRoKSxcbiAgICAgICAgcGF0aFRvcG1vc3ROYW1lID0gKHBhdGhOYW1lICYmIHBhdGhBYnNvbHV0ZVBhdGgpO1xuXG4gIHJldHVybiBwYXRoVG9wbW9zdE5hbWU7XG59XG5cbmZ1bmN0aW9uIGlzUGF0aFJlbGF0aXZlUGF0aChwYXRoKSB7XG4gIGNvbnN0IHBhdGhSZWxhdGl2ZVBhdGggPSAhL15cXC8vLnRlc3QocGF0aCk7XG5cbiAgcmV0dXJuIHBhdGhSZWxhdGl2ZVBhdGg7XG59XG5cbmZ1bmN0aW9uIGlzUGF0aEFic29sdXRlUGF0aChwYXRoKSB7XG4gIGNvbnN0IHBhdGhBYnNvbHV0ZVBhdGggPSAvXlxcLy8udGVzdChwYXRoKTtcblxuICByZXR1cm4gcGF0aEFic29sdXRlUGF0aDtcbn1cblxuZnVuY3Rpb24gaXNUb3Btb3N0TmFtZUluQWJzb2x1dGVQYXRoKHRvcG1vc3ROYW1lLCBhYnNvbHV0ZVBhdGgpIHtcbiAgY29uc3QgcmVnRXhwID0gbmV3IFJlZ0V4cChgXiR7dG9wbW9zdE5hbWV9KD86XFxcXC8uKyk/JGApLFxuICAgICAgICB0b3Btb3N0TmFtZUluQWJzb2x1dGVQYXRoID0gcmVnRXhwLnRlc3QoYWJzb2x1dGVQYXRoKTtcblxuICByZXR1cm4gdG9wbW9zdE5hbWVJbkFic29sdXRlUGF0aFxufVxuXG5mdW5jdGlvbiBjb21iaW5lUGF0aHMocGF0aCwgcmVsYXRpdmVQYXRoKSB7XG4gIGxldCBjb21iaW5lZFBhdGggPSBudWxsO1xuXG4gIGNvbnN0IHBhdGhOYW1lcyA9IHBhdGguc3BsaXQoJy8nKSxcbiAgICAgICAgcmVsYXRpdmVQYXRoTmFtZXMgPSByZWxhdGl2ZVBhdGguc3BsaXQoJy8nKTtcblxuICBsZXQgbGFzdFBhdGhOYW1lLFxuICAgICAgZmlyc3RSZWxhdGl2ZVBhdGhOYW1lID0gZmlyc3QocmVsYXRpdmVQYXRoTmFtZXMpO1xuXG4gIGlmIChmaXJzdFJlbGF0aXZlUGF0aE5hbWUgPT09ICcuJykge1xuICAgIHJlbGF0aXZlUGF0aE5hbWVzLnNoaWZ0KCk7XG4gIH1cblxuICBmaXJzdFJlbGF0aXZlUGF0aE5hbWUgPSBmaXJzdChyZWxhdGl2ZVBhdGhOYW1lcyk7XG4gIGxhc3RQYXRoTmFtZSA9IGxhc3QocGF0aE5hbWVzKTtcblxuICB3aGlsZSAoKGZpcnN0UmVsYXRpdmVQYXRoTmFtZSA9PT0gJy4uJykgJiYgKGxhc3RQYXRoTmFtZSAhPT0gdW5kZWZpbmVkKSkge1xuICAgIHJlbGF0aXZlUGF0aE5hbWVzLnNoaWZ0KCk7XG4gICAgcGF0aE5hbWVzLnBvcCgpO1xuXG4gICAgZmlyc3RSZWxhdGl2ZVBhdGhOYW1lID0gZmlyc3QocmVsYXRpdmVQYXRoTmFtZXMpO1xuICAgIGxhc3RQYXRoTmFtZSA9IGxhc3QocGF0aE5hbWVzKTtcbiAgfVxuXG4gIGlmIChsYXN0UGF0aE5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHBhdGhOYW1lcyA9IFtdLmNvbmNhdChwYXRoTmFtZXMpLmNvbmNhdChyZWxhdGl2ZVBhdGhOYW1lcyk7XG5cbiAgICBjb21iaW5lZFBhdGggPSBwYXRoTmFtZXMuam9pbignLycpO1xuICB9XG5cbiAgcmV0dXJuIGNvbWJpbmVkUGF0aDtcbn1cblxuZnVuY3Rpb24gY29uY2F0ZW5hdGVQYXRocyhwYXRoLCByZWxhdGl2ZVBhdGgpIHtcbiAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwvJC8sICcnKTsgIC8vL1xuXG4gIGNvbnN0IGNvbmNhdGVuYXRlZFBhdGggPSBgJHtwYXRofS8ke3JlbGF0aXZlUGF0aH1gO1xuXG4gIHJldHVybiBjb25jYXRlbmF0ZWRQYXRoO1xufVxuXG5mdW5jdGlvbiBib3R0b21tb3N0TmFtZUZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IGJvdHRvbW1vc3ROYW1lID0gbnVsbDtcblxuICBjb25zdCBtYXRjaGVzID0gcGF0aC5tYXRjaCgvXi4qXFwvKFteXFwvXStcXC8/KSQvKTtcblxuICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpO1xuXG4gICAgYm90dG9tbW9zdE5hbWUgPSBzZWNvbmRNYXRjaDsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIGJvdHRvbW1vc3ROYW1lO1xufVxuXG5mdW5jdGlvbiB0b3Btb3N0RGlyZWN0b3J5UGF0aEZyb21QYXRoKHBhdGgpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IHBhdGgubWF0Y2goL14oLispXFwvW15cXC9dK1xcLz8kLyksXG4gICAgICAgIHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpLFxuICAgICAgICB0b3Btb3N0RGlyZWN0b3J5UGF0aCA9IHNlY29uZE1hdGNoOyAvLy9cblxuICByZXR1cm4gdG9wbW9zdERpcmVjdG9yeVBhdGg7XG59XG5cbmZ1bmN0aW9uIHRvcG1vc3REaXJlY3RvcnlOYW1lRnJvbVBhdGgocGF0aCkge1xuICBsZXQgdG9wbW9zdERpcmVjdG9yeU5hbWUgPSBudWxsO1xuXG4gIGNvbnN0IG1hdGNoZXMgPSBwYXRoLm1hdGNoKC9eKFteXFwvXSspXFwvLiskLyk7XG5cbiAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHtcbiAgICBjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuICAgIHRvcG1vc3REaXJlY3RvcnlOYW1lID0gc2Vjb25kTWF0Y2g7ICAvLy9cbiAgfVxuXG4gIHJldHVybiB0b3Btb3N0RGlyZWN0b3J5TmFtZTtcbn1cblxuZnVuY3Rpb24gcGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZUZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IHBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWUgPSBudWxsO1xuXG4gIGNvbnN0IG1hdGNoZXMgPSBwYXRoLm1hdGNoKC9eKC4qKVxcL1teXFwvXStcXC8/JC8pO1xuXG4gIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICBwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lID0gc2Vjb25kTWF0Y2g7IC8vL1xuICB9XG5cbiAgcmV0dXJuIHBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWU7XG59XG5cbmZ1bmN0aW9uIHBhdGhXaXRob3V0VG9wbW9zdERpcmVjdG9yeU5hbWVGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBwYXRoV2l0aG91dFRvcG1vc3REaXJlY3RvcnlOYW1lID0gbnVsbDtcblxuICBjb25zdCBtYXRjaGVzID0gcGF0aC5tYXRjaCgvXlteXFwvXStcXC8oLispJC8pO1xuXG4gIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICBwYXRoV2l0aG91dFRvcG1vc3REaXJlY3RvcnlOYW1lID0gc2Vjb25kTWF0Y2g7XG4gIH1cblxuICByZXR1cm4gcGF0aFdpdGhvdXRUb3Btb3N0RGlyZWN0b3J5TmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzUGF0aE5hbWUsXG4gIGlzUGF0aFRvcG1vc3ROYW1lLFxuICBpc1BhdGhSZWxhdGl2ZVBhdGgsXG4gIGlzUGF0aEFic29sdXRlUGF0aCxcbiAgaXNUb3Btb3N0TmFtZUluQWJzb2x1dGVQYXRoLFxuICBjb21iaW5lUGF0aHMsXG4gIGNvbmNhdGVuYXRlUGF0aHMsXG4gIGJvdHRvbW1vc3ROYW1lRnJvbVBhdGgsXG4gIHRvcG1vc3REaXJlY3RvcnlQYXRoRnJvbVBhdGgsXG4gIHRvcG1vc3REaXJlY3RvcnlOYW1lRnJvbVBhdGgsXG4gIHBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWVGcm9tUGF0aCxcbiAgcGF0aFdpdGhvdXRUb3Btb3N0RGlyZWN0b3J5TmFtZUZyb21QYXRoXG59O1xuIl19