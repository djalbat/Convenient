'use strict';

var arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    last = arrayUtilities.last;

function isPathName(path) {
  path = path.replace(/^\//, '').replace(/\/$/, ''); ///

  var pathName = /\//.test(path) === false;
  return pathName;
}

function isPathTopmostName(path) {
  var pathName = isPathName(path),
      pathAbsolutePath = isPathAbsolutePath(path),
      pathTopmostName = pathName && pathAbsolutePath;
  return pathTopmostName;
}

function isPathRelativePath(path) {
  var pathRelativePath = !/^\//.test(path);
  return pathRelativePath;
}

function isPathAbsolutePath(path) {
  var pathAbsolutePath = /^\//.test(path);
  return pathAbsolutePath;
}

function isTopmostNameInAbsolutePath(topmostName, absolutePath) {
  var regExp = new RegExp("^".concat(topmostName, "(?:\\/.+)?$")),
      topmostNameInAbsolutePath = regExp.test(absolutePath);
  return topmostNameInAbsolutePath;
}

function combinePaths(path, relativePath) {
  var combinedPath = null;
  var pathNames = path.split('/'),
      relativePathNames = relativePath.split('/');
  var lastPathName,
      firstRelativePathName = first(relativePathNames);

  if (firstRelativePathName === '.') {
    relativePathNames.shift();
  }

  firstRelativePathName = first(relativePathNames);
  lastPathName = last(pathNames);

  while (firstRelativePathName === '..' && lastPathName !== undefined) {
    relativePathNames.shift();
    pathNames.pop();
    firstRelativePathName = first(relativePathNames);
    lastPathName = last(pathNames);
  }

  if (lastPathName !== undefined) {
    var combinedPathNames = [].concat(pathNames).concat(relativePathNames);
    combinedPath = combinedPathNames.join('/');
  }

  return combinedPath;
}

function concatenatePaths(path, relativePath) {
  path = path.replace(/\/$/, ''); ///

  var concatenatedPath = "".concat(path, "/").concat(relativePath);
  return concatenatedPath;
}

function bottommostNameFromPath(path) {
  var bottommostName = null;
  var matches = path.match(/^.*\/([^\/]+\/?)$/);

  if (matches !== null) {
    var secondMatch = second(matches);
    bottommostName = secondMatch; ///
  }

  return bottommostName;
}

function topmostDirectoryPathFromPath(path) {
  var matches = path.match(/^(.+)\/[^\/]+\/?$/),
      secondMatch = second(matches),
      topmostDirectoryPath = secondMatch; ///

  return topmostDirectoryPath;
}

function topmostDirectoryNameFromPath(path) {
  var topmostDirectoryName = null;
  var matches = path.match(/^([^\/]+)\/.+$/);

  if (matches !== null) {
    var secondMatch = second(matches);
    topmostDirectoryName = secondMatch; ///
  }

  return topmostDirectoryName;
}

function pathWithoutBottommostNameFromPath(path) {
  var pathWithoutBottommostName = null;
  var matches = path.match(/^(.*)\/[^\/]+\/?$/);

  if (matches !== null) {
    var secondMatch = second(matches);
    pathWithoutBottommostName = secondMatch; ///
  }

  return pathWithoutBottommostName;
}

function pathWithoutTopmostDirectoryNameFromPath(path) {
  var pathWithoutTopmostDirectoryName = null;
  var matches = path.match(/^[^\/]+\/(.+)$/);

  if (matches !== null) {
    var secondMatch = second(matches);
    pathWithoutTopmostDirectoryName = secondMatch;
  }

  return pathWithoutTopmostDirectoryName;
}

module.exports = {
  isPathName: isPathName,
  isPathTopmostName: isPathTopmostName,
  isPathRelativePath: isPathRelativePath,
  isPathAbsolutePath: isPathAbsolutePath,
  isTopmostNameInAbsolutePath: isTopmostNameInAbsolutePath,
  combinePaths: combinePaths,
  concatenatePaths: concatenatePaths,
  bottommostNameFromPath: bottommostNameFromPath,
  topmostDirectoryPathFromPath: topmostDirectoryPathFromPath,
  topmostDirectoryNameFromPath: topmostDirectoryNameFromPath,
  pathWithoutBottommostNameFromPath: pathWithoutBottommostNameFromPath,
  pathWithoutTopmostDirectoryNameFromPath: pathWithoutTopmostDirectoryNameFromPath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhdGguanMiXSwibmFtZXMiOlsiYXJyYXlVdGlsaXRpZXMiLCJyZXF1aXJlIiwiZmlyc3QiLCJzZWNvbmQiLCJsYXN0IiwiaXNQYXRoTmFtZSIsInBhdGgiLCJyZXBsYWNlIiwicGF0aE5hbWUiLCJ0ZXN0IiwiaXNQYXRoVG9wbW9zdE5hbWUiLCJwYXRoQWJzb2x1dGVQYXRoIiwiaXNQYXRoQWJzb2x1dGVQYXRoIiwicGF0aFRvcG1vc3ROYW1lIiwiaXNQYXRoUmVsYXRpdmVQYXRoIiwicGF0aFJlbGF0aXZlUGF0aCIsImlzVG9wbW9zdE5hbWVJbkFic29sdXRlUGF0aCIsInRvcG1vc3ROYW1lIiwiYWJzb2x1dGVQYXRoIiwicmVnRXhwIiwiUmVnRXhwIiwidG9wbW9zdE5hbWVJbkFic29sdXRlUGF0aCIsImNvbWJpbmVQYXRocyIsInJlbGF0aXZlUGF0aCIsImNvbWJpbmVkUGF0aCIsInBhdGhOYW1lcyIsInNwbGl0IiwicmVsYXRpdmVQYXRoTmFtZXMiLCJsYXN0UGF0aE5hbWUiLCJmaXJzdFJlbGF0aXZlUGF0aE5hbWUiLCJzaGlmdCIsInVuZGVmaW5lZCIsInBvcCIsImNvbWJpbmVkUGF0aE5hbWVzIiwiY29uY2F0Iiwiam9pbiIsImNvbmNhdGVuYXRlUGF0aHMiLCJjb25jYXRlbmF0ZWRQYXRoIiwiYm90dG9tbW9zdE5hbWVGcm9tUGF0aCIsImJvdHRvbW1vc3ROYW1lIiwibWF0Y2hlcyIsIm1hdGNoIiwic2Vjb25kTWF0Y2giLCJ0b3Btb3N0RGlyZWN0b3J5UGF0aEZyb21QYXRoIiwidG9wbW9zdERpcmVjdG9yeVBhdGgiLCJ0b3Btb3N0RGlyZWN0b3J5TmFtZUZyb21QYXRoIiwidG9wbW9zdERpcmVjdG9yeU5hbWUiLCJwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lRnJvbVBhdGgiLCJwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lIiwicGF0aFdpdGhvdXRUb3Btb3N0RGlyZWN0b3J5TmFtZUZyb21QYXRoIiwicGF0aFdpdGhvdXRUb3Btb3N0RGly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QkFQZTtBQVFmRSxFQUFBQSxzQkFBc0IsRUFBdEJBLHNCQVJlO0FBU2ZLLEVBQUFBLDRCQUE0QixFQUE1QkEsNEJBVGU7QUFVZkUsRUFBQUEsNEJBQTRCLEVBQTVCQSw0QkFWZTtBQVdmRSxFQUFBQSxpQ0FBaUMsRUFBakNBLGlDQVhlO0FBWWZFLEVBQUFBLHVDQUF1QyxFQUF2Q0E7QUFaZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBmaXJzdCwgc2Vjb25kLCBsYXN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuZnVuY3Rpb24gaXNQYXRoTmFtZShwYXRoKSB7XG4gIHBhdGggPSBwYXRoLnJlcGxhY2UoL15cXC8vLCcnKS5yZXBsYWNlKC9cXC8kLywgJycpOyAvLy9cblxuICBjb25zdCBwYXRoTmFtZSA9ICgvXFwvLy50ZXN0KHBhdGgpID09PSBmYWxzZSk7XG5cbiAgcmV0dXJuIHBhdGhOYW1lO1xufVxuXG5mdW5jdGlvbiBpc1BhdGhUb3Btb3N0TmFtZShwYXRoKSB7XG4gIGNvbnN0IHBhdGhOYW1lID0gaXNQYXRoTmFtZShwYXRoKSxcbiAgICAgICAgcGF0aEFic29sdXRlUGF0aCA9IGlzUGF0aEFic29sdXRlUGF0aChwYXRoKSxcbiAgICAgICAgcGF0aFRvcG1vc3ROYW1lID0gKHBhdGhOYW1lICYmIHBhdGhBYnNvbHV0ZVBhdGgpO1xuXG4gIHJldHVybiBwYXRoVG9wbW9zdE5hbWU7XG59XG5cbmZ1bmN0aW9uIGlzUGF0aFJlbGF0aXZlUGF0aChwYXRoKSB7XG4gIGNvbnN0IHBhdGhSZWxhdGl2ZVBhdGggPSAhL15cXC8vLnRlc3QocGF0aCk7XG5cbiAgcmV0dXJuIHBhdGhSZWxhdGl2ZVBhdGg7XG59XG5cbmZ1bmN0aW9uIGlzUGF0aEFic29sdXRlUGF0aChwYXRoKSB7XG4gIGNvbnN0IHBhdGhBYnNvbHV0ZVBhdGggPSAvXlxcLy8udGVzdChwYXRoKTtcblxuICByZXR1cm4gcGF0aEFic29sdXRlUGF0aDtcbn1cblxuZnVuY3Rpb24gaXNUb3Btb3N0TmFtZUluQWJzb2x1dGVQYXRoKHRvcG1vc3ROYW1lLCBhYnNvbHV0ZVBhdGgpIHtcbiAgY29uc3QgcmVnRXhwID0gbmV3IFJlZ0V4cChgXiR7dG9wbW9zdE5hbWV9KD86XFxcXC8uKyk/JGApLFxuICAgICAgICB0b3Btb3N0TmFtZUluQWJzb2x1dGVQYXRoID0gcmVnRXhwLnRlc3QoYWJzb2x1dGVQYXRoKTtcblxuICByZXR1cm4gdG9wbW9zdE5hbWVJbkFic29sdXRlUGF0aFxufVxuXG5mdW5jdGlvbiBjb21iaW5lUGF0aHMocGF0aCwgcmVsYXRpdmVQYXRoKSB7XG4gIGxldCBjb21iaW5lZFBhdGggPSBudWxsO1xuXG4gIGNvbnN0IHBhdGhOYW1lcyA9IHBhdGguc3BsaXQoJy8nKSxcbiAgICAgICAgcmVsYXRpdmVQYXRoTmFtZXMgPSByZWxhdGl2ZVBhdGguc3BsaXQoJy8nKTtcblxuICBsZXQgbGFzdFBhdGhOYW1lLFxuICAgICAgZmlyc3RSZWxhdGl2ZVBhdGhOYW1lID0gZmlyc3QocmVsYXRpdmVQYXRoTmFtZXMpO1xuXG4gIGlmIChmaXJzdFJlbGF0aXZlUGF0aE5hbWUgPT09ICcuJykge1xuICAgIHJlbGF0aXZlUGF0aE5hbWVzLnNoaWZ0KCk7XG4gIH1cblxuICBmaXJzdFJlbGF0aXZlUGF0aE5hbWUgPSBmaXJzdChyZWxhdGl2ZVBhdGhOYW1lcyk7XG4gIGxhc3RQYXRoTmFtZSA9IGxhc3QocGF0aE5hbWVzKTtcblxuICB3aGlsZSAoKGZpcnN0UmVsYXRpdmVQYXRoTmFtZSA9PT0gJy4uJykgJiYgKGxhc3RQYXRoTmFtZSAhPT0gdW5kZWZpbmVkKSkge1xuICAgIHJlbGF0aXZlUGF0aE5hbWVzLnNoaWZ0KCk7XG4gICAgcGF0aE5hbWVzLnBvcCgpO1xuXG4gICAgZmlyc3RSZWxhdGl2ZVBhdGhOYW1lID0gZmlyc3QocmVsYXRpdmVQYXRoTmFtZXMpO1xuICAgIGxhc3RQYXRoTmFtZSA9IGxhc3QocGF0aE5hbWVzKTtcbiAgfVxuXG4gIGlmIChsYXN0UGF0aE5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGNvbWJpbmVkUGF0aE5hbWVzID0gW10uY29uY2F0KHBhdGhOYW1lcykuY29uY2F0KHJlbGF0aXZlUGF0aE5hbWVzKTtcblxuICAgIGNvbWJpbmVkUGF0aCA9IGNvbWJpbmVkUGF0aE5hbWVzLmpvaW4oJy8nKTtcbiAgfVxuXG4gIHJldHVybiBjb21iaW5lZFBhdGg7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdGVuYXRlUGF0aHMocGF0aCwgcmVsYXRpdmVQYXRoKSB7XG4gIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcLyQvLCAnJyk7ICAvLy9cblxuICBjb25zdCBjb25jYXRlbmF0ZWRQYXRoID0gYCR7cGF0aH0vJHtyZWxhdGl2ZVBhdGh9YDtcblxuICByZXR1cm4gY29uY2F0ZW5hdGVkUGF0aDtcbn1cblxuZnVuY3Rpb24gYm90dG9tbW9zdE5hbWVGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBib3R0b21tb3N0TmFtZSA9IG51bGw7XG5cbiAgY29uc3QgbWF0Y2hlcyA9IHBhdGgubWF0Y2goL14uKlxcLyhbXlxcL10rXFwvPykkLyk7XG5cbiAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHtcbiAgICBjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuICAgIGJvdHRvbW1vc3ROYW1lID0gc2Vjb25kTWF0Y2g7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBib3R0b21tb3N0TmFtZTtcbn1cblxuZnVuY3Rpb24gdG9wbW9zdERpcmVjdG9yeVBhdGhGcm9tUGF0aChwYXRoKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBwYXRoLm1hdGNoKC9eKC4rKVxcL1teXFwvXStcXC8/JC8pLFxuICAgICAgICBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKSxcbiAgICAgICAgdG9wbW9zdERpcmVjdG9yeVBhdGggPSBzZWNvbmRNYXRjaDsgLy8vXG5cbiAgcmV0dXJuIHRvcG1vc3REaXJlY3RvcnlQYXRoO1xufVxuXG5mdW5jdGlvbiB0b3Btb3N0RGlyZWN0b3J5TmFtZUZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IHRvcG1vc3REaXJlY3RvcnlOYW1lID0gbnVsbDtcblxuICBjb25zdCBtYXRjaGVzID0gcGF0aC5tYXRjaCgvXihbXlxcL10rKVxcLy4rJC8pO1xuXG4gIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICB0b3Btb3N0RGlyZWN0b3J5TmFtZSA9IHNlY29uZE1hdGNoOyAgLy8vXG4gIH1cblxuICByZXR1cm4gdG9wbW9zdERpcmVjdG9yeU5hbWU7XG59XG5cbmZ1bmN0aW9uIHBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWVGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lID0gbnVsbDtcblxuICBjb25zdCBtYXRjaGVzID0gcGF0aC5tYXRjaCgvXiguKilcXC9bXlxcL10rXFwvPyQvKTtcblxuICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpO1xuXG4gICAgcGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZSA9IHNlY29uZE1hdGNoOyAvLy9cbiAgfVxuXG4gIHJldHVybiBwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lO1xufVxuXG5mdW5jdGlvbiBwYXRoV2l0aG91dFRvcG1vc3REaXJlY3RvcnlOYW1lRnJvbVBhdGgocGF0aCkge1xuICBsZXQgcGF0aFdpdGhvdXRUb3Btb3N0RGlyZWN0b3J5TmFtZSA9IG51bGw7XG5cbiAgY29uc3QgbWF0Y2hlcyA9IHBhdGgubWF0Y2goL15bXlxcL10rXFwvKC4rKSQvKTtcblxuICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpO1xuXG4gICAgcGF0aFdpdGhvdXRUb3Btb3N0RGlyZWN0b3J5TmFtZSA9IHNlY29uZE1hdGNoO1xuICB9XG5cbiAgcmV0dXJuIHBhdGhXaXRob3V0VG9wbW9zdERpcmVjdG9yeU5hbWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1BhdGhOYW1lLFxuICBpc1BhdGhUb3Btb3N0TmFtZSxcbiAgaXNQYXRoUmVsYXRpdmVQYXRoLFxuICBpc1BhdGhBYnNvbHV0ZVBhdGgsXG4gIGlzVG9wbW9zdE5hbWVJbkFic29sdXRlUGF0aCxcbiAgY29tYmluZVBhdGhzLFxuICBjb25jYXRlbmF0ZVBhdGhzLFxuICBib3R0b21tb3N0TmFtZUZyb21QYXRoLFxuICB0b3Btb3N0RGlyZWN0b3J5UGF0aEZyb21QYXRoLFxuICB0b3Btb3N0RGlyZWN0b3J5TmFtZUZyb21QYXRoLFxuICBwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lRnJvbVBhdGgsXG4gIHBhdGhXaXRob3V0VG9wbW9zdERpcmVjdG9yeU5hbWVGcm9tUGF0aFxufTtcbiJdfQ==