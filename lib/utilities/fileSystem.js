'use strict';

var fs = require('fs');

function checkEntryExists(absolutePath) {
  var entryExists = fs.existsSync(absolutePath);

  return entryExists;
}

function checkFileExists(absoluteFilePath) {
  var fileExists = false;

  var absolutePath = absoluteFilePath,
      ///
  entryExists = checkEntryExists(absolutePath);

  if (entryExists) {
    var entryFile = isEntryFile(absolutePath);

    if (entryFile) {
      fileExists = true;
    }
  }

  return fileExists;
}

function checkDirectoryExists(absoluteDirectoryPath) {
  var directoryExists = false;

  var absolutePath = absoluteDirectoryPath,
      ///
  entryExists = checkEntryExists(absolutePath);

  if (entryExists) {
    var entryDirectory = isEntryDirectory(absolutePath);

    if (entryDirectory) {
      directoryExists = true;
    }
  }

  return directoryExists;
}

function isEntryFile(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory(),
      entryFile = !entryDirectory;

  return entryFile;
}

function isEntryDirectory(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory();

  return entryDirectory;
}

function isDirectoryEmpty(absoluteDirectoryPath) {
  var subEntryNames = readDirectory(absoluteDirectoryPath),
      subEntryNamesLength = subEntryNames.length,
      directoryEmpty = subEntryNamesLength === 0;

  return directoryEmpty;
}

function readDirectory(absoluteDirectoryPath) {
  var subEntryNames = fs.readdirSync(absoluteDirectoryPath);

  return subEntryNames;
}

function readFile(absoluteFilePath) {
  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';

  var options = {
    encoding: encoding
  },
      content = fs.readFileSync(absoluteFilePath, options);

  return content;
}

function writeFile(absoluteFilePath, content) {
  fs.writeFileSync(absoluteFilePath, content);
}

function appendToFile(absoluteFilePath, content) {
  fs.appendFileSync(absoluteFilePath, content);
}

function renameFile(oldAbsoluteFilePath, newAbsoluteFilePath) {
  fs.renameSync(oldAbsoluteFilePath, newAbsoluteFilePath);
}

function getStats(absoluteFilePath) {
  return fs.statSync(absoluteFilePath);
}

module.exports = {
  checkEntryExists: checkEntryExists,
  checkFileExists: checkFileExists,
  checkDirectoryExists: checkDirectoryExists,
  isEntryFile: isEntryFile,
  isEntryDirectory: isEntryDirectory,
  isDirectoryEmpty: isDirectoryEmpty,
  readDirectory: readDirectory,
  readFile: readFile,
  writeFile: writeFile,
  appendToFile: appendToFile,
  renameFile: renameFile,
  getStats: getStats
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmlsZVN5c3RlbS5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJjaGVja0VudHJ5RXhpc3RzIiwiYWJzb2x1dGVQYXRoIiwiZW50cnlFeGlzdHMiLCJleGlzdHNTeW5jIiwiY2hlY2tGaWxlRXhpc3RzIiwiYWJzb2x1dGVGaWxlUGF0aCIsImZpbGVFeGlzdHMiLCJlbnRyeUZpbGUiLCJpc0VudHJ5RmlsZSIsImNoZWNrRGlyZWN0b3J5RXhpc3RzIiwiYWJzb2x1dGVEaXJlY3RvcnlQYXRoIiwiZGlyZWN0b3J5RXhpc3RzIiwiZW50cnlEaXJlY3RvcnkiLCJpc0VudHJ5RGlyZWN0b3J5Iiwic3RhdCIsInN0YXRTeW5jIiwiaXNEaXJlY3RvcnkiLCJpc0RpcmVjdG9yeUVtcHR5Iiwic3ViRW50cnlOYW1lcyIsInJlYWREaXJlY3RvcnkiLCJzdWJFbnRyeU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwiZGlyZWN0b3J5RW1wdHkiLCJyZWFkZGlyU3luYyIsInJlYWRGaWxlIiwiZW5jb2RpbmciLCJvcHRpb25zIiwiY29udGVudCIsInJlYWRGaWxlU3luYyIsIndyaXRlRmlsZSIsIndyaXRlRmlsZVN5bmMiLCJhcHBlbmRUb0ZpbGUiLCJhcHBlbmRGaWxlU3luYyIsInJlbmFtZUZpbGUiLCJvbGRBYnNvbHV0ZUZpbGVQYXRoIiwibmV3QWJzb2x1dGVGaWxlUGF0aCIsInJlbmFtZVN5bmMiLCJnZXRTdGF0cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYOztBQUVBLFNBQVNDLGdCQUFULENBQTBCQyxZQUExQixFQUF3QztBQUN0QyxNQUFNQyxjQUFjSixHQUFHSyxVQUFILENBQWNGLFlBQWQsQ0FBcEI7O0FBRUEsU0FBT0MsV0FBUDtBQUNEOztBQUVELFNBQVNFLGVBQVQsQ0FBeUJDLGdCQUF6QixFQUEyQztBQUN6QyxNQUFJQyxhQUFhLEtBQWpC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Zkk7QUFaZSxDQUFqQiIsImZpbGUiOiJmaWxlU3lzdGVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbmZ1bmN0aW9uIGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVQYXRoKSB7XG4gIGNvbnN0IGVudHJ5RXhpc3RzID0gZnMuZXhpc3RzU3luYyhhYnNvbHV0ZVBhdGgpO1xuXG4gIHJldHVybiBlbnRyeUV4aXN0cztcbn1cblxuZnVuY3Rpb24gY2hlY2tGaWxlRXhpc3RzKGFic29sdXRlRmlsZVBhdGgpIHtcbiAgbGV0IGZpbGVFeGlzdHMgPSBmYWxzZTtcbiAgXG4gIGNvbnN0IGFic29sdXRlUGF0aCA9IGFic29sdXRlRmlsZVBhdGgsIC8vL1xuICAgICAgICBlbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVQYXRoKTtcbiAgXG4gIGlmIChlbnRyeUV4aXN0cykge1xuICAgIGNvbnN0IGVudHJ5RmlsZSA9IGlzRW50cnlGaWxlKGFic29sdXRlUGF0aCk7XG4gICAgXG4gICAgaWYgKGVudHJ5RmlsZSkge1xuICAgICAgZmlsZUV4aXN0cyA9IHRydWU7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gZmlsZUV4aXN0cztcbn1cblxuZnVuY3Rpb24gY2hlY2tEaXJlY3RvcnlFeGlzdHMoYWJzb2x1dGVEaXJlY3RvcnlQYXRoKSB7XG4gIGxldCBkaXJlY3RvcnlFeGlzdHMgPSBmYWxzZTtcblxuICBjb25zdCBhYnNvbHV0ZVBhdGggPSBhYnNvbHV0ZURpcmVjdG9yeVBhdGgsIC8vL1xuICAgICAgICBlbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVQYXRoKTtcblxuICBpZiAoZW50cnlFeGlzdHMpIHtcbiAgICBjb25zdCBlbnRyeURpcmVjdG9yeSA9IGlzRW50cnlEaXJlY3RvcnkoYWJzb2x1dGVQYXRoKTtcblxuICAgIGlmIChlbnRyeURpcmVjdG9yeSkge1xuICAgICAgZGlyZWN0b3J5RXhpc3RzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGlyZWN0b3J5RXhpc3RzO1xufVxuXG5mdW5jdGlvbiBpc0VudHJ5RmlsZShhYnNvbHV0ZVBhdGgpIHtcbiAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKGFic29sdXRlUGF0aCksXG4gICAgICAgIGVudHJ5RGlyZWN0b3J5ID0gc3RhdC5pc0RpcmVjdG9yeSgpLFxuICAgICAgICBlbnRyeUZpbGUgPSAhZW50cnlEaXJlY3Rvcnk7XG5cbiAgcmV0dXJuIGVudHJ5RmlsZTtcbn1cblxuZnVuY3Rpb24gaXNFbnRyeURpcmVjdG9yeShhYnNvbHV0ZVBhdGgpIHtcbiAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKGFic29sdXRlUGF0aCksXG4gICAgICAgIGVudHJ5RGlyZWN0b3J5ID0gc3RhdC5pc0RpcmVjdG9yeSgpO1xuXG4gIHJldHVybiBlbnRyeURpcmVjdG9yeTtcbn1cblxuZnVuY3Rpb24gaXNEaXJlY3RvcnlFbXB0eShhYnNvbHV0ZURpcmVjdG9yeVBhdGgpIHtcbiAgY29uc3Qgc3ViRW50cnlOYW1lcyA9IHJlYWREaXJlY3RvcnkoYWJzb2x1dGVEaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgc3ViRW50cnlOYW1lc0xlbmd0aCA9IHN1YkVudHJ5TmFtZXMubGVuZ3RoLFxuICAgICAgICBkaXJlY3RvcnlFbXB0eSA9IChzdWJFbnRyeU5hbWVzTGVuZ3RoID09PSAwKTtcblxuICByZXR1cm4gZGlyZWN0b3J5RW1wdHk7XG59XG5cbmZ1bmN0aW9uIHJlYWREaXJlY3RvcnkoYWJzb2x1dGVEaXJlY3RvcnlQYXRoKSB7XG4gIGNvbnN0IHN1YkVudHJ5TmFtZXMgPSBmcy5yZWFkZGlyU3luYyhhYnNvbHV0ZURpcmVjdG9yeVBhdGgpO1xuXG4gIHJldHVybiBzdWJFbnRyeU5hbWVzO1xufVxuXG5mdW5jdGlvbiByZWFkRmlsZShhYnNvbHV0ZUZpbGVQYXRoLCBlbmNvZGluZyA9ICd1dGY4Jykge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIGVuY29kaW5nXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoYWJzb2x1dGVGaWxlUGF0aCwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRmlsZShhYnNvbHV0ZUZpbGVQYXRoLCBjb250ZW50KSB7XG4gIGZzLndyaXRlRmlsZVN5bmMoYWJzb2x1dGVGaWxlUGF0aCwgY29udGVudCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZFRvRmlsZShhYnNvbHV0ZUZpbGVQYXRoLCBjb250ZW50KSB7XG4gIGZzLmFwcGVuZEZpbGVTeW5jKGFic29sdXRlRmlsZVBhdGgsIGNvbnRlbnQpO1xufVxuXG5mdW5jdGlvbiByZW5hbWVGaWxlKG9sZEFic29sdXRlRmlsZVBhdGgsIG5ld0Fic29sdXRlRmlsZVBhdGgpIHtcbiAgZnMucmVuYW1lU3luYyhvbGRBYnNvbHV0ZUZpbGVQYXRoLCBuZXdBYnNvbHV0ZUZpbGVQYXRoKTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RhdHMoYWJzb2x1dGVGaWxlUGF0aCkge1xuICByZXR1cm4gZnMuc3RhdFN5bmMoYWJzb2x1dGVGaWxlUGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjaGVja0VudHJ5RXhpc3RzLFxuICBjaGVja0ZpbGVFeGlzdHMsXG4gIGNoZWNrRGlyZWN0b3J5RXhpc3RzLFxuICBpc0VudHJ5RmlsZSxcbiAgaXNFbnRyeURpcmVjdG9yeSxcbiAgaXNEaXJlY3RvcnlFbXB0eSxcbiAgcmVhZERpcmVjdG9yeSxcbiAgcmVhZEZpbGUsXG4gIHdyaXRlRmlsZSxcbiAgYXBwZW5kVG9GaWxlLFxuICByZW5hbWVGaWxlLFxuICBnZXRTdGF0c1xufTtcbiJdfQ==