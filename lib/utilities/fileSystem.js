'use strict';

var fs = require('fs');

function checkEntryExists(entryPath) {
  var entryExists = fs.existsSync(entryPath);

  return entryExists;
}

function checkFileExists(filePath) {
  var fileExists = false;

  var entryPath = filePath,
      ///
  entryExists = checkEntryExists(entryPath);

  if (entryExists) {
    var entryFile = isEntryFile(entryPath);

    if (entryFile) {
      fileExists = true;
    }
  }

  return fileExists;
}

function checkDirectoryExists(directoryPath) {
  var directoryExists = false;

  var entryPath = directoryPath,
      ///
  entryExists = checkEntryExists(entryPath);

  if (entryExists) {
    var entryDirectory = isEntryDirectory(entryPath);

    if (entryDirectory) {
      directoryExists = true;
    }
  }

  return directoryExists;
}

function isEntryFile(entryPath) {
  var stat = fs.statSync(entryPath),
      entryDirectory = stat.isDirectory(),
      entryFile = !entryDirectory;

  return entryFile;
}

function isEntryDirectory(entryPath) {
  var stat = fs.statSync(entryPath),
      entryDirectory = stat.isDirectory();

  return entryDirectory;
}

function isDirectoryEmpty(directoryPath) {
  var subEntryNames = readDirectory(directoryPath),
      subEntryNamesLength = subEntryNames.length,
      directoryEmpty = subEntryNamesLength === 0;

  return directoryEmpty;
}

function readDirectory(directoryPath) {
  var subEntryNames = fs.readdirSync(directoryPath);

  return subEntryNames;
}

function readFile(filePath) {
  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';

  var options = {
    encoding: encoding
  },
      content = fs.readFileSync(filePath, options);

  return content;
}

function writeFile(filePath, content) {
  fs.writeFileSync(filePath, content);
}

function appendToFile(filePath, content) {
  fs.appendFileSync(filePath, content);
}

function createDirectory(directoryPath) {
  var recursive = true,
      options = {
    recursive: recursive
  };

  fs.mkdirSync(directoryPath, options);
}

function renameFile(oldFilePath, newFilePath) {
  fs.renameSync(oldFilePath, newFilePath);
}

function getStats(filePath) {
  return fs.statSync(filePath);
}

module.exports = {
  checkEntryExists: checkEntryExists,
  checkFileExists: checkFileExists,
  checkDirectoryExists: checkDirectoryExists,
  isEntryFile: isEntryFile,
  isEntryDirectory: isEntryDirectory,
  isDirectoryEmpty: isDirectoryEmpty,
  readDirectory: readDirectory,
  readFile: readFile,
  writeFile: writeFile,
  appendToFile: appendToFile,
  createDirectory: createDirectory,
  renameFile: renameFile,
  getStats: getStats
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmlsZVN5c3RlbS5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJjaGVja0VudHJ5RXhpc3RzIiwiZW50cnlQYXRoIiwiZW50cnlFeGlzdHMiLCJleGlzdHNTeW5jIiwiY2hlY2tGaWxlRXhpc3RzIiwiZmlsZVBhdGgiLCJmaWxlRXhpc3RzIiwiZW50cnlGaWxlIiwiaXNFbnRyeUZpbGUiLCJjaGVja0RpcmVjdG9yeUV4aXN0cyIsImRpcmVjdG9yeVBhdGgiLCJkaXJlY3RvcnlFeGlzdHMiLCJlbnRyeURpcmVjdG9yeSIsImlzRW50cnlEaXJlY3RvcnkiLCJzdGF0Iiwic3RhdFN5bmMiLCJpc0RpcmVjdG9yeSIsImlzRGlyZWN0b3J5RW1wdHkiLCJzdWJFbnRyeU5hbWVzIiwicmVhZERpcmVjdG9yeSIsInN1YkVudHJ5TmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJkaXJlY3RvcnlFbXB0eSIsInJlYWRkaXJTeW5jIiwicmVhZEZpbGUiLCJlbmNvZGluZyIsIm9wdGlvbnMiLCJjb250ZW50IiwicmVhZEZpbGVTeW5jIiwid3JpdGVGaWxlIiwid3JpdGVGaWxlU3luYyIsImFwcGVuZFRvRmlsZSIsImFwcGVuZEZpbGVTeW5jIiwiY3JlYXRlRGlyZWN0b3J5IiwicmVjdXJzaXZlIiwibWtkaXJTeW5jIiwicmVuYW1lRmlsZSIsIm9sZEZpbGVQYXRoIiwibmV3RmlsZVBhdGgiLCJyZW5hbWVTeW5jIiwiZ2V0U3RhdHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxLQUFLQyxRQUFRLElBQVIsQ0FBWDs7QUFFQSxTQUFTQyxnQkFBVCxDQUEwQkMsU0FBMUIsRUFBcUM7QUFDbkMsTUFBTUMsY0FBY0osR0FBR0ssVUFBSCxDQUFjRixTQUFkLENBQXBCOztBQUVBLFNBQU9DLFdBQVA7QUFDRDs7QUFFRCxTQUFTRSxlQUFULENBQXlCQyxRQUF6QixFQUFtQztBQUNqQyxNQUFJQyxhQUFh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MUMsb0NBRGU7QUFFZkksa0NBRmU7QUFHZkssNENBSGU7QUFJZkQsMEJBSmU7QUFLZkssb0NBTGU7QUFNZkksb0NBTmU7QUFPZkUsOEJBUGU7QUFRZkssb0JBUmU7QUFTZkssc0JBVGU7QUFVZkUsNEJBVmU7QUFXZkUsa0NBWGU7QUFZZkcsd0JBWmU7QUFhZkk7QUFiZSxDQUFqQiIsImZpbGUiOiJmaWxlU3lzdGVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbmZ1bmN0aW9uIGNoZWNrRW50cnlFeGlzdHMoZW50cnlQYXRoKSB7XG4gIGNvbnN0IGVudHJ5RXhpc3RzID0gZnMuZXhpc3RzU3luYyhlbnRyeVBhdGgpO1xuXG4gIHJldHVybiBlbnRyeUV4aXN0cztcbn1cblxuZnVuY3Rpb24gY2hlY2tGaWxlRXhpc3RzKGZpbGVQYXRoKSB7XG4gIGxldCBmaWxlRXhpc3RzID0gZmFsc2U7XG4gIFxuICBjb25zdCBlbnRyeVBhdGggPSBmaWxlUGF0aCwgLy8vXG4gICAgICAgIGVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhlbnRyeVBhdGgpO1xuICBcbiAgaWYgKGVudHJ5RXhpc3RzKSB7XG4gICAgY29uc3QgZW50cnlGaWxlID0gaXNFbnRyeUZpbGUoZW50cnlQYXRoKTtcbiAgICBcbiAgICBpZiAoZW50cnlGaWxlKSB7XG4gICAgICBmaWxlRXhpc3RzID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiBmaWxlRXhpc3RzO1xufVxuXG5mdW5jdGlvbiBjaGVja0RpcmVjdG9yeUV4aXN0cyhkaXJlY3RvcnlQYXRoKSB7XG4gIGxldCBkaXJlY3RvcnlFeGlzdHMgPSBmYWxzZTtcblxuICBjb25zdCBlbnRyeVBhdGggPSBkaXJlY3RvcnlQYXRoLCAvLy9cbiAgICAgICAgZW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGVudHJ5UGF0aCk7XG5cbiAgaWYgKGVudHJ5RXhpc3RzKSB7XG4gICAgY29uc3QgZW50cnlEaXJlY3RvcnkgPSBpc0VudHJ5RGlyZWN0b3J5KGVudHJ5UGF0aCk7XG5cbiAgICBpZiAoZW50cnlEaXJlY3RvcnkpIHtcbiAgICAgIGRpcmVjdG9yeUV4aXN0cyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRpcmVjdG9yeUV4aXN0cztcbn1cblxuZnVuY3Rpb24gaXNFbnRyeUZpbGUoZW50cnlQYXRoKSB7XG4gIGNvbnN0IHN0YXQgPSBmcy5zdGF0U3luYyhlbnRyeVBhdGgpLFxuICAgICAgICBlbnRyeURpcmVjdG9yeSA9IHN0YXQuaXNEaXJlY3RvcnkoKSxcbiAgICAgICAgZW50cnlGaWxlID0gIWVudHJ5RGlyZWN0b3J5O1xuXG4gIHJldHVybiBlbnRyeUZpbGU7XG59XG5cbmZ1bmN0aW9uIGlzRW50cnlEaXJlY3RvcnkoZW50cnlQYXRoKSB7XG4gIGNvbnN0IHN0YXQgPSBmcy5zdGF0U3luYyhlbnRyeVBhdGgpLFxuICAgICAgICBlbnRyeURpcmVjdG9yeSA9IHN0YXQuaXNEaXJlY3RvcnkoKTtcblxuICByZXR1cm4gZW50cnlEaXJlY3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGlzRGlyZWN0b3J5RW1wdHkoZGlyZWN0b3J5UGF0aCkge1xuICBjb25zdCBzdWJFbnRyeU5hbWVzID0gcmVhZERpcmVjdG9yeShkaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgc3ViRW50cnlOYW1lc0xlbmd0aCA9IHN1YkVudHJ5TmFtZXMubGVuZ3RoLFxuICAgICAgICBkaXJlY3RvcnlFbXB0eSA9IChzdWJFbnRyeU5hbWVzTGVuZ3RoID09PSAwKTtcblxuICByZXR1cm4gZGlyZWN0b3J5RW1wdHk7XG59XG5cbmZ1bmN0aW9uIHJlYWREaXJlY3RvcnkoZGlyZWN0b3J5UGF0aCkge1xuICBjb25zdCBzdWJFbnRyeU5hbWVzID0gZnMucmVhZGRpclN5bmMoZGlyZWN0b3J5UGF0aCk7XG5cbiAgcmV0dXJuIHN1YkVudHJ5TmFtZXM7XG59XG5cbmZ1bmN0aW9uIHJlYWRGaWxlKGZpbGVQYXRoLCBlbmNvZGluZyA9ICd1dGY4Jykge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIGVuY29kaW5nXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsIG9wdGlvbnMpO1xuXG4gIHJldHVybiBjb250ZW50O1xufVxuXG5mdW5jdGlvbiB3cml0ZUZpbGUoZmlsZVBhdGgsIGNvbnRlbnQpIHtcbiAgZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgY29udGVudCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZFRvRmlsZShmaWxlUGF0aCwgY29udGVudCkge1xuICBmcy5hcHBlbmRGaWxlU3luYyhmaWxlUGF0aCwgY29udGVudCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURpcmVjdG9yeShkaXJlY3RvcnlQYXRoKSB7XG4gIGNvbnN0IHJlY3Vyc2l2ZSA9IHRydWUsXG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgcmVjdXJzaXZlXG4gICAgICAgIH07XG5cbiAgZnMubWtkaXJTeW5jKGRpcmVjdG9yeVBhdGgsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW5hbWVGaWxlKG9sZEZpbGVQYXRoLCBuZXdGaWxlUGF0aCkge1xuICBmcy5yZW5hbWVTeW5jKG9sZEZpbGVQYXRoLCBuZXdGaWxlUGF0aCk7XG59XG5cbmZ1bmN0aW9uIGdldFN0YXRzKGZpbGVQYXRoKSB7XG4gIHJldHVybiBmcy5zdGF0U3luYyhmaWxlUGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjaGVja0VudHJ5RXhpc3RzLFxuICBjaGVja0ZpbGVFeGlzdHMsXG4gIGNoZWNrRGlyZWN0b3J5RXhpc3RzLFxuICBpc0VudHJ5RmlsZSxcbiAgaXNFbnRyeURpcmVjdG9yeSxcbiAgaXNEaXJlY3RvcnlFbXB0eSxcbiAgcmVhZERpcmVjdG9yeSxcbiAgcmVhZEZpbGUsXG4gIHdyaXRlRmlsZSxcbiAgYXBwZW5kVG9GaWxlLFxuICBjcmVhdGVEaXJlY3RvcnksXG4gIHJlbmFtZUZpbGUsXG4gIGdldFN0YXRzXG59O1xuIl19