'use strict';

var fs = require('fs');

function checkEntryExists(absolutePath) {
  var entryExists = fs.existsSync(absolutePath);

  return entryExists;
}

function checkFileExists(absoluteFilePath) {
  var fileExists = false;

  var absolutePath = absoluteFilePath,
      ///
  entryExists = checkEntryExists(absolutePath);

  if (entryExists) {
    var entryFile = isEntryFile(absolutePath);

    if (entryFile) {
      fileExists = true;
    }
  }

  return fileExists;
}

function checkDirectoryExists(absoluteDirectoryPath) {
  var directoryExists = false;

  var absolutePath = absoluteDirectoryPath,
      ///
  entryExists = checkEntryExists(absolutePath);

  if (entryExists) {
    var entryDirectory = isEntryDirectory(absolutePath);

    if (entryDirectory) {
      directoryExists = true;
    }
  }

  return directoryExists;
}

function isEntryFile(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory(),
      entryFile = !entryDirectory;

  return entryFile;
}

function isEntryDirectory(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory();

  return entryDirectory;
}

function isDirectoryEmpty(absoluteDirectoryPath) {
  var subEntryNames = readDirectory(absoluteDirectoryPath),
      subEntryNamesLength = subEntryNames.length,
      directoryEmpty = subEntryNamesLength === 0;

  return directoryEmpty;
}

function readDirectory(absoluteDirectoryPath) {
  var subEntryNames = fs.readdirSync(absoluteDirectoryPath);

  return subEntryNames;
}

function readFile(absoluteFilePath) {
  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';

  var options = {
    encoding: encoding
  },
      content = fs.readFileSync(absoluteFilePath, options);

  return content;
}

function writeFile(absoluteFilePath, content) {
  fs.writeFileSync(absoluteFilePath, content);
}

function appendToFile(absoluteFilePath, content) {
  fs.appendFileSync(absoluteFilePath, content);
}

function renameFile(oldAbsoluteFilePath, newAbsoluteFilePath) {
  fs.renameSync(oldAbsoluteFilePath, newAbsoluteFilePath);
}

function getStats(absoluteFilePath) {
  return fs.statSync(absoluteFilePath);
}

module.exports = {
  checkEntryExists: checkEntryExists,
  checkFileExists: checkFileExists,
  checkDirectoryExists: checkDirectoryExists,
  isEntryFile: isEntryFile,
  isEntryDirectory: isEntryDirectory,
  isDirectoryEmpty: isDirectoryEmpty,
  readDirectory: readDirectory,
  readFile: readFile,
  writeFile: writeFile,
  appendToFile: appendToFile,
  renameFile: renameFile,
  getStats: getStats
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmlsZVN5c3RlbS5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJjaGVja0VudHJ5RXhpc3RzIiwiYWJzb2x1dGVQYXRoIiwiZW50cnlFeGlzdHMiLCJleGlzdHNTeW5jIiwiY2hlY2tGaWxlRXhpc3RzIiwiYWJzb2x1dGVGaWxlUGF0aCIsImZpbGVFeGlzdHMiLCJlbnRyeUZpbGUiLCJpc0VudHJ5RmlsZSIsImNoZWNrRGlyZWN0b3J5RXhpc3RzIiwiYWJzb2x1dGVEaXJlY3RvcnlQYXRoIiwiZGlyZWN0b3J5RXhpc3RzIiwiZW50cnlEaXJlY3RvcnkiLCJpc0VudHJ5RGlyZWN0b3J5Iiwic3RhdCIsInN0YXRTeW5jIiwiaXNEaXJlY3RvcnkiLCJpc0RpcmVjdG9yeUVtcHR5Iiwic3ViRW50cnlOYW1lcyIsInJlYWREaXJlY3RvcnkiLCJzdWJFbnRyeU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwiZGlyZWN0b3J5RW1wdHkiLCJyZWFkZGlyU3luYyIsInJlYWRGaWxlIiwiZW5jb2RpbmciLCJvcHRpb25zIiwiY29udGVudCIsInJlYWRGaWxlU3luYyIsIndyaXRlRmlsZSIsIndyaXRlRmlsZVN5bmMiLCJhcHBlbmRUb0ZpbGUiLCJhcHBlbmRGaWxlU3luYyIsInJlbmFtZUZpbGUiLCJvbGRBYnNvbHV0ZUZpbGVQYXRoIiwibmV3QWJzb2x1dGVGaWxlUGF0aCIsInJlbmFtZVN5bmMiLCJnZXRTdGF0cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYOztBQUVBLFNBQVNDLGdCQUFULENBQTBCQyxZQUExQixFQUF3QztBQUN0QyxNQUFNQyxjQUFjSixHQUFHSyxVQUFILENBQWNGLFlBQWQsQ0FBcEI7O0FBRUEsU0FBT0MsV0FBUDtBQUNEOztBQUVELFNBQVNFLGVBQVQsQ0FBeUJDLGdCQUF6QixFQUEyQztBQUN6QyxNQUFJQyxhQUFhLEtBQWpC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Zkk7QUFaZSxDQUFqQiIsImZpbGUiOiJmaWxlU3lzdGVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbmZ1bmN0aW9uIGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVQYXRoKSB7XG4gIGNvbnN0IGVudHJ5RXhpc3RzID0gZnMuZXhpc3RzU3luYyhhYnNvbHV0ZVBhdGgpO1xuXG4gIHJldHVybiBlbnRyeUV4aXN0cztcbn1cblxuZnVuY3Rpb24gY2hlY2tGaWxlRXhpc3RzKGFic29sdXRlRmlsZVBhdGgpIHtcbiAgbGV0IGZpbGVFeGlzdHMgPSBmYWxzZTtcbiAgXG4gIGNvbnN0IGFic29sdXRlUGF0aCA9IGFic29sdXRlRmlsZVBhdGgsIC8vL1xuICAgICAgICBlbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVQYXRoKTtcbiAgXG4gIGlmIChlbnRyeUV4aXN0cykge1xuICAgIGNvbnN0IGVudHJ5RmlsZSA9IGlzRW50cnlGaWxlKGFic29sdXRlUGF0aCk7XG4gICAgXG4gICAgaWYgKGVudHJ5RmlsZSkge1xuICAgICAgZmlsZUV4aXN0cyA9IHRydWU7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gZmlsZUV4aXN0cztcbn1cblxuZnVuY3Rpb24gY2hlY2tEaXJlY3RvcnlFeGlzdHMoYWJzb2x1dGVEaXJlY3RvcnlQYXRoKSB7XG4gIGxldCBkaXJlY3RvcnlFeGlzdHMgPSBmYWxzZTtcblxuICBjb25zdCBhYnNvbHV0ZVBhdGggPSBhYnNvbHV0ZURpcmVjdG9yeVBhdGgsIC8vL1xuICAgICAgICBlbnRyeUV4aXN0cyA9IGNoZWNrRW50cnlFeGlzdHMoYWJzb2x1dGVQYXRoKTtcblxuICBpZiAoZW50cnlFeGlzdHMpIHtcbiAgICBjb25zdCBlbnRyeURpcmVjdG9yeSA9IGlzRW50cnlEaXJlY3RvcnkoYWJzb2x1dGVQYXRoKTtcblxuICAgIGlmIChlbnRyeURpcmVjdG9yeSkge1xuICAgICAgZGlyZWN0b3J5RXhpc3RzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGlyZWN0b3J5RXhpc3RzO1xufVxuXG5mdW5jdGlvbiBpc0VudHJ5RmlsZShhYnNvbHV0ZVBhdGgpIHtcbiAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKGFic29sdXRlUGF0aCksXG4gICAgICBlbnRyeURpcmVjdG9yeSA9IHN0YXQuaXNEaXJlY3RvcnkoKSxcbiAgICAgIGVudHJ5RmlsZSA9ICFlbnRyeURpcmVjdG9yeTtcblxuICByZXR1cm4gZW50cnlGaWxlO1xufVxuXG5mdW5jdGlvbiBpc0VudHJ5RGlyZWN0b3J5KGFic29sdXRlUGF0aCkge1xuICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMoYWJzb2x1dGVQYXRoKSxcbiAgICAgICAgZW50cnlEaXJlY3RvcnkgPSBzdGF0LmlzRGlyZWN0b3J5KCk7XG5cbiAgcmV0dXJuIGVudHJ5RGlyZWN0b3J5O1xufVxuXG5mdW5jdGlvbiBpc0RpcmVjdG9yeUVtcHR5KGFic29sdXRlRGlyZWN0b3J5UGF0aCkge1xuICBjb25zdCBzdWJFbnRyeU5hbWVzID0gcmVhZERpcmVjdG9yeShhYnNvbHV0ZURpcmVjdG9yeVBhdGgpLFxuICAgICAgICBzdWJFbnRyeU5hbWVzTGVuZ3RoID0gc3ViRW50cnlOYW1lcy5sZW5ndGgsXG4gICAgICAgIGRpcmVjdG9yeUVtcHR5ID0gKHN1YkVudHJ5TmFtZXNMZW5ndGggPT09IDApO1xuXG4gIHJldHVybiBkaXJlY3RvcnlFbXB0eTtcbn1cblxuZnVuY3Rpb24gcmVhZERpcmVjdG9yeShhYnNvbHV0ZURpcmVjdG9yeVBhdGgpIHtcbiAgY29uc3Qgc3ViRW50cnlOYW1lcyA9IGZzLnJlYWRkaXJTeW5jKGFic29sdXRlRGlyZWN0b3J5UGF0aCk7XG5cbiAgcmV0dXJuIHN1YkVudHJ5TmFtZXM7XG59XG5cbmZ1bmN0aW9uIHJlYWRGaWxlKGFic29sdXRlRmlsZVBhdGgsIGVuY29kaW5nID0gJ3V0ZjgnKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgZW5jb2RpbmdcbiAgICAgICAgfSxcbiAgICAgICAgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhhYnNvbHV0ZUZpbGVQYXRoLCBvcHRpb25zKTtcblxuICByZXR1cm4gY29udGVudDtcbn1cblxuZnVuY3Rpb24gd3JpdGVGaWxlKGFic29sdXRlRmlsZVBhdGgsIGNvbnRlbnQpIHtcbiAgZnMud3JpdGVGaWxlU3luYyhhYnNvbHV0ZUZpbGVQYXRoLCBjb250ZW50KTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kVG9GaWxlKGFic29sdXRlRmlsZVBhdGgsIGNvbnRlbnQpIHtcbiAgZnMuYXBwZW5kRmlsZVN5bmMoYWJzb2x1dGVGaWxlUGF0aCwgY29udGVudCk7XG59XG5cbmZ1bmN0aW9uIHJlbmFtZUZpbGUob2xkQWJzb2x1dGVGaWxlUGF0aCwgbmV3QWJzb2x1dGVGaWxlUGF0aCkge1xuICBmcy5yZW5hbWVTeW5jKG9sZEFic29sdXRlRmlsZVBhdGgsIG5ld0Fic29sdXRlRmlsZVBhdGgpO1xufVxuXG5mdW5jdGlvbiBnZXRTdGF0cyhhYnNvbHV0ZUZpbGVQYXRoKSB7XG4gIHJldHVybiBmcy5zdGF0U3luYyhhYnNvbHV0ZUZpbGVQYXRoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrRW50cnlFeGlzdHMsXG4gIGNoZWNrRmlsZUV4aXN0cyxcbiAgY2hlY2tEaXJlY3RvcnlFeGlzdHMsXG4gIGlzRW50cnlGaWxlLFxuICBpc0VudHJ5RGlyZWN0b3J5LFxuICBpc0RpcmVjdG9yeUVtcHR5LFxuICByZWFkRGlyZWN0b3J5LFxuICByZWFkRmlsZSxcbiAgd3JpdGVGaWxlLFxuICBhcHBlbmRUb0ZpbGUsXG4gIHJlbmFtZUZpbGUsXG4gIGdldFN0YXRzXG59O1xuIl19