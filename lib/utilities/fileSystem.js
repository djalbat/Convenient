"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.checkEntryExists = checkEntryExists;
exports.checkFileExists = checkFileExists;
exports.checkDirectoryExists = checkDirectoryExists;
exports.isEntryFile = isEntryFile;
exports.isEntryDirectory = isEntryDirectory;
exports.isDirectoryEmpty = isDirectoryEmpty;
exports.readDirectory = readDirectory;
exports.readFile = readFile;
exports.writeFile = writeFile;
exports.appendToFile = appendToFile;
exports.createDirectory = createDirectory;
exports.renameFile = renameFile;
exports.getStats = getStats;
exports.default = void 0;
var _fs = _interopRequireDefault(require("fs"));
var _constants = require("../constants");
var _path = require("../utilities/path");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
"use strict";
function checkEntryExists(entryPath) {
    var entryExists = _fs.default.existsSync(entryPath);
    return entryExists;
}
function checkFileExists(filePath) {
    var fileExists = false;
    var entryPath = filePath, entryExists = checkEntryExists(entryPath);
    if (entryExists) {
        var entryFile = isEntryFile(entryPath);
        if (entryFile) {
            fileExists = true;
        }
    }
    return fileExists;
}
function checkDirectoryExists(directoryPath) {
    var directoryExists = false;
    var entryPath = directoryPath, entryExists = checkEntryExists(entryPath);
    if (entryExists) {
        var entryDirectory = isEntryDirectory(entryPath);
        if (entryDirectory) {
            directoryExists = true;
        }
    }
    return directoryExists;
}
function isEntryFile(entryPath) {
    var stat = _fs.default.statSync(entryPath), entryDirectory = stat.isDirectory(), entryFile = !entryDirectory;
    return entryFile;
}
function isEntryDirectory(entryPath) {
    var stat = _fs.default.statSync(entryPath), entryDirectory = stat.isDirectory();
    return entryDirectory;
}
function isDirectoryEmpty(directoryPath) {
    var subEntryNames = readDirectory(directoryPath), subEntryNamesLength = subEntryNames.length, directoryEmpty = subEntryNamesLength === 0;
    return directoryEmpty;
}
function readDirectory(directoryPath) {
    var subEntryNames = _fs.default.readdirSync(directoryPath);
    return subEntryNames;
}
function readFile(filePath, param) {
    var encoding = param === void 0 ? _constants.UTF8_ENCODING : param;
    var options = {
        encoding: encoding
    }, content = _fs.default.readFileSync(filePath, options);
    return content;
}
function writeFile(filePath, content) {
    _fs.default.writeFileSync(filePath, content);
}
function appendToFile(filePath, content) {
    _fs.default.appendFileSync(filePath, content);
}
function createDirectory(directoryPath) {
    var directoryPathWithoutBottommostName = _path.pathWithoutBottommostNameFromPath(directoryPath);
    if (directoryPathWithoutBottommostName !== "." && directoryPathWithoutBottommostName !== null) {
        var parentDirectoryPath = directoryPathWithoutBottommostName, parentDirectoryExists = checkDirectoryExists(parentDirectoryPath);
        if (!parentDirectoryExists) {
            createDirectory(parentDirectoryPath);
        }
    }
    _fs.default.mkdirSync(directoryPath);
}
function renameFile(oldFilePath, newFilePath) {
    _fs.default.renameSync(oldFilePath, newFilePath);
}
function getStats(filePath) {
    return _fs.default.statSync(filePath);
}
var _default = {
    checkEntryExists: checkEntryExists,
    checkFileExists: checkFileExists,
    checkDirectoryExists: checkDirectoryExists,
    isEntryFile: isEntryFile,
    isEntryDirectory: isEntryDirectory,
    isDirectoryEmpty: isDirectoryEmpty,
    readDirectory: readDirectory,
    readFile: readFile,
    writeFile: writeFile,
    appendToFile: appendToFile,
    createDirectory: createDirectory,
    renameFile: renameFile,
    getStats: getStats
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmlsZVN5c3RlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuXG5pbXBvcnQgeyBVVEY4X0VOQ09ESU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgcGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZUZyb21QYXRoIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wYXRoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0VudHJ5RXhpc3RzKGVudHJ5UGF0aCkge1xuICBjb25zdCBlbnRyeUV4aXN0cyA9IGZzLmV4aXN0c1N5bmMoZW50cnlQYXRoKTtcblxuICByZXR1cm4gZW50cnlFeGlzdHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0ZpbGVFeGlzdHMoZmlsZVBhdGgpIHtcbiAgbGV0IGZpbGVFeGlzdHMgPSBmYWxzZTtcbiAgXG4gIGNvbnN0IGVudHJ5UGF0aCA9IGZpbGVQYXRoLCAvLy9cbiAgICAgICAgZW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGVudHJ5UGF0aCk7XG4gIFxuICBpZiAoZW50cnlFeGlzdHMpIHtcbiAgICBjb25zdCBlbnRyeUZpbGUgPSBpc0VudHJ5RmlsZShlbnRyeVBhdGgpO1xuICAgIFxuICAgIGlmIChlbnRyeUZpbGUpIHtcbiAgICAgIGZpbGVFeGlzdHMgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIGZpbGVFeGlzdHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0RpcmVjdG9yeUV4aXN0cyhkaXJlY3RvcnlQYXRoKSB7XG4gIGxldCBkaXJlY3RvcnlFeGlzdHMgPSBmYWxzZTtcblxuICBjb25zdCBlbnRyeVBhdGggPSBkaXJlY3RvcnlQYXRoLCAvLy9cbiAgICAgICAgZW50cnlFeGlzdHMgPSBjaGVja0VudHJ5RXhpc3RzKGVudHJ5UGF0aCk7XG5cbiAgaWYgKGVudHJ5RXhpc3RzKSB7XG4gICAgY29uc3QgZW50cnlEaXJlY3RvcnkgPSBpc0VudHJ5RGlyZWN0b3J5KGVudHJ5UGF0aCk7XG5cbiAgICBpZiAoZW50cnlEaXJlY3RvcnkpIHtcbiAgICAgIGRpcmVjdG9yeUV4aXN0cyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRpcmVjdG9yeUV4aXN0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW50cnlGaWxlKGVudHJ5UGF0aCkge1xuICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMoZW50cnlQYXRoKSxcbiAgICAgICAgZW50cnlEaXJlY3RvcnkgPSBzdGF0LmlzRGlyZWN0b3J5KCksXG4gICAgICAgIGVudHJ5RmlsZSA9ICFlbnRyeURpcmVjdG9yeTtcblxuICByZXR1cm4gZW50cnlGaWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbnRyeURpcmVjdG9yeShlbnRyeVBhdGgpIHtcbiAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKGVudHJ5UGF0aCksXG4gICAgICAgIGVudHJ5RGlyZWN0b3J5ID0gc3RhdC5pc0RpcmVjdG9yeSgpO1xuXG4gIHJldHVybiBlbnRyeURpcmVjdG9yeTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGlyZWN0b3J5RW1wdHkoZGlyZWN0b3J5UGF0aCkge1xuICBjb25zdCBzdWJFbnRyeU5hbWVzID0gcmVhZERpcmVjdG9yeShkaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgc3ViRW50cnlOYW1lc0xlbmd0aCA9IHN1YkVudHJ5TmFtZXMubGVuZ3RoLFxuICAgICAgICBkaXJlY3RvcnlFbXB0eSA9IChzdWJFbnRyeU5hbWVzTGVuZ3RoID09PSAwKTtcblxuICByZXR1cm4gZGlyZWN0b3J5RW1wdHk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkRGlyZWN0b3J5KGRpcmVjdG9yeVBhdGgpIHtcbiAgY29uc3Qgc3ViRW50cnlOYW1lcyA9IGZzLnJlYWRkaXJTeW5jKGRpcmVjdG9yeVBhdGgpO1xuXG4gIHJldHVybiBzdWJFbnRyeU5hbWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGUoZmlsZVBhdGgsIGVuY29kaW5nID0gVVRGOF9FTkNPRElORykge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIGVuY29kaW5nXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsIG9wdGlvbnMpO1xuXG4gIHJldHVybiBjb250ZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVGaWxlKGZpbGVQYXRoLCBjb250ZW50KSB7XG4gIGZzLndyaXRlRmlsZVN5bmMoZmlsZVBhdGgsIGNvbnRlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kVG9GaWxlKGZpbGVQYXRoLCBjb250ZW50KSB7XG4gIGZzLmFwcGVuZEZpbGVTeW5jKGZpbGVQYXRoLCBjb250ZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpcmVjdG9yeShkaXJlY3RvcnlQYXRoKSB7XG4gIGNvbnN0IGRpcmVjdG9yeVBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWUgPSBwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lRnJvbVBhdGgoZGlyZWN0b3J5UGF0aCk7XG5cbiAgaWYgKChkaXJlY3RvcnlQYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lICE9PSBcIi5cIikgJiYgKGRpcmVjdG9yeVBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWUgIT09IG51bGwpKSB7XG4gICAgY29uc3QgcGFyZW50RGlyZWN0b3J5UGF0aCA9IGRpcmVjdG9yeVBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWUsICAvLy9cbiAgICAgICAgICBwYXJlbnREaXJlY3RvcnlFeGlzdHMgPSBjaGVja0RpcmVjdG9yeUV4aXN0cyhwYXJlbnREaXJlY3RvcnlQYXRoKTtcblxuICAgIGlmICghcGFyZW50RGlyZWN0b3J5RXhpc3RzKSB7XG4gICAgICBjcmVhdGVEaXJlY3RvcnkocGFyZW50RGlyZWN0b3J5UGF0aCk7XG4gICAgfVxuICB9XG5cbiAgZnMubWtkaXJTeW5jKGRpcmVjdG9yeVBhdGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuYW1lRmlsZShvbGRGaWxlUGF0aCwgbmV3RmlsZVBhdGgpIHtcbiAgZnMucmVuYW1lU3luYyhvbGRGaWxlUGF0aCwgbmV3RmlsZVBhdGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdHMoZmlsZVBhdGgpIHtcbiAgcmV0dXJuIGZzLnN0YXRTeW5jKGZpbGVQYXRoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBjaGVja0VudHJ5RXhpc3RzLFxuICBjaGVja0ZpbGVFeGlzdHMsXG4gIGNoZWNrRGlyZWN0b3J5RXhpc3RzLFxuICBpc0VudHJ5RmlsZSxcbiAgaXNFbnRyeURpcmVjdG9yeSxcbiAgaXNEaXJlY3RvcnlFbXB0eSxcbiAgcmVhZERpcmVjdG9yeSxcbiAgcmVhZEZpbGUsXG4gIHdyaXRlRmlsZSxcbiAgYXBwZW5kVG9GaWxlLFxuICBjcmVhdGVEaXJlY3RvcnksXG4gIHJlbmFtZUZpbGUsXG4gIGdldFN0YXRzXG59O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7UUFPQSxnQkFBQSxHQUFBLGdCQUFBO1FBTUEsZUFBQSxHQUFBLGVBQUE7UUFpQkEsb0JBQUEsR0FBQSxvQkFBQTtRQWlCQSxXQUFBLEdBQUEsV0FBQTtRQVFBLGdCQUFBLEdBQUEsZ0JBQUE7UUFPQSxnQkFBQSxHQUFBLGdCQUFBO1FBUUEsYUFBQSxHQUFBLGFBQUE7UUFNQSxRQUFBLEdBQUEsUUFBQTtRQVNBLFNBQUEsR0FBQSxTQUFBO1FBSUEsWUFBQSxHQUFBLFlBQUE7UUFJQSxlQUFBLEdBQUEsZUFBQTtRQWVBLFVBQUEsR0FBQSxVQUFBO1FBSUEsUUFBQSxHQUFBLFFBQUE7O0lBOUdBLEdBQUE7SUFFQSxVQUFBO0lBQ0EsS0FBQTs7Ozs7O0NBTEEsVUFBQTtTQU9BLGdCQUFBLENBQUEsU0FBQTtRQUNBLFdBQUEsR0FOQSxHQUFBLFNBTUEsVUFBQSxDQUFBLFNBQUE7V0FFQSxXQUFB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