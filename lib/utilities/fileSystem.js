'use strict';

var fs = require('fs');

function entryExists(absoluteFilePath) {
  return fs.existsSync(absoluteFilePath);
}

function fileExists(absoluteFilePath) {
  return fs.existsSync(absoluteFilePath);
}

function isEntryDirectory(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory();

  return entryDirectory;
}

function isDirectoryEmpty(absoluteDirectoryPath) {
  var subEntryNames = readDirectory(absoluteDirectoryPath),
      subEntryNamesLength = subEntryNames.length,
      directoryEmpty = subEntryNamesLength === 0;

  return directoryEmpty;
}

function writeFile(absoluteFilePath, content) {
  fs.writeFileSync(absoluteFilePath, content);
}

function readFile(absoluteFilePath) {
  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';

  var options = {
    encoding: encoding
  },
      content = fs.readFileSync(absoluteFilePath, options);

  return content;
}

function readDirectory(absoluteDirectoryPath) {
  var subEntryNames = fs.readdirSync(absoluteDirectoryPath);

  return subEntryNames;
}

module.exports = {
  entryExists: entryExists,
  fileExists: fileExists,
  isEntryDirectory: isEntryDirectory,
  isDirectoryEmpty: isDirectoryEmpty,
  writeFile: writeFile,
  readFile: readFile,
  readDirectory: readDirectory
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmlsZVN5c3RlbS5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJlbnRyeUV4aXN0cyIsImFic29sdXRlRmlsZVBhdGgiLCJleGlzdHNTeW5jIiwiZmlsZUV4aXN0cyIsImlzRW50cnlEaXJlY3RvcnkiLCJhYnNvbHV0ZVBhdGgiLCJzdGF0Iiwic3RhdFN5bmMiLCJlbnRyeURpcmVjdG9yeSIsImlzRGlyZWN0b3J5IiwiaXNEaXJlY3RvcnlFbXB0eSIsImFic29sdXRlRGlyZWN0b3J5UGF0aCIsInN1YkVudHJ5TmFtZXMiLCJyZWFkRGlyZWN0b3J5Iiwic3ViRW50cnlOYW1lc0xlbmd0aCIsImxlbmd0aCIsImRpcmVjdG9yeUVtcHR5Iiwid3JpdGVGaWxlIiwiY29udGVudCIsIndyaXRlRmlsZVN5bmMiLCJyZWFkRmlsZSIsImVuY29kaW5nIiwib3B0aW9ucyIsInJlYWRGaWxlU3luYyIsInJlYWRkaXJTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsS0FBS0MsUUFBUSxJQUFSLENBQVg7O0FBRUEsU0FBU0MsV0FBVCxDQUFxQkMsZ0JBQXJCLEVBQXVDO0FBQ3JDLFNBQU9ILEdBQUdJLFVBQUgsQ0FBY0QsZ0JBQWQsQ0FBUDtBQUNEOztBQUVELFNBQVNFLFVBQVQsQ0FBb0JGLGdCQUFwQixFQUFzQztBQUNwQyxTQUFPSCxHQUFHSSxVQUFILENBQWNELGdCQUFkLENBQVA7QUFDRDs7QUFFRCxTQUFTRyxnQkFBVCxDQUEwQkMsWUFBMUIsRUFBd0M7QUFDdEMsTUFBTUMsT0FBT1IsR0FBR1MsUUFBSCxDQUFZRixZQUFaLENBQWI7QUFBQSxNQUNNRyxpQkFBaUJGLEtBQUtHLFdBQUwsRUFEdkI7O0FBR0EsU0FBT0QsY0FBUDtBQUNEOztBQUVELFNBQVNFLGdCQUFULENBQTBCQyxxQkFBMUIsRUFBaUQ7QUFDL0MsTUFBTUMsZ0JBQWdCQyxjQUFjRixxQkFBZCxDQUF0QjtBQUFBLE1BQ01HLHNCQUFzQkYsY0FBY0csTUFEMUM7QUFBQSxNQUVNQyxpQkFBa0JGLHdCQUF3QixDQUZoRDs7QUFJQSxTQUFPRSxjQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsU0FBVCxDQUFtQmhCLGdCQUFuQixFQUFxQ2lCLE9BQXJDLEVBQThDO0FBQzVDcEIsS0FBR3FCLGFBQUgsQ0FBaUJsQixnQkFBakIsRUFBbUNpQixPQUFuQztBQUNEOztBQUVELFNBQVNFLFFBQVQsQ0FBa0JuQixnQkFBbEIsRUFBdUQ7QUFBQSxNQUFuQm9CLFFBQW1CLHVFQUFSLE1BQVE7O0FBQ3JELE1BQU1DLFVBQVU7QUFDUkQsY0FBVUE7QUFERixHQUFoQjtBQUFBLE1BR01ILFVBQVVwQixHQUFHeUIsWUFBSCxDQUFnQnRCLGdCQUFoQixFQUFrQ3FCLE9BQWxDLENBSGhCOztBQUtBLFNBQU9KLE9BQVA7QUFDRDs7QUFFRCxTQUFTTCxhQUFULENBQXVCRixxQkFBdkIsRUFBOEM7QUFDNUMsTUFBTUMsZ0JBQWdCZCxHQUFHMEIsV0FBSCxDQUFlYixxQkFBZixDQUF0Qjs7QUFFQSxTQUFPQyxhQUFQO0FBQ0Q7O0FBRURhLE9BQU9DLE9BQVAsR0FBaUI7QUFDZjFCLGVBQWFBLFdBREU7QUFFZkcsY0FBWUEsVUFGRztBQUdmQyxvQkFBa0JBLGdCQUhIO0FBSWZNLG9CQUFrQkEsZ0JBSkg7QUFLZk8sYUFBV0EsU0FMSTtBQU1mRyxZQUFVQSxRQU5LO0FBT2ZQLGlCQUFlQTtBQVBBLENBQWpCIiwiZmlsZSI6ImZpbGVTeXN0ZW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcblxuZnVuY3Rpb24gZW50cnlFeGlzdHMoYWJzb2x1dGVGaWxlUGF0aCkge1xuICByZXR1cm4gZnMuZXhpc3RzU3luYyhhYnNvbHV0ZUZpbGVQYXRoKTtcbn1cblxuZnVuY3Rpb24gZmlsZUV4aXN0cyhhYnNvbHV0ZUZpbGVQYXRoKSB7XG4gIHJldHVybiBmcy5leGlzdHNTeW5jKGFic29sdXRlRmlsZVBhdGgpO1xufVxuXG5mdW5jdGlvbiBpc0VudHJ5RGlyZWN0b3J5KGFic29sdXRlUGF0aCkge1xuICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMoYWJzb2x1dGVQYXRoKSxcbiAgICAgICAgZW50cnlEaXJlY3RvcnkgPSBzdGF0LmlzRGlyZWN0b3J5KCk7XG5cbiAgcmV0dXJuIGVudHJ5RGlyZWN0b3J5O1xufVxuXG5mdW5jdGlvbiBpc0RpcmVjdG9yeUVtcHR5KGFic29sdXRlRGlyZWN0b3J5UGF0aCkge1xuICBjb25zdCBzdWJFbnRyeU5hbWVzID0gcmVhZERpcmVjdG9yeShhYnNvbHV0ZURpcmVjdG9yeVBhdGgpLFxuICAgICAgICBzdWJFbnRyeU5hbWVzTGVuZ3RoID0gc3ViRW50cnlOYW1lcy5sZW5ndGgsXG4gICAgICAgIGRpcmVjdG9yeUVtcHR5ID0gKHN1YkVudHJ5TmFtZXNMZW5ndGggPT09IDApO1xuXG4gIHJldHVybiBkaXJlY3RvcnlFbXB0eTtcbn1cblxuZnVuY3Rpb24gd3JpdGVGaWxlKGFic29sdXRlRmlsZVBhdGgsIGNvbnRlbnQpIHtcbiAgZnMud3JpdGVGaWxlU3luYyhhYnNvbHV0ZUZpbGVQYXRoLCBjb250ZW50KTtcbn1cblxuZnVuY3Rpb24gcmVhZEZpbGUoYWJzb2x1dGVGaWxlUGF0aCwgZW5jb2RpbmcgPSAndXRmOCcpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICBlbmNvZGluZzogZW5jb2RpbmdcbiAgICAgICAgfSxcbiAgICAgICAgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhhYnNvbHV0ZUZpbGVQYXRoLCBvcHRpb25zKTtcblxuICByZXR1cm4gY29udGVudDtcbn1cblxuZnVuY3Rpb24gcmVhZERpcmVjdG9yeShhYnNvbHV0ZURpcmVjdG9yeVBhdGgpIHtcbiAgY29uc3Qgc3ViRW50cnlOYW1lcyA9IGZzLnJlYWRkaXJTeW5jKGFic29sdXRlRGlyZWN0b3J5UGF0aCk7XG5cbiAgcmV0dXJuIHN1YkVudHJ5TmFtZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbnRyeUV4aXN0czogZW50cnlFeGlzdHMsXG4gIGZpbGVFeGlzdHM6IGZpbGVFeGlzdHMsXG4gIGlzRW50cnlEaXJlY3Rvcnk6IGlzRW50cnlEaXJlY3RvcnksXG4gIGlzRGlyZWN0b3J5RW1wdHk6IGlzRGlyZWN0b3J5RW1wdHksXG4gIHdyaXRlRmlsZTogd3JpdGVGaWxlLFxuICByZWFkRmlsZTogcmVhZEZpbGUsXG4gIHJlYWREaXJlY3Rvcnk6IHJlYWREaXJlY3Rvcnlcbn07XG4iXX0=