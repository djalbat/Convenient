'use strict';

var fs = require('fs');

var pathUtilities = require('../utilities/path');

var pathWithoutBottommostNameFromPath = pathUtilities.pathWithoutBottommostNameFromPath;

function checkEntryExists(entryPath) {
  var entryExists = fs.existsSync(entryPath);
  return entryExists;
}

function checkFileExists(filePath) {
  var fileExists = false;
  var entryPath = filePath,
      ///
  entryExists = checkEntryExists(entryPath);

  if (entryExists) {
    var entryFile = isEntryFile(entryPath);

    if (entryFile) {
      fileExists = true;
    }
  }

  return fileExists;
}

function checkDirectoryExists(directoryPath) {
  var directoryExists = false;
  var entryPath = directoryPath,
      ///
  entryExists = checkEntryExists(entryPath);

  if (entryExists) {
    var entryDirectory = isEntryDirectory(entryPath);

    if (entryDirectory) {
      directoryExists = true;
    }
  }

  return directoryExists;
}

function isEntryFile(entryPath) {
  var stat = fs.statSync(entryPath),
      entryDirectory = stat.isDirectory(),
      entryFile = !entryDirectory;
  return entryFile;
}

function isEntryDirectory(entryPath) {
  var stat = fs.statSync(entryPath),
      entryDirectory = stat.isDirectory();
  return entryDirectory;
}

function isDirectoryEmpty(directoryPath) {
  var subEntryNames = readDirectory(directoryPath),
      subEntryNamesLength = subEntryNames.length,
      directoryEmpty = subEntryNamesLength === 0;
  return directoryEmpty;
}

function readDirectory(directoryPath) {
  var subEntryNames = fs.readdirSync(directoryPath);
  return subEntryNames;
}

function readFile(filePath) {
  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';
  var options = {
    encoding: encoding
  },
      content = fs.readFileSync(filePath, options);
  return content;
}

function writeFile(filePath, content) {
  fs.writeFileSync(filePath, content);
}

function appendToFile(filePath, content) {
  fs.appendFileSync(filePath, content);
}

function createDirectory(directoryPath) {
  var directoryPathWithoutBottommostName = pathWithoutBottommostNameFromPath(directoryPath);

  if (directoryPathWithoutBottommostName !== '.' && directoryPathWithoutBottommostName !== null) {
    var parentDirectoryPath = directoryPathWithoutBottommostName,
        ///
    parentDirectoryExists = checkDirectoryExists(parentDirectoryPath);

    if (!parentDirectoryExists) {
      createDirectory(parentDirectoryPath);
    }
  }

  fs.mkdirSync(directoryPath);
}

function renameFile(oldFilePath, newFilePath) {
  fs.renameSync(oldFilePath, newFilePath);
}

function getStats(filePath) {
  return fs.statSync(filePath);
}

module.exports = {
  checkEntryExists: checkEntryExists,
  checkFileExists: checkFileExists,
  checkDirectoryExists: checkDirectoryExists,
  isEntryFile: isEntryFile,
  isEntryDirectory: isEntryDirectory,
  isDirectoryEmpty: isDirectoryEmpty,
  readDirectory: readDirectory,
  readFile: readFile,
  writeFile: writeFile,
  appendToFile: appendToFile,
  createDirectory: createDirectory,
  renameFile: renameFile,
  getStats: getStats
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,