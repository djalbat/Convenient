"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.checkEntryExists = checkEntryExists;
exports.checkFileExists = checkFileExists;
exports.checkDirectoryExists = checkDirectoryExists;
exports.isEntryFile = isEntryFile;
exports.isEntryDirectory = isEntryDirectory;
exports.isDirectoryEmpty = isDirectoryEmpty;
exports.readDirectory = readDirectory;
exports.readFile = readFile;
exports.writeFile = writeFile;
exports.appendToFile = appendToFile;
exports.createDirectory = createDirectory;
exports.renameFile = renameFile;
exports.getStats = getStats;
exports.default = void 0;
var _fs = _interopRequireDefault(require("fs"));
var _constants = require("../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function checkEntryExists(entryPath) {
    var entryExists = _fs.default.existsSync(entryPath);
    return entryExists;
}
function checkFileExists(filePath) {
    var fileExists = false;
    var entryPath = filePath, entryExists = checkEntryExists(entryPath);
    if (entryExists) {
        var entryFile = isEntryFile(entryPath);
        if (entryFile) {
            fileExists = true;
        }
    }
    return fileExists;
}
function checkDirectoryExists(directoryPath) {
    var directoryExists = false;
    var entryPath = directoryPath, entryExists = checkEntryExists(entryPath);
    if (entryExists) {
        var entryDirectory = isEntryDirectory(entryPath);
        if (entryDirectory) {
            directoryExists = true;
        }
    }
    return directoryExists;
}
function isEntryFile(entryPath) {
    var stat = _fs.default.statSync(entryPath), entryDirectory = stat.isDirectory(), entryFile = !entryDirectory;
    return entryFile;
}
function isEntryDirectory(entryPath) {
    var stat = _fs.default.statSync(entryPath), entryDirectory = stat.isDirectory();
    return entryDirectory;
}
function isDirectoryEmpty(directoryPath) {
    var subEntryNames = readDirectory(directoryPath), subEntryNamesLength = subEntryNames.length, directoryEmpty = subEntryNamesLength === 0;
    return directoryEmpty;
}
function readDirectory(directoryPath) {
    var subEntryNames = _fs.default.readdirSync(directoryPath);
    return subEntryNames;
}
function readFile(filePath, param) {
    var encoding = param === void 0 ? _constants.UTF8_ENCODING : param;
    var options = {
        encoding: encoding
    }, content = _fs.default.readFileSync(filePath, options);
    return content;
}
function writeFile(filePath, content) {
    _fs.default.writeFileSync(filePath, content);
}
function appendToFile(filePath, content) {
    _fs.default.appendFileSync(filePath, content);
}
function createDirectory(directoryPath) {
    var recursive = true, options = {
        recursive: recursive
    };
    _fs.default.mkdirSync(directoryPath, options);
}
function renameFile(oldFilePath, newFilePath) {
    _fs.default.renameSync(oldFilePath, newFilePath);
}
function getStats(filePath) {
    return _fs.default.statSync(filePath);
}
var _default = {
    checkEntryExists: checkEntryExists,
    checkFileExists: checkFileExists,
    checkDirectoryExists: checkDirectoryExists,
    isEntryFile: isEntryFile,
    isEntryDirectory: isEntryDirectory,
    isDirectoryEmpty: isDirectoryEmpty,
    readDirectory: readDirectory,
    readFile: readFile,
    writeFile: writeFile,
    appendToFile: appendToFile,
    createDirectory: createDirectory,
    renameFile: renameFile,
    getStats: getStats
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvZmlsZVN5c3RlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuXG5pbXBvcnQgeyBVVEY4X0VOQ09ESU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tFbnRyeUV4aXN0cyhlbnRyeVBhdGgpIHtcbiAgY29uc3QgZW50cnlFeGlzdHMgPSBmcy5leGlzdHNTeW5jKGVudHJ5UGF0aCk7XG5cbiAgcmV0dXJuIGVudHJ5RXhpc3RzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tGaWxlRXhpc3RzKGZpbGVQYXRoKSB7XG4gIGxldCBmaWxlRXhpc3RzID0gZmFsc2U7XG4gIFxuICBjb25zdCBlbnRyeVBhdGggPSBmaWxlUGF0aCwgLy8vXG4gICAgICAgIGVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhlbnRyeVBhdGgpO1xuICBcbiAgaWYgKGVudHJ5RXhpc3RzKSB7XG4gICAgY29uc3QgZW50cnlGaWxlID0gaXNFbnRyeUZpbGUoZW50cnlQYXRoKTtcbiAgICBcbiAgICBpZiAoZW50cnlGaWxlKSB7XG4gICAgICBmaWxlRXhpc3RzID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiBmaWxlRXhpc3RzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tEaXJlY3RvcnlFeGlzdHMoZGlyZWN0b3J5UGF0aCkge1xuICBsZXQgZGlyZWN0b3J5RXhpc3RzID0gZmFsc2U7XG5cbiAgY29uc3QgZW50cnlQYXRoID0gZGlyZWN0b3J5UGF0aCwgLy8vXG4gICAgICAgIGVudHJ5RXhpc3RzID0gY2hlY2tFbnRyeUV4aXN0cyhlbnRyeVBhdGgpO1xuXG4gIGlmIChlbnRyeUV4aXN0cykge1xuICAgIGNvbnN0IGVudHJ5RGlyZWN0b3J5ID0gaXNFbnRyeURpcmVjdG9yeShlbnRyeVBhdGgpO1xuXG4gICAgaWYgKGVudHJ5RGlyZWN0b3J5KSB7XG4gICAgICBkaXJlY3RvcnlFeGlzdHMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkaXJlY3RvcnlFeGlzdHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VudHJ5RmlsZShlbnRyeVBhdGgpIHtcbiAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKGVudHJ5UGF0aCksXG4gICAgICAgIGVudHJ5RGlyZWN0b3J5ID0gc3RhdC5pc0RpcmVjdG9yeSgpLFxuICAgICAgICBlbnRyeUZpbGUgPSAhZW50cnlEaXJlY3Rvcnk7XG5cbiAgcmV0dXJuIGVudHJ5RmlsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW50cnlEaXJlY3RvcnkoZW50cnlQYXRoKSB7XG4gIGNvbnN0IHN0YXQgPSBmcy5zdGF0U3luYyhlbnRyeVBhdGgpLFxuICAgICAgICBlbnRyeURpcmVjdG9yeSA9IHN0YXQuaXNEaXJlY3RvcnkoKTtcblxuICByZXR1cm4gZW50cnlEaXJlY3Rvcnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RpcmVjdG9yeUVtcHR5KGRpcmVjdG9yeVBhdGgpIHtcbiAgY29uc3Qgc3ViRW50cnlOYW1lcyA9IHJlYWREaXJlY3RvcnkoZGlyZWN0b3J5UGF0aCksXG4gICAgICAgIHN1YkVudHJ5TmFtZXNMZW5ndGggPSBzdWJFbnRyeU5hbWVzLmxlbmd0aCxcbiAgICAgICAgZGlyZWN0b3J5RW1wdHkgPSAoc3ViRW50cnlOYW1lc0xlbmd0aCA9PT0gMCk7XG5cbiAgcmV0dXJuIGRpcmVjdG9yeUVtcHR5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZERpcmVjdG9yeShkaXJlY3RvcnlQYXRoKSB7XG4gIGNvbnN0IHN1YkVudHJ5TmFtZXMgPSBmcy5yZWFkZGlyU3luYyhkaXJlY3RvcnlQYXRoKTtcblxuICByZXR1cm4gc3ViRW50cnlOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlKGZpbGVQYXRoLCBlbmNvZGluZyA9IFVURjhfRU5DT0RJTkcpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICBlbmNvZGluZ1xuICAgICAgICB9LFxuICAgICAgICBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCBvcHRpb25zKTtcblxuICByZXR1cm4gY29udGVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlRmlsZShmaWxlUGF0aCwgY29udGVudCkge1xuICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBjb250ZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZFRvRmlsZShmaWxlUGF0aCwgY29udGVudCkge1xuICBmcy5hcHBlbmRGaWxlU3luYyhmaWxlUGF0aCwgY29udGVudCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXJlY3RvcnkoZGlyZWN0b3J5UGF0aCkge1xuICBjb25zdCByZWN1cnNpdmUgPSB0cnVlLFxuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgIHJlY3Vyc2l2ZVxuICAgICAgICB9O1xuXG4gIGZzLm1rZGlyU3luYyhkaXJlY3RvcnlQYXRoLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmFtZUZpbGUob2xkRmlsZVBhdGgsIG5ld0ZpbGVQYXRoKSB7XG4gIGZzLnJlbmFtZVN5bmMob2xkRmlsZVBhdGgsIG5ld0ZpbGVQYXRoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXRzKGZpbGVQYXRoKSB7XG4gIHJldHVybiBmcy5zdGF0U3luYyhmaWxlUGF0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY2hlY2tFbnRyeUV4aXN0cyxcbiAgY2hlY2tGaWxlRXhpc3RzLFxuICBjaGVja0RpcmVjdG9yeUV4aXN0cyxcbiAgaXNFbnRyeUZpbGUsXG4gIGlzRW50cnlEaXJlY3RvcnksXG4gIGlzRGlyZWN0b3J5RW1wdHksXG4gIHJlYWREaXJlY3RvcnksXG4gIHJlYWRGaWxlLFxuICB3cml0ZUZpbGUsXG4gIGFwcGVuZFRvRmlsZSxcbiAgY3JlYXRlRGlyZWN0b3J5LFxuICByZW5hbWVGaWxlLFxuICBnZXRTdGF0c1xufTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQSxVQUFZOzs7O1FBTUksZ0JBQWdCLEdBQWhCLGdCQUFnQjtRQU1oQixlQUFlLEdBQWYsZUFBZTtRQWlCZixvQkFBb0IsR0FBcEIsb0JBQW9CO1FBaUJwQixXQUFXLEdBQVgsV0FBVztRQVFYLGdCQUFnQixHQUFoQixnQkFBZ0I7UUFPaEIsZ0JBQWdCLEdBQWhCLGdCQUFnQjtRQVFoQixhQUFhLEdBQWIsYUFBYTtRQU1iLFFBQVEsR0FBUixRQUFRO1FBU1IsU0FBUyxHQUFULFNBQVM7UUFJVCxZQUFZLEdBQVosWUFBWTtRQUlaLGVBQWUsR0FBZixlQUFlO1FBU2YsVUFBVSxHQUFWLFVBQVU7UUFJVixRQUFRLEdBQVIsUUFBUTs7SUF2R1QsR0FBSTtJQUVXLFVBQWM7Ozs7OztTQUU1QixnQkFBZ0IsQ0FBQyxTQUFTO1FBQ2xDLFdBQVcsR0FMSixHQUFJLFNBS00sVUFBVSxDQUFDLFNBQVM7V0FFcEMsV0FBVzs7U0FHSixlQUFlLENBQUMsUUFBUTtRQUNsQyxVQUFVLEdBQUcsS0FBSztRQUVoQixTQUFTLEdBQUcsUUFBUSxFQUNwQixXQUFXLEdBQUcsZ0JBQWdCLENBQUMsU0FBUztRQUUxQyxXQUFXO1lBQ1AsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTO1lBRW5DLFNBQVM7WUFDWCxVQUFVLEdBQUcsSUFBSTs7O1dBSWQsVUFBVTs7U0FHSCxvQkFBb0IsQ0FBQyxhQUFhO1FBQzVDLGVBQWUsR0FBRyxLQUFLO1FBRXJCLFNBQVMsR0FBRyxhQUFhLEVBQ3pCLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTO1FBRTFDLFdBQVc7WUFDUCxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsU0FBUztZQUU3QyxjQUFjO1lBQ2hCLGVBQWUsR0FBRyxJQUFJOzs7V0FJbkIsZUFBZTs7U0FHUixXQUFXLENBQUMsU0FBUztRQUM3QixJQUFJLEdBN0NHLEdBQUksU0E2Q0QsUUFBUSxDQUFDLFNBQVMsR0FDNUIsY0FBYyxHQUFHLElBQUksQ0FBQyxXQUFXLElBQ2pDLFNBQVMsSUFBSSxjQUFjO1dBRTFCLFNBQVM7O1NBR0YsZ0JBQWdCLENBQUMsU0FBUztRQUNsQyxJQUFJLEdBckRHLEdBQUksU0FxREQsUUFBUSxDQUFDLFNBQVMsR0FDNUIsY0FBYyxHQUFHLElBQUksQ0FBQyxXQUFXO1dBRWhDLGNBQWM7O1NBR1AsZ0JBQWdCLENBQUMsYUFBYTtRQUN0QyxhQUFhLEdBQUcsYUFBYSxDQUFDLGFBQWEsR0FDM0MsbUJBQW1CLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFDMUMsY0FBYyxHQUFJLG1CQUFtQixLQUFLLENBQUM7V0FFMUMsY0FBYzs7U0FHUCxhQUFhLENBQUMsYUFBYTtRQUNuQyxhQUFhLEdBcEVOLEdBQUksU0FvRVEsV0FBVyxDQUFDLGFBQWE7V0FFM0MsYUFBYTs7U0FHTixRQUFRLENBQUMsUUFBUSxFQUFFLEtBQXdCO1FBQXhCLFFBQVEsR0FBUixLQUF3QixjQXZFN0IsVUFBYyxpQkF1RVQsS0FBd0I7UUFDbkQsT0FBTztRQUNMLFFBQVEsRUFBUixRQUFRO09BRVYsT0FBTyxHQTdFQSxHQUFJLFNBNkVFLFlBQVksQ0FBQyxRQUFRLEVBQUUsT0FBTztXQUUxQyxPQUFPOztTQUdBLFNBQVMsQ0FBQyxRQUFRLEVBQUUsT0FBTztJQWxGNUIsR0FBSSxTQW1GZCxhQUFhLENBQUMsUUFBUSxFQUFFLE9BQU87O1NBR3BCLFlBQVksQ0FBQyxRQUFRLEVBQUUsT0FBTztJQXRGL0IsR0FBSSxTQXVGZCxjQUFjLENBQUMsUUFBUSxFQUFFLE9BQU87O1NBR3JCLGVBQWUsQ0FBQyxhQUFhO1FBQ3JDLFNBQVMsR0FBRyxJQUFJLEVBQ2hCLE9BQU87UUFDTCxTQUFTLEVBQVQsU0FBUzs7SUE3RkosR0FBSSxTQWdHZCxTQUFTLENBQUMsYUFBYSxFQUFFLE9BQU87O1NBR3JCLFVBQVUsQ0FBQyxXQUFXLEVBQUUsV0FBVztJQW5HcEMsR0FBSSxTQW9HZCxVQUFVLENBQUMsV0FBVyxFQUFFLFdBQVc7O1NBR3hCLFFBQVEsQ0FBQyxRQUFRO1dBdkdsQixHQUFJLFNBd0dQLFFBQVEsQ0FBQyxRQUFROzs7SUFJM0IsZ0JBQWdCLEVBQWhCLGdCQUFnQjtJQUNoQixlQUFlLEVBQWYsZUFBZTtJQUNmLG9CQUFvQixFQUFwQixvQkFBb0I7SUFDcEIsV0FBVyxFQUFYLFdBQVc7SUFDWCxnQkFBZ0IsRUFBaEIsZ0JBQWdCO0lBQ2hCLGdCQUFnQixFQUFoQixnQkFBZ0I7SUFDaEIsYUFBYSxFQUFiLGFBQWE7SUFDYixRQUFRLEVBQVIsUUFBUTtJQUNSLFNBQVMsRUFBVCxTQUFTO0lBQ1QsWUFBWSxFQUFaLFlBQVk7SUFDWixlQUFlLEVBQWYsZUFBZTtJQUNmLFVBQVUsRUFBVixVQUFVO0lBQ1YsUUFBUSxFQUFSLFFBQVEifQ==