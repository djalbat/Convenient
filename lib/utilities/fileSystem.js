'use strict';

var fs = require('fs');

function doesEntryExist(absolutePath) {
  var entryExists = fs.existsSync(absolutePath);

  return entryExists;
}

function doesFileExist(absoluteFilePath) {
  var fileExists = false;

  var absolutePath = absoluteFilePath,
      ///
  entryExists = doesEntryExist(absolutePath);

  if (entryExists) {
    var entryFile = isEntryFile(absolutePath);

    if (entryFile) {
      fileExists = true;
    }
  }

  return fileExists;
}

function doesDirectoryExist(absoluteDirectoryPath) {
  var directoryExists = false;

  var absolutePath = absoluteDirectoryPath,
      ///
  entryExists = doesEntryExist(absolutePath);

  if (entryExists) {
    var entryDirectory = isEntryDirectory(absolutePath);

    if (entryDirectory) {
      directoryExists = true;
    }
  }

  return directoryExists;
}

function isEntryFile(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory(),
      entryFile = !entryDirectory;

  return entryFile;
}

function isEntryDirectory(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory();

  return entryDirectory;
}

function isDirectoryEmpty(absoluteDirectoryPath) {
  var subEntryNames = readDirectory(absoluteDirectoryPath),
      subEntryNamesLength = subEntryNames.length,
      directoryEmpty = subEntryNamesLength === 0;

  return directoryEmpty;
}

function readDirectory(absoluteDirectoryPath) {
  var subEntryNames = fs.readdirSync(absoluteDirectoryPath);

  return subEntryNames;
}

function readFile(absoluteFilePath) {
  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';

  var options = {
    encoding: encoding
  },
      content = fs.readFileSync(absoluteFilePath, options);

  return content;
}

function writeFile(absoluteFilePath, content) {
  fs.writeFileSync(absoluteFilePath, content);
}

function appendToFile(absoluteFilePath, content) {
  fs.appendFileSync(absoluteFilePath, content);
}

function renameFile(oldAbsoluteFilePath, newAbsoluteFilePath) {
  fs.renameSync(oldAbsoluteFilePath, newAbsoluteFilePath);
}

function getStats(absoluteFilePath) {
  return fs.statSync(absoluteFilePath);
}

module.exports = {
  doesEntryExist: doesEntryExist,
  doesFileExist: doesFileExist,
  doesDirectoryExist: doesDirectoryExist,
  isEntryFile: isEntryFile,
  isEntryDirectory: isEntryDirectory,
  isDirectoryEmpty: isDirectoryEmpty,
  readDirectory: readDirectory,
  readFile: readFile,
  writeFile: writeFile,
  appendToFile: appendToFile,
  renameFile: renameFile,
  getStats: getStats
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmlsZVN5c3RlbS5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJkb2VzRW50cnlFeGlzdCIsImFic29sdXRlUGF0aCIsImVudHJ5RXhpc3RzIiwiZXhpc3RzU3luYyIsImRvZXNGaWxlRXhpc3QiLCJhYnNvbHV0ZUZpbGVQYXRoIiwiZmlsZUV4aXN0cyIsImVudHJ5RmlsZSIsImlzRW50cnlGaWxlIiwiZG9lc0RpcmVjdG9yeUV4aXN0IiwiYWJzb2x1dGVEaXJlY3RvcnlQYXRoIiwiZGlyZWN0b3J5RXhpc3RzIiwiZW50cnlEaXJlY3RvcnkiLCJpc0VudHJ5RGlyZWN0b3J5Iiwic3RhdCIsInN0YXRTeW5jIiwiaXNEaXJlY3RvcnkiLCJpc0RpcmVjdG9yeUVtcHR5Iiwic3ViRW50cnlOYW1lcyIsInJlYWREaXJlY3RvcnkiLCJzdWJFbnRyeU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwiZGlyZWN0b3J5RW1wdHkiLCJyZWFkZGlyU3luYyIsInJlYWRGaWxlIiwiZW5jb2RpbmciLCJvcHRpb25zIiwiY29udGVudCIsInJlYWRGaWxlU3luYyIsIndyaXRlRmlsZSIsIndyaXRlRmlsZVN5bmMiLCJhcHBlbmRUb0ZpbGUiLCJhcHBlbmRGaWxlU3luYyIsInJlbmFtZUZpbGUiLCJvbGRBYnNvbHV0ZUZpbGVQYXRoIiwibmV3QWJzb2x1dGVGaWxlUGF0aCIsInJlbmFtZVN5bmMiLCJnZXRTdGF0cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYOztBQUVBLFNBQVNDLGNBQVQsQ0FBd0JDLFlBQXhCLEVBQXNDO0FBQ3BDLE1BQU1DLGNBQWNKLEdBQUdLLFVBQUgsQ0FBY0YsWUFBZCxDQUFwQjs7QUFFQSxTQUFPQyxXQUFQO0FBQ0Q7O0FBRUQsU0FBU0UsYUFBVCxDQUF1QkMsZ0JBQXZCLEVBQXlDO0FBQ3ZDLE1BQUlDLGFBQWEsS0FBakI7O0FBRUEs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QSxRQVJLO0FBU2ZLLGFBQVdBLFNBVEk7QUFVZkUsZ0JBQWNBLFlBVkM7QUFXZkUsY0FBWUEsVUFYRztBQVlmSSxZQUFVQTtBQVpLLENBQWpCIiwiZmlsZSI6ImZpbGVTeXN0ZW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcblxuZnVuY3Rpb24gZG9lc0VudHJ5RXhpc3QoYWJzb2x1dGVQYXRoKSB7XG4gIGNvbnN0IGVudHJ5RXhpc3RzID0gZnMuZXhpc3RzU3luYyhhYnNvbHV0ZVBhdGgpO1xuXG4gIHJldHVybiBlbnRyeUV4aXN0cztcbn1cblxuZnVuY3Rpb24gZG9lc0ZpbGVFeGlzdChhYnNvbHV0ZUZpbGVQYXRoKSB7XG4gIGxldCBmaWxlRXhpc3RzID0gZmFsc2U7XG4gIFxuICBjb25zdCBhYnNvbHV0ZVBhdGggPSBhYnNvbHV0ZUZpbGVQYXRoLCAvLy9cbiAgICAgICAgZW50cnlFeGlzdHMgPSBkb2VzRW50cnlFeGlzdChhYnNvbHV0ZVBhdGgpO1xuICBcbiAgaWYgKGVudHJ5RXhpc3RzKSB7XG4gICAgY29uc3QgZW50cnlGaWxlID0gaXNFbnRyeUZpbGUoYWJzb2x1dGVQYXRoKTtcbiAgICBcbiAgICBpZiAoZW50cnlGaWxlKSB7XG4gICAgICBmaWxlRXhpc3RzID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiBmaWxlRXhpc3RzO1xufVxuXG5mdW5jdGlvbiBkb2VzRGlyZWN0b3J5RXhpc3QoYWJzb2x1dGVEaXJlY3RvcnlQYXRoKSB7XG4gIGxldCBkaXJlY3RvcnlFeGlzdHMgPSBmYWxzZTtcblxuICBjb25zdCBhYnNvbHV0ZVBhdGggPSBhYnNvbHV0ZURpcmVjdG9yeVBhdGgsIC8vL1xuICAgICAgICBlbnRyeUV4aXN0cyA9IGRvZXNFbnRyeUV4aXN0KGFic29sdXRlUGF0aCk7XG5cbiAgaWYgKGVudHJ5RXhpc3RzKSB7XG4gICAgY29uc3QgZW50cnlEaXJlY3RvcnkgPSBpc0VudHJ5RGlyZWN0b3J5KGFic29sdXRlUGF0aCk7XG5cbiAgICBpZiAoZW50cnlEaXJlY3RvcnkpIHtcbiAgICAgIGRpcmVjdG9yeUV4aXN0cyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRpcmVjdG9yeUV4aXN0cztcbn1cblxuZnVuY3Rpb24gaXNFbnRyeUZpbGUoYWJzb2x1dGVQYXRoKSB7XG4gIGNvbnN0IHN0YXQgPSBmcy5zdGF0U3luYyhhYnNvbHV0ZVBhdGgpLFxuICAgICAgZW50cnlEaXJlY3RvcnkgPSBzdGF0LmlzRGlyZWN0b3J5KCksXG4gICAgICBlbnRyeUZpbGUgPSAhZW50cnlEaXJlY3Rvcnk7XG5cbiAgcmV0dXJuIGVudHJ5RmlsZTtcbn1cblxuZnVuY3Rpb24gaXNFbnRyeURpcmVjdG9yeShhYnNvbHV0ZVBhdGgpIHtcbiAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKGFic29sdXRlUGF0aCksXG4gICAgICAgIGVudHJ5RGlyZWN0b3J5ID0gc3RhdC5pc0RpcmVjdG9yeSgpO1xuXG4gIHJldHVybiBlbnRyeURpcmVjdG9yeTtcbn1cblxuZnVuY3Rpb24gaXNEaXJlY3RvcnlFbXB0eShhYnNvbHV0ZURpcmVjdG9yeVBhdGgpIHtcbiAgY29uc3Qgc3ViRW50cnlOYW1lcyA9IHJlYWREaXJlY3RvcnkoYWJzb2x1dGVEaXJlY3RvcnlQYXRoKSxcbiAgICAgICAgc3ViRW50cnlOYW1lc0xlbmd0aCA9IHN1YkVudHJ5TmFtZXMubGVuZ3RoLFxuICAgICAgICBkaXJlY3RvcnlFbXB0eSA9IChzdWJFbnRyeU5hbWVzTGVuZ3RoID09PSAwKTtcblxuICByZXR1cm4gZGlyZWN0b3J5RW1wdHk7XG59XG5cbmZ1bmN0aW9uIHJlYWREaXJlY3RvcnkoYWJzb2x1dGVEaXJlY3RvcnlQYXRoKSB7XG4gIGNvbnN0IHN1YkVudHJ5TmFtZXMgPSBmcy5yZWFkZGlyU3luYyhhYnNvbHV0ZURpcmVjdG9yeVBhdGgpO1xuXG4gIHJldHVybiBzdWJFbnRyeU5hbWVzO1xufVxuXG5mdW5jdGlvbiByZWFkRmlsZShhYnNvbHV0ZUZpbGVQYXRoLCBlbmNvZGluZyA9ICd1dGY4Jykge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIGVuY29kaW5nOiBlbmNvZGluZ1xuICAgICAgICB9LFxuICAgICAgICBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGFic29sdXRlRmlsZVBhdGgsIG9wdGlvbnMpO1xuXG4gIHJldHVybiBjb250ZW50O1xufVxuXG5mdW5jdGlvbiB3cml0ZUZpbGUoYWJzb2x1dGVGaWxlUGF0aCwgY29udGVudCkge1xuICBmcy53cml0ZUZpbGVTeW5jKGFic29sdXRlRmlsZVBhdGgsIGNvbnRlbnQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRUb0ZpbGUoYWJzb2x1dGVGaWxlUGF0aCwgY29udGVudCkge1xuICBmcy5hcHBlbmRGaWxlU3luYyhhYnNvbHV0ZUZpbGVQYXRoLCBjb250ZW50KTtcbn1cblxuZnVuY3Rpb24gcmVuYW1lRmlsZShvbGRBYnNvbHV0ZUZpbGVQYXRoLCBuZXdBYnNvbHV0ZUZpbGVQYXRoKSB7XG4gIGZzLnJlbmFtZVN5bmMob2xkQWJzb2x1dGVGaWxlUGF0aCwgbmV3QWJzb2x1dGVGaWxlUGF0aCk7XG59XG5cbmZ1bmN0aW9uIGdldFN0YXRzKGFic29sdXRlRmlsZVBhdGgpIHtcbiAgcmV0dXJuIGZzLnN0YXRTeW5jKGFic29sdXRlRmlsZVBhdGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZG9lc0VudHJ5RXhpc3Q6IGRvZXNFbnRyeUV4aXN0LFxuICBkb2VzRmlsZUV4aXN0OiBkb2VzRmlsZUV4aXN0LFxuICBkb2VzRGlyZWN0b3J5RXhpc3Q6IGRvZXNEaXJlY3RvcnlFeGlzdCxcbiAgaXNFbnRyeUZpbGU6IGlzRW50cnlGaWxlLFxuICBpc0VudHJ5RGlyZWN0b3J5OiBpc0VudHJ5RGlyZWN0b3J5LFxuICBpc0RpcmVjdG9yeUVtcHR5OiBpc0RpcmVjdG9yeUVtcHR5LFxuICByZWFkRGlyZWN0b3J5OiByZWFkRGlyZWN0b3J5LFxuICByZWFkRmlsZTogcmVhZEZpbGUsXG4gIHdyaXRlRmlsZTogd3JpdGVGaWxlLFxuICBhcHBlbmRUb0ZpbGU6IGFwcGVuZFRvRmlsZSxcbiAgcmVuYW1lRmlsZTogcmVuYW1lRmlsZSxcbiAgZ2V0U3RhdHM6IGdldFN0YXRzXG59O1xuIl19