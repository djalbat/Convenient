'use strict';

var fs = require('fs');

function entryExists(absolutePath) {
  return fs.existsSync(absolutePath);
}

function fileExists(absoluteFilePath) {
  var fileExists = false;

  var absolutePath = absoluteFilePath,
      ///
  entryExists = entryExists(absolutePath);

  if (entryExists) {
    var entryFile = isEntryFile(absolutePath);

    if (entryFile) {
      fileExists = true;
    }
  }

  return fileExists;
}

function isEntryFile(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory(),
      entryFile = !entryDirectory;

  return entryFile;
}

function directoryExists(absoluteDirectoryPath) {
  var directoryExists = false;

  var absolutePath = absoluteDirectoryPath,
      ///
  entryExists = entryExists(absolutePath);

  if (entryExists) {
    var entryDirectory = isEntryDirectory(absolutePath);

    if (entryDirectory) {
      directoryExists = true;
    }
  }

  return directoryExists;
}

function isEntryDirectory(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory();

  return entryDirectory;
}

function isDirectoryEmpty(absoluteDirectoryPath) {
  var subEntryNames = readDirectory(absoluteDirectoryPath),
      subEntryNamesLength = subEntryNames.length,
      directoryEmpty = subEntryNamesLength === 0;

  return directoryEmpty;
}

function readDirectory(absoluteDirectoryPath) {
  var subEntryNames = fs.readdirSync(absoluteDirectoryPath);

  return subEntryNames;
}

function readFile(absoluteFilePath) {
  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';

  var options = {
    encoding: encoding
  },
      content = fs.readFileSync(absoluteFilePath, options);

  return content;
}

function writeFile(absoluteFilePath, content) {
  fs.writeFileSync(absoluteFilePath, content);
}

module.exports = {
  entryExists: entryExists,
  fileExists: fileExists,
  isEntryFile: isEntryFile,
  directoryExists: directoryExists,
  isEntryDirectory: isEntryDirectory,
  isDirectoryEmpty: isDirectoryEmpty,
  readDirectory: readDirectory,
  readFile: readFile,
  writeFile: writeFile
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmlsZVN5c3RlbS5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJlbnRyeUV4aXN0cyIsImFic29sdXRlUGF0aCIsImV4aXN0c1N5bmMiLCJmaWxlRXhpc3RzIiwiYWJzb2x1dGVGaWxlUGF0aCIsImVudHJ5RmlsZSIsImlzRW50cnlGaWxlIiwic3RhdCIsInN0YXRTeW5jIiwiZW50cnlEaXJlY3RvcnkiLCJpc0RpcmVjdG9yeSIsImRpcmVjdG9yeUV4aXN0cyIsImFic29sdXRlRGlyZWN0b3J5UGF0aCIsImlzRW50cnlEaXJlY3RvcnkiLCJpc0RpcmVjdG9yeUVtcHR5Iiwic3ViRW50cnlOYW1lcyIsInJlYWREaXJlY3RvcnkiLCJzdWJFbnRyeU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwiZGlyZWN0b3J5RW1wdHkiLCJyZWFkZGlyU3luYyIsInJlYWRGaWxlIiwiZW5jb2RpbmciLCJvcHRpb25zIiwiY29udGVudCIsInJlYWRGaWxlU3luYyIsIndyaXRlRmlsZSIsIndyaXRlRmlsZVN5bmMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxLQUFLQyxRQUFRLElBQVIsQ0FBWDs7QUFFQSxTQUFTQyxXQUFULENBQXFCQyxZQUFyQixFQUFtQztBQUNqQyxTQUFPSCxHQUFHSSxVQUFILENBQWNELFlBQWQsQ0FBUDtBQUNEOztBQUVELFNBQVNFLFVBQVQsQ0FBb0JDLGdCQUFwQixFQUFzQztBQUNwQyxNQUFJRCxhQUFhLEtBQWpCOztBQUVBLE1BQU1GLGVBQWVHLGdCQUFyQjtBQUFBLE1BQXVDO0FBQ2pDSixnQkFBY0EsWUFBWUMsWUFBWixDQURwQjs7QUFHQSxNQUFJRCxXQUFKLEVBQWlCO0FBQ2YsUUFBTUssWUFBWUMsWUFBWUwsWUFBWixDQUFsQjs7QUFFQSxRQUFJSSxTQUFKLEVBQWU7QUFDYkYsbUJBQWEsSUFBYjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0EsVUFBUDtBQUNEOztBQUVELFNBQVNHLFdBQVQsQ0FBcUJMLFlBQXJCLEVBQW1DO0FBQ2pDLE1BQU1NLE9BQU9ULEdBQUdVLFFBQUgsQ0FBWVAsWUFBWixDQUFiO0FBQUEsTUFDSVEsaUJBQWlCRixLQUFLRyxXQUFMLEVBRHJCO0FBQUEsTUFFSUwsWUFBWSxDQUFDSSxjQUZqQjs7QUFJQSxTQUFPSixTQUFQO0FBQ0Q7O0FBRUQsU0FBU00sZUFBVCxDQUF5QkMscUJBQXpCLEVBQWdEO0FBQzlDLE1BQUlELGtCQUFrQixLQUF0Qjs7QUFFQSxNQUFNVixlQUFlVyxxQkFBckI7QUFBQSxNQUE0QztBQUN0Q1osZ0JBQWNBLFlBQVlDLFlBQVosQ0FEcEI7O0FBR0EsTUFBSUQsV0FBSixFQUFpQjtBQUNmLFFBQU1TLGlCQUFpQkksaUJBQWlCWixZQUFqQixDQUF2Qjs7QUFFQSxRQUFJUSxjQUFKLEVBQW9CO0FBQ2xCRSx3QkFBa0IsSUFBbEI7QUFDRDtBQUNGOztBQUVELFNBQU9BLGVBQVA7QUFDRDs7QUFFRCxTQUFTRSxnQkFBVCxDQUEwQlosWUFBMUIsRUFBd0M7QUFDdEMsTUFBTU0sT0FBT1QsR0FBR1UsUUFBSCxDQUFZUCxZQUFaLENBQWI7QUFBQSxNQUNNUSxpQkFBaUJGLEtBQUtHLFdBQUwsRUFEdkI7O0FBR0EsU0FBT0QsY0FBUDtBQUNEOztBQUVELFNBQVNLLGdCQUFULENBQTBCRixxQkFBMUIsRUFBaUQ7QUFDL0MsTUFBTUcsZ0JBQWdCQyxjQUFjSixxQkFBZCxDQUF0QjtBQUFBLE1BQ01LLHNCQUFzQkYsY0FBY0csTUFEMUM7QUFBQSxNQUVNQyxpQkFBa0JGLHdCQUF3QixDQUZoRDs7QUFJQSxTQUFPRSxjQUFQO0FBQ0Q7O0FBRUQsU0FBU0gsYUFBVCxDQUF1QkoscUJBQXZCLEVBQThDO0FBQzVDLE1BQU1HLGdCQUFnQmpCLEdBQUdzQixXQUFILENBQWVSLHFCQUFmLENBQXRCOztBQUVBLFNBQU9HLGFBQVA7QUFDRDs7QUFFRCxTQUFTTSxRQUFULENBQWtCakIsZ0JBQWxCLEVBQXVEO0FBQUEsTUFBbkJrQixRQUFtQix1RUFBUixNQUFROztBQUNyRCxNQUFNQyxVQUFVO0FBQ1JELGNBQVVBO0FBREYsR0FBaEI7QUFBQSxNQUdNRSxVQUFVMUIsR0FBRzJCLFlBQUgsQ0FBZ0JyQixnQkFBaEIsRUFBa0NtQixPQUFsQyxDQUhoQjs7QUFLQSxTQUFPQyxPQUFQO0FBQ0Q7O0FBRUQsU0FBU0UsU0FBVCxDQUFtQnRCLGdCQUFuQixFQUFxQ29CLE9BQXJDLEVBQThDO0FBQzVDMUIsS0FBRzZCLGFBQUgsQ0FBaUJ2QixnQkFBakIsRUFBbUNvQixPQUFuQztBQUNEOztBQUVESSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2Y3QixlQUFhQSxXQURFO0FBRWZHLGNBQVlBLFVBRkc7QUFHZkcsZUFBYUEsV0FIRTtBQUlmSyxtQkFBaUJBLGVBSkY7QUFLZkUsb0JBQWtCQSxnQkFMSDtBQU1mQyxvQkFBa0JBLGdCQU5IO0FBT2ZFLGlCQUFlQSxhQVBBO0FBUWZLLFlBQVVBLFFBUks7QUFTZkssYUFBV0E7QUFUSSxDQUFqQiIsImZpbGUiOiJmaWxlU3lzdGVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbmZ1bmN0aW9uIGVudHJ5RXhpc3RzKGFic29sdXRlUGF0aCkge1xuICByZXR1cm4gZnMuZXhpc3RzU3luYyhhYnNvbHV0ZVBhdGgpO1xufVxuXG5mdW5jdGlvbiBmaWxlRXhpc3RzKGFic29sdXRlRmlsZVBhdGgpIHtcbiAgbGV0IGZpbGVFeGlzdHMgPSBmYWxzZTtcbiAgXG4gIGNvbnN0IGFic29sdXRlUGF0aCA9IGFic29sdXRlRmlsZVBhdGgsIC8vL1xuICAgICAgICBlbnRyeUV4aXN0cyA9IGVudHJ5RXhpc3RzKGFic29sdXRlUGF0aCk7XG4gIFxuICBpZiAoZW50cnlFeGlzdHMpIHtcbiAgICBjb25zdCBlbnRyeUZpbGUgPSBpc0VudHJ5RmlsZShhYnNvbHV0ZVBhdGgpO1xuICAgIFxuICAgIGlmIChlbnRyeUZpbGUpIHtcbiAgICAgIGZpbGVFeGlzdHMgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIGZpbGVFeGlzdHM7XG59XG5cbmZ1bmN0aW9uIGlzRW50cnlGaWxlKGFic29sdXRlUGF0aCkge1xuICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMoYWJzb2x1dGVQYXRoKSxcbiAgICAgIGVudHJ5RGlyZWN0b3J5ID0gc3RhdC5pc0RpcmVjdG9yeSgpLFxuICAgICAgZW50cnlGaWxlID0gIWVudHJ5RGlyZWN0b3J5O1xuXG4gIHJldHVybiBlbnRyeUZpbGU7XG59XG5cbmZ1bmN0aW9uIGRpcmVjdG9yeUV4aXN0cyhhYnNvbHV0ZURpcmVjdG9yeVBhdGgpIHtcbiAgbGV0IGRpcmVjdG9yeUV4aXN0cyA9IGZhbHNlO1xuXG4gIGNvbnN0IGFic29sdXRlUGF0aCA9IGFic29sdXRlRGlyZWN0b3J5UGF0aCwgLy8vXG4gICAgICAgIGVudHJ5RXhpc3RzID0gZW50cnlFeGlzdHMoYWJzb2x1dGVQYXRoKTtcblxuICBpZiAoZW50cnlFeGlzdHMpIHtcbiAgICBjb25zdCBlbnRyeURpcmVjdG9yeSA9IGlzRW50cnlEaXJlY3RvcnkoYWJzb2x1dGVQYXRoKTtcblxuICAgIGlmIChlbnRyeURpcmVjdG9yeSkge1xuICAgICAgZGlyZWN0b3J5RXhpc3RzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGlyZWN0b3J5RXhpc3RzO1xufVxuXG5mdW5jdGlvbiBpc0VudHJ5RGlyZWN0b3J5KGFic29sdXRlUGF0aCkge1xuICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMoYWJzb2x1dGVQYXRoKSxcbiAgICAgICAgZW50cnlEaXJlY3RvcnkgPSBzdGF0LmlzRGlyZWN0b3J5KCk7XG5cbiAgcmV0dXJuIGVudHJ5RGlyZWN0b3J5O1xufVxuXG5mdW5jdGlvbiBpc0RpcmVjdG9yeUVtcHR5KGFic29sdXRlRGlyZWN0b3J5UGF0aCkge1xuICBjb25zdCBzdWJFbnRyeU5hbWVzID0gcmVhZERpcmVjdG9yeShhYnNvbHV0ZURpcmVjdG9yeVBhdGgpLFxuICAgICAgICBzdWJFbnRyeU5hbWVzTGVuZ3RoID0gc3ViRW50cnlOYW1lcy5sZW5ndGgsXG4gICAgICAgIGRpcmVjdG9yeUVtcHR5ID0gKHN1YkVudHJ5TmFtZXNMZW5ndGggPT09IDApO1xuXG4gIHJldHVybiBkaXJlY3RvcnlFbXB0eTtcbn1cblxuZnVuY3Rpb24gcmVhZERpcmVjdG9yeShhYnNvbHV0ZURpcmVjdG9yeVBhdGgpIHtcbiAgY29uc3Qgc3ViRW50cnlOYW1lcyA9IGZzLnJlYWRkaXJTeW5jKGFic29sdXRlRGlyZWN0b3J5UGF0aCk7XG5cbiAgcmV0dXJuIHN1YkVudHJ5TmFtZXM7XG59XG5cbmZ1bmN0aW9uIHJlYWRGaWxlKGFic29sdXRlRmlsZVBhdGgsIGVuY29kaW5nID0gJ3V0ZjgnKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoYWJzb2x1dGVGaWxlUGF0aCwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRmlsZShhYnNvbHV0ZUZpbGVQYXRoLCBjb250ZW50KSB7XG4gIGZzLndyaXRlRmlsZVN5bmMoYWJzb2x1dGVGaWxlUGF0aCwgY29udGVudCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbnRyeUV4aXN0czogZW50cnlFeGlzdHMsXG4gIGZpbGVFeGlzdHM6IGZpbGVFeGlzdHMsXG4gIGlzRW50cnlGaWxlOiBpc0VudHJ5RmlsZSxcbiAgZGlyZWN0b3J5RXhpc3RzOiBkaXJlY3RvcnlFeGlzdHMsXG4gIGlzRW50cnlEaXJlY3Rvcnk6IGlzRW50cnlEaXJlY3RvcnksXG4gIGlzRGlyZWN0b3J5RW1wdHk6IGlzRGlyZWN0b3J5RW1wdHksXG4gIHJlYWREaXJlY3Rvcnk6IHJlYWREaXJlY3RvcnksXG4gIHJlYWRGaWxlOiByZWFkRmlsZSxcbiAgd3JpdGVGaWxlOiB3cml0ZUZpbGVcbn07XG4iXX0=