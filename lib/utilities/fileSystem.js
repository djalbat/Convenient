'use strict';

var fs = require('fs');

function doesEntryExist(absolutePath) {
  var entryExists = fs.existsSync(absolutePath);

  return entryExists;
}

function doesFileExist(absoluteFilePath) {
  var fileExists = false;

  var absolutePath = absoluteFilePath,
      ///
  entryExists = doesEntryExist(absolutePath);

  if (entryExists) {
    var entryFile = isEntryFile(absolutePath);

    if (entryFile) {
      fileExists = true;
    }
  }

  return fileExists;
}

function doesDirectoryExist(absoluteDirectoryPath) {
  var directoryExists = false;

  var absolutePath = absoluteDirectoryPath,
      ///
  entryExists = doesEntryExist(absolutePath);

  if (entryExists) {
    var entryDirectory = isEntryDirectory(absolutePath);

    if (entryDirectory) {
      directoryExists = true;
    }
  }

  return directoryExists;
}

function isEntryFile(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory(),
      entryFile = !entryDirectory;

  return entryFile;
}

function isEntryDirectory(absolutePath) {
  var stat = fs.statSync(absolutePath),
      entryDirectory = stat.isDirectory();

  return entryDirectory;
}

function isDirectoryEmpty(absoluteDirectoryPath) {
  var subEntryNames = readDirectory(absoluteDirectoryPath),
      subEntryNamesLength = subEntryNames.length,
      directoryEmpty = subEntryNamesLength === 0;

  return directoryEmpty;
}

function readDirectory(absoluteDirectoryPath) {
  var subEntryNames = fs.readdirSync(absoluteDirectoryPath);

  return subEntryNames;
}

function readFile(absoluteFilePath) {
  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';

  var options = {
    encoding: encoding
  },
      content = fs.readFileSync(absoluteFilePath, options);

  return content;
}

function writeFile(absoluteFilePath, content) {
  fs.writeFileSync(absoluteFilePath, content);
}

module.exports = {
  doesEntryExist: doesEntryExist,
  doesFileExist: doesFileExist,
  doesDirectoryExist: doesDirectoryExist,
  isEntryFile: isEntryFile,
  isEntryDirectory: isEntryDirectory,
  isDirectoryEmpty: isDirectoryEmpty,
  readDirectory: readDirectory,
  readFile: readFile,
  writeFile: writeFile
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZmlsZVN5c3RlbS5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJkb2VzRW50cnlFeGlzdCIsImFic29sdXRlUGF0aCIsImVudHJ5RXhpc3RzIiwiZXhpc3RzU3luYyIsImRvZXNGaWxlRXhpc3QiLCJhYnNvbHV0ZUZpbGVQYXRoIiwiZmlsZUV4aXN0cyIsImVudHJ5RmlsZSIsImlzRW50cnlGaWxlIiwiZG9lc0RpcmVjdG9yeUV4aXN0IiwiYWJzb2x1dGVEaXJlY3RvcnlQYXRoIiwiZGlyZWN0b3J5RXhpc3RzIiwiZW50cnlEaXJlY3RvcnkiLCJpc0VudHJ5RGlyZWN0b3J5Iiwic3RhdCIsInN0YXRTeW5jIiwiaXNEaXJlY3RvcnkiLCJpc0RpcmVjdG9yeUVtcHR5Iiwic3ViRW50cnlOYW1lcyIsInJlYWREaXJlY3RvcnkiLCJzdWJFbnRyeU5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwiZGlyZWN0b3J5RW1wdHkiLCJyZWFkZGlyU3luYyIsInJlYWRGaWxlIiwiZW5jb2RpbmciLCJvcHRpb25zIiwiY29udGVudCIsInJlYWRGaWxlU3luYyIsIndyaXRlRmlsZSIsIndyaXRlRmlsZVN5bmMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxLQUFLQyxRQUFRLElBQVIsQ0FBWDs7QUFFQSxTQUFTQyxjQUFULENBQXdCQyxZQUF4QixFQUFzQztBQUNwQyxNQUFNQyxjQUFjSixHQUFHSyxVQUFILENBQWNGLFlBQWQsQ0FBcEI7O0FBRUEsU0FBT0MsV0FBUDtBQUNEOztBQUVELFNBQVNFLGFBQVQsQ0FBdUJDLGdCQUF2QixFQUF5QztBQUN2QyxNQUFJQyxhQUFhLEtBQWpCOztBQUVBLE1BQU1MLGVBQWVJLGdCQUFyQjtBQUFBLE1BQXVDO0FBQ2pDSCxnQkFBY0YsZUFBZUMsWUFBZixDQURwQjs7QUFHQSxNQUFJQyxXQUFKLEVBQWlCO0FBQ2YsUUFBTUssWUFBWUMsWUFBWVAsWUFBWixDQUFsQjs7QUFFQSxRQUFJTSxTQUFKLEVBQWU7QUFDYkQsbUJBQWEsSUFBYjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0EsVUFBUDtBQUNEOztBQUVELFNBQVNHLGtCQUFULENBQTRCQyxxQkFBNUIsRUFBbUQ7QUFDakQsTUFBSUMsa0JBQWtCLEtBQXRCOztBQUVBLE1BQU1WLGVBQWVTLHFCQUFyQjtBQUFBLE1BQTRDO0FBQ3RDUixnQkFBY0YsZUFBZUMsWUFBZixDQURwQjs7QUFHQSxNQUFJQyxXQUFKLEVBQWlCO0FBQ2YsUUFBTVUsaUJBQWlCQyxpQkFBaUJaLFlBQWpCLENBQXZCOztBQUVBLFFBQUlXLGNBQUosRUFBb0I7QUFDbEJELHdCQUFrQixJQUFsQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0EsZUFBUDtBQUNEOztBQUVELFNBQVNILFdBQVQsQ0FBcUJQLFlBQXJCLEVBQW1DO0FBQ2pDLE1BQU1hLE9BQU9oQixHQUFHaUIsUUFBSCxDQUFZZCxZQUFaLENBQWI7QUFBQSxNQUNJVyxpQkFBaUJFLEtBQUtFLFdBQUwsRUFEckI7QUFBQSxNQUVJVCxZQUFZLENBQUNLLGNBRmpCOztBQUlBLFNBQU9MLFNBQVA7QUFDRDs7QUFFRCxTQUFTTSxnQkFBVCxDQUEwQlosWUFBMUIsRUFBd0M7QUFDdEMsTUFBTWEsT0FBT2hCLEdBQUdpQixRQUFILENBQVlkLFlBQVosQ0FBYjtBQUFBLE1BQ01XLGlCQUFpQkUsS0FBS0UsV0FBTCxFQUR2Qjs7QUFHQSxTQUFPSixjQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssZ0JBQVQsQ0FBMEJQLHFCQUExQixFQUFpRDtBQUMvQyxNQUFNUSxnQkFBZ0JDLGNBQWNULHFCQUFkLENBQXRCO0FBQUEsTUFDTVUsc0JBQXNCRixjQUFjRyxNQUQxQztBQUFBLE1BRU1DLGlCQUFrQkYsd0JBQXdCLENBRmhEOztBQUlBLFNBQU9FLGNBQVA7QUFDRDs7QUFFRCxTQUFTSCxhQUFULENBQXVCVCxxQkFBdkIsRUFBOEM7QUFDNUMsTUFBTVEsZ0JBQWdCcEIsR0FBR3lCLFdBQUgsQ0FBZWIscUJBQWYsQ0FBdEI7O0FBRUEsU0FBT1EsYUFBUDtBQUNEOztBQUVELFNBQVNNLFFBQVQsQ0FBa0JuQixnQkFBbEIsRUFBdUQ7QUFBQSxNQUFuQm9CLFFBQW1CLHVFQUFSLE1BQVE7O0FBQ3JELE1BQU1DLFVBQVU7QUFDUkQsY0FBVUE7QUFERixHQUFoQjtBQUFBLE1BR01FLFVBQVU3QixHQUFHOEIsWUFBSCxDQUFnQnZCLGdCQUFoQixFQUFrQ3FCLE9BQWxDLENBSGhCOztBQUtBLFNBQU9DLE9BQVA7QUFDRDs7QUFFRCxTQUFTRSxTQUFULENBQW1CeEIsZ0JBQW5CLEVBQXFDc0IsT0FBckMsRUFBOEM7QUFDNUM3QixLQUFHZ0MsYUFBSCxDQUFpQnpCLGdCQUFqQixFQUFtQ3NCLE9BQW5DO0FBQ0Q7O0FBRURJLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmhDLGtCQUFnQkEsY0FERDtBQUVmSSxpQkFBZUEsYUFGQTtBQUdmSyxzQkFBb0JBLGtCQUhMO0FBSWZELGVBQWFBLFdBSkU7QUFLZkssb0JBQWtCQSxnQkFMSDtBQU1mSSxvQkFBa0JBLGdCQU5IO0FBT2ZFLGlCQUFlQSxhQVBBO0FBUWZLLFlBQVVBLFFBUks7QUFTZkssYUFBV0E7QUFUSSxDQUFqQiIsImZpbGUiOiJmaWxlU3lzdGVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbmZ1bmN0aW9uIGRvZXNFbnRyeUV4aXN0KGFic29sdXRlUGF0aCkge1xuICBjb25zdCBlbnRyeUV4aXN0cyA9IGZzLmV4aXN0c1N5bmMoYWJzb2x1dGVQYXRoKTtcblxuICByZXR1cm4gZW50cnlFeGlzdHM7XG59XG5cbmZ1bmN0aW9uIGRvZXNGaWxlRXhpc3QoYWJzb2x1dGVGaWxlUGF0aCkge1xuICBsZXQgZmlsZUV4aXN0cyA9IGZhbHNlO1xuICBcbiAgY29uc3QgYWJzb2x1dGVQYXRoID0gYWJzb2x1dGVGaWxlUGF0aCwgLy8vXG4gICAgICAgIGVudHJ5RXhpc3RzID0gZG9lc0VudHJ5RXhpc3QoYWJzb2x1dGVQYXRoKTtcbiAgXG4gIGlmIChlbnRyeUV4aXN0cykge1xuICAgIGNvbnN0IGVudHJ5RmlsZSA9IGlzRW50cnlGaWxlKGFic29sdXRlUGF0aCk7XG4gICAgXG4gICAgaWYgKGVudHJ5RmlsZSkge1xuICAgICAgZmlsZUV4aXN0cyA9IHRydWU7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gZmlsZUV4aXN0cztcbn1cblxuZnVuY3Rpb24gZG9lc0RpcmVjdG9yeUV4aXN0KGFic29sdXRlRGlyZWN0b3J5UGF0aCkge1xuICBsZXQgZGlyZWN0b3J5RXhpc3RzID0gZmFsc2U7XG5cbiAgY29uc3QgYWJzb2x1dGVQYXRoID0gYWJzb2x1dGVEaXJlY3RvcnlQYXRoLCAvLy9cbiAgICAgICAgZW50cnlFeGlzdHMgPSBkb2VzRW50cnlFeGlzdChhYnNvbHV0ZVBhdGgpO1xuXG4gIGlmIChlbnRyeUV4aXN0cykge1xuICAgIGNvbnN0IGVudHJ5RGlyZWN0b3J5ID0gaXNFbnRyeURpcmVjdG9yeShhYnNvbHV0ZVBhdGgpO1xuXG4gICAgaWYgKGVudHJ5RGlyZWN0b3J5KSB7XG4gICAgICBkaXJlY3RvcnlFeGlzdHMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkaXJlY3RvcnlFeGlzdHM7XG59XG5cbmZ1bmN0aW9uIGlzRW50cnlGaWxlKGFic29sdXRlUGF0aCkge1xuICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMoYWJzb2x1dGVQYXRoKSxcbiAgICAgIGVudHJ5RGlyZWN0b3J5ID0gc3RhdC5pc0RpcmVjdG9yeSgpLFxuICAgICAgZW50cnlGaWxlID0gIWVudHJ5RGlyZWN0b3J5O1xuXG4gIHJldHVybiBlbnRyeUZpbGU7XG59XG5cbmZ1bmN0aW9uIGlzRW50cnlEaXJlY3RvcnkoYWJzb2x1dGVQYXRoKSB7XG4gIGNvbnN0IHN0YXQgPSBmcy5zdGF0U3luYyhhYnNvbHV0ZVBhdGgpLFxuICAgICAgICBlbnRyeURpcmVjdG9yeSA9IHN0YXQuaXNEaXJlY3RvcnkoKTtcblxuICByZXR1cm4gZW50cnlEaXJlY3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGlzRGlyZWN0b3J5RW1wdHkoYWJzb2x1dGVEaXJlY3RvcnlQYXRoKSB7XG4gIGNvbnN0IHN1YkVudHJ5TmFtZXMgPSByZWFkRGlyZWN0b3J5KGFic29sdXRlRGlyZWN0b3J5UGF0aCksXG4gICAgICAgIHN1YkVudHJ5TmFtZXNMZW5ndGggPSBzdWJFbnRyeU5hbWVzLmxlbmd0aCxcbiAgICAgICAgZGlyZWN0b3J5RW1wdHkgPSAoc3ViRW50cnlOYW1lc0xlbmd0aCA9PT0gMCk7XG5cbiAgcmV0dXJuIGRpcmVjdG9yeUVtcHR5O1xufVxuXG5mdW5jdGlvbiByZWFkRGlyZWN0b3J5KGFic29sdXRlRGlyZWN0b3J5UGF0aCkge1xuICBjb25zdCBzdWJFbnRyeU5hbWVzID0gZnMucmVhZGRpclN5bmMoYWJzb2x1dGVEaXJlY3RvcnlQYXRoKTtcblxuICByZXR1cm4gc3ViRW50cnlOYW1lcztcbn1cblxuZnVuY3Rpb24gcmVhZEZpbGUoYWJzb2x1dGVGaWxlUGF0aCwgZW5jb2RpbmcgPSAndXRmOCcpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICBlbmNvZGluZzogZW5jb2RpbmdcbiAgICAgICAgfSxcbiAgICAgICAgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhhYnNvbHV0ZUZpbGVQYXRoLCBvcHRpb25zKTtcblxuICByZXR1cm4gY29udGVudDtcbn1cblxuZnVuY3Rpb24gd3JpdGVGaWxlKGFic29sdXRlRmlsZVBhdGgsIGNvbnRlbnQpIHtcbiAgZnMud3JpdGVGaWxlU3luYyhhYnNvbHV0ZUZpbGVQYXRoLCBjb250ZW50KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRvZXNFbnRyeUV4aXN0OiBkb2VzRW50cnlFeGlzdCxcbiAgZG9lc0ZpbGVFeGlzdDogZG9lc0ZpbGVFeGlzdCxcbiAgZG9lc0RpcmVjdG9yeUV4aXN0OiBkb2VzRGlyZWN0b3J5RXhpc3QsXG4gIGlzRW50cnlGaWxlOiBpc0VudHJ5RmlsZSxcbiAgaXNFbnRyeURpcmVjdG9yeTogaXNFbnRyeURpcmVjdG9yeSxcbiAgaXNEaXJlY3RvcnlFbXB0eTogaXNEaXJlY3RvcnlFbXB0eSxcbiAgcmVhZERpcmVjdG9yeTogcmVhZERpcmVjdG9yeSxcbiAgcmVhZEZpbGU6IHJlYWRGaWxlLFxuICB3cml0ZUZpbGU6IHdyaXRlRmlsZVxufTtcbiJdfQ==