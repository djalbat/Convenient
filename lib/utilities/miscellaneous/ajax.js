'use strict';

var GET_METHOD = 'GET',
    POST_METHOD = 'POST';

function get(host, uri, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///
    parameters = {};
  }

  var method = GET_METHOD,
      body = undefined;

  request(host, uri, parameters, method, body, callback);
}

function post(host, uri, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///
    parameters = {};
  }

  var method = POST_METHOD,
      body = JSON.stringify(json);

  request(host, uri, parameters, method, body, callback);
}

module.exports = {
  get: get,
  post: post
};

function request(host, uri, parameters, method, body, callback) {
  var url = urlFromHostURIAndParameters(host, uri, parameters),
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;


    if (readyState == 4) {
      if (status == 200) {
        var jsonString = responseText,
            ///
        json = JSON.parse(jsonString);

        callback(json);
      } else {
        callback(null);
      }
    }
  };

  xmlHttpRequest.open(method, url, true);

  xmlHttpRequest.send(body);
}

function urlFromHostURIAndParameters(host, uri, parameters) {
  var queryString = queryStringFromParameters(parameters),
      url = queryString === '' ? '' + host + uri : '' + host + uri + '?' + queryString;

  return url;
}

function queryStringFromParameters(parameters) {
  var names = Object.keys(parameters),
      namesLength = names.length,
      lastIndex = namesLength - 1,
      queryString = names.reduce(function (queryString, name, index) {
    var value = parameters[name],
        encodedName = encodeURIComponent(name),
        encodedValue = encodeURIComponent(value),
        ampersandOrNothing = index !== lastIndex ? '&' : '';

    queryString += encodedName + '=' + encodedValue + ampersandOrNothing;

    return queryString;
  }, '');

  return queryString;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi91dGlsaXRpZXMvbWlzY2VsbGFuZW91cy9hamF4LmpzIl0sIm5hbWVzIjpbIkdFVF9NRVRIT0QiLCJQT1NUX01FVEhPRCIsImdldCIsImhvc3QiLCJ1cmkiLCJwYXJhbWV0ZXJzIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJtZXRob2QiLCJib2R5IiwicmVxdWVzdCIsInBvc3QiLCJqc29uIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1cmwiLCJ1cmxGcm9tSG9zdFVSSUFuZFBhcmFtZXRlcnMiLCJ4bWxIdHRwUmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsImpzb25TdHJpbmciLCJwYXJzZSIsIm9wZW4iLCJzZW5kIiwicXVlcnlTdHJpbmciLCJxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzIiwibmFtZXMiLCJPYmplY3QiLCJrZXlzIiwibmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJsYXN0SW5kZXgiLCJyZWR1Y2UiLCJuYW1lIiwiaW5kZXgiLCJ2YWx1ZSIsImVuY29kZWROYW1lIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlZFZhbHVlIiwiYW1wZXJzYW5kT3JOb3RoaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxhQUFhLEtBQW5CO0FBQUEsSUFDTUMsY0FBYyxNQURwQjs7QUFHQSxTQUFTQyxHQUFULENBQWFDLElBQWIsRUFBbUJDLEdBQW5CLEVBQXdCQyxVQUF4QixFQUFvQ0MsUUFBcEMsRUFBOEM7QUFDNUMsTUFBSUEsYUFBYUMsU0FBakIsRUFBNEI7QUFDMUJELGVBQVdELFVBQVgsQ0FEMEIsQ0FDSDtBQUN2QkEsaUJBQWEsRUFBYjtBQUNEOztBQUVELE1BQU1HLFNBQVNSLFVBQWY7QUFBQSxNQUNNUyxPQUFPRixTQURiOztBQUdBRyxVQUFRUCxJQUFSLEVBQWNDLEdBQWQs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ZmlsZSI6ImFqYXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEdFVF9NRVRIT0QgPSAnR0VUJyxcbiAgICAgIFBPU1RfTUVUSE9EID0gJ1BPU1QnO1xuXG5mdW5jdGlvbiBnZXQoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gcGFyYW1ldGVyczsgLy8vXG4gICAgcGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gR0VUX01FVEhPRCxcbiAgICAgICAgYm9keSA9IHVuZGVmaW5lZDtcblxuICByZXF1ZXN0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIHBvc3QoaG9zdCwgdXJpLCBqc29uLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gcGFyYW1ldGVyczsgLy8vXG4gICAgcGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gUE9TVF9NRVRIT0QsXG4gICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShqc29uKTtcblxuICByZXF1ZXN0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXQsXG4gIHBvc3Rcbn07XG5cbmZ1bmN0aW9uIHJlcXVlc3QoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHVybCA9IHVybEZyb21Ib3N0VVJJQW5kUGFyYW1ldGVycyhob3N0LCB1cmksIHBhcmFtZXRlcnMpLFxuICAgICAgICB4bWxIdHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gIHhtbEh0dHBSZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHsgcmVhZHlTdGF0ZSwgc3RhdHVzLCByZXNwb25zZVRleHQgfSA9IHhtbEh0dHBSZXF1ZXN0O1xuXG4gICAgaWYgKHJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgY29uc3QganNvblN0cmluZyA9IHJlc3BvbnNlVGV4dCwgLy8vXG4gICAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb25TdHJpbmcpO1xuXG4gICAgICAgIGNhbGxiYWNrKGpzb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHhtbEh0dHBSZXF1ZXN0Lm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuXG4gIHhtbEh0dHBSZXF1ZXN0LnNlbmQoYm9keSk7XG59XG5cbmZ1bmN0aW9uIHVybEZyb21Ib3N0VVJJQW5kUGFyYW1ldGVycyhob3N0LCB1cmksIHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzKHBhcmFtZXRlcnMpLFxuICAgICAgICB1cmwgPSAocXVlcnlTdHJpbmcgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgYCR7aG9zdH0ke3VyaX1gIDpcbiAgICAgICAgICAgICAgICAgIGAke2hvc3R9JHt1cml9PyR7cXVlcnlTdHJpbmd9YDtcblxuICByZXR1cm4gdXJsO1xufVxuXG5mdW5jdGlvbiBxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzKHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKSxcbiAgICAgICAgbmFtZXNMZW5ndGggPSBuYW1lcy5sZW5ndGgsXG4gICAgICAgIGxhc3RJbmRleCA9IG5hbWVzTGVuZ3RoIC0gMSxcbiAgICAgICAgcXVlcnlTdHJpbmcgPSBuYW1lcy5yZWR1Y2UoZnVuY3Rpb24ocXVlcnlTdHJpbmcsIG5hbWUsIGluZGV4KSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJhbWV0ZXJzW25hbWVdLFxuICAgICAgICAgICAgICAgIGVuY29kZWROYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpLFxuICAgICAgICAgICAgICAgIGVuY29kZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSksXG4gICAgICAgICAgICAgICAgYW1wZXJzYW5kT3JOb3RoaW5nID0gKGluZGV4ICE9PSBsYXN0SW5kZXgpID8gJyYnIDogJyc7XG4gIFxuICAgICAgICAgIHF1ZXJ5U3RyaW5nICs9IGAke2VuY29kZWROYW1lfT0ke2VuY29kZWRWYWx1ZX0ke2FtcGVyc2FuZE9yTm90aGluZ31gO1xuICBcbiAgICAgICAgICByZXR1cm4gcXVlcnlTdHJpbmc7XG4gICAgICAgIH0sICcnKTtcblxuICByZXR1cm4gcXVlcnlTdHJpbmc7XG59XG4iXX0=