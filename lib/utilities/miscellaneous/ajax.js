"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.post = post;
exports.request = request;

var _constants = require("../../constants");

function get(host, path, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.GET_METHOD,
      body = undefined;
  request(host, path, parameters, method, body, callback);
}

function post(host, path, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.POST_METHOD,
      body = JSON.stringify(json);
  request(host, path, parameters, method, body, callback);
}

function request(host, path, parameters, method, body, callback) {
  var url = urlFromHostPathAndParameters(host, path, parameters),
      accept = _constants.APPLICATION_JSON_ACCEPT,
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;

    if (readyState == 4) {
      var json = null;

      if (status == 200) {
        var jsonString = responseText; ///

        try {
          json = JSON.parse(jsonString);
        } catch (error) {///
        }
      }

      callback(json);
    }
  };

  xmlHttpRequest.open(method, url);
  xmlHttpRequest.setRequestHeader("accept", accept);

  if (method === _constants.POST_METHOD) {
    var contentType = _constants.APPLICATION_JSON_CONTENT_TYPE;
    xmlHttpRequest.setRequestHeader("content-type", contentType);
  }

  xmlHttpRequest.send(body);
}

function queryStringFromParameters(parameters) {
  var names = Object.keys(parameters),
      namesLength = names.length,
      lastIndex = namesLength - 1,
      queryString = names.reduce(function (queryString, name, index) {
    var value = parameters[name],
        encodedName = encodeURIComponent(name),
        encodedValue = encodeURIComponent(value),
        ampersandOrNothing = index !== lastIndex ? "&" : "";
    queryString += "".concat(encodedName, "=").concat(encodedValue).concat(ampersandOrNothing);
    return queryString;
  }, "");
  return queryString;
}

function urlFromHostPathAndParameters(host, path, parameters) {
  var queryString = queryStringFromParameters(parameters),
      url = queryString === "" ? "".concat(host).concat(path) : "".concat(host).concat(path, "?").concat(queryString);
  return url;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXguanMiXSwibmFtZXMiOlsiZ2V0IiwiaG9zdCIsInBhdGgiLCJwYXJhbWV0ZXJzIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJtZXRob2QiLCJHRVRfTUVUSE9EIiwiYm9keSIsInJlcXVlc3QiLCJwb3N0IiwianNvbiIsIlBPU1RfTUVUSE9EIiwiSlNPTiIsInN0cmluZ2lmeSIsInVybCIsInVybEZyb21Ib3N0UGF0aEFuZFBhcmFtZXRlcnMiLCJhY2NlcHQiLCJBUFBMSUNBVElPTl9KU09OX0FDQ0VQVCIsInhtbEh0dHBSZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwianNvblN0cmluZyIsInBhcnNlIiwiZXJyb3IiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsImNvbnRlbnRUeXBlIiwiQVBQTElDQVRJT05fSlNPTl9DT05URU5UX1RZUEUiLCJzZW5kIiwicXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVycyIsIm5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsIm5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwibGFzdEluZGV4IiwicXVlcnlTdHJpbmciLCJyZWR1Y2UiLCJuYW1lIiwiaW5kZXgiLCJ2YWx1ZSIsImVuY29kZWROYW1lIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlZFZhbHVlIiwiYW1wZXJzYW5kT3JOb3RoaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBRUE7O0FBRU8sU0FBU0EsR0FBVCxDQUFhQyxJQUFiLEVBQW1CQyxJQUFuQixFQUF5QkMsVUFBekIsRUFBcUNDLFFBQXJDLEVBQStDO0FBQ3BELE1BQUlBLFFBQVEsS0FBS0MsU0FBakIsRUFBNEI7QUFDMUJELElBQUFBLFFBQVEsR0FBR0QsVUFBWCxDQUQwQixDQUNIOztBQUN2QkEsSUFBQUEsVUFBVSxHQUFHLEVBQWI7QUFDRDs7QUFFRCxNQUFNRyxNQUFNLEdBQUdDLHFC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UUFDTUcsV0FBVyxHQUFHQyxrQkFBa0IsQ0FBQ0osSUFBRCxDQUR0QztBQUFBLFFBRU1LLFlBQVksR0FBR0Qsa0JBQWtCLENBQUNGLEtBQUQsQ0FGdkM7QUFBQSxRQUdNSSxrQkFBa0IsR0FBSUwsS0FBSyxLQUFLSixTQUFYLEdBQXdCLEdBQXhCLEdBQThCLEVBSHpEO0FBS0FDLElBQUFBLFdBQVcsY0FBT0ssV0FBUCxjQUFzQkUsWUFBdEIsU0FBcUNDLGtCQUFyQyxDQUFYO0FBRUEsV0FBT1IsV0FBUDtBQUNELEdBVGEsRUFTWCxFQVRXLENBSHBCO0FBY0EsU0FBT0EsV0FBUDtBQUNEOztBQUVELFNBQVN4Qiw0QkFBVCxDQUFzQ2YsSUFBdEMsRUFBNENDLElBQTVDLEVBQWtEQyxVQUFsRCxFQUE4RDtBQUM1RCxNQUFNcUMsV0FBVyxHQUFHUCx5QkFBeUIsQ0FBQzlCLFVBQUQsQ0FBN0M7QUFBQSxNQUNNWSxHQUFHLEdBQUl5QixXQUFXLEtBQUssRUFBakIsYUFDR3ZDLElBREgsU0FDVUMsSUFEVixjQUVLRCxJQUZMLFNBRVlDLElBRlosY0FFb0JzQyxXQUZwQixDQURaO0FBS0EsU0FBT3pCLEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBHRVRfTUVUSE9ELCBQT1NUX01FVEhPRCwgQVBQTElDQVRJT05fSlNPTl9BQ0NFUFQsIEFQUExJQ0FUSU9OX0pTT05fQ09OVEVOVF9UWVBFIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KGhvc3QsIHBhdGgsIHBhcmFtZXRlcnMsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FsbGJhY2sgPSBwYXJhbWV0ZXJzOyAvLy9cbiAgICBwYXJhbWV0ZXJzID0ge307XG4gIH1cblxuICBjb25zdCBtZXRob2QgPSBHRVRfTUVUSE9ELFxuICAgICAgICBib2R5ID0gdW5kZWZpbmVkO1xuXG4gIHJlcXVlc3QoaG9zdCwgcGF0aCwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3N0KGhvc3QsIHBhdGgsIGpzb24sIHBhcmFtZXRlcnMsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FsbGJhY2sgPSBwYXJhbWV0ZXJzOyAvLy9cbiAgICBwYXJhbWV0ZXJzID0ge307XG4gIH1cblxuICBjb25zdCBtZXRob2QgPSBQT1NUX01FVEhPRCxcbiAgICAgICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KGpzb24pO1xuXG4gIHJlcXVlc3QoaG9zdCwgcGF0aCwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXF1ZXN0KGhvc3QsIHBhdGgsIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spIHtcbiAgY29uc3QgdXJsID0gdXJsRnJvbUhvc3RQYXRoQW5kUGFyYW1ldGVycyhob3N0LCBwYXRoLCBwYXJhbWV0ZXJzKSxcbiAgICAgICAgYWNjZXB0ID0gQVBQTElDQVRJT05fSlNPTl9BQ0NFUFQsXG4gICAgICAgIHhtbEh0dHBSZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgeG1sSHR0cFJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVhZHlTdGF0ZSwgc3RhdHVzLCByZXNwb25zZVRleHQgfSA9IHhtbEh0dHBSZXF1ZXN0O1xuXG4gICAgaWYgKHJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgbGV0IGpzb24gPSBudWxsO1xuXG4gICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuICAgICAgICBjb25zdCBqc29uU3RyaW5nID0gcmVzcG9uc2VUZXh0OyAvLy9cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb25TdHJpbmcpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIC8vL1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKGpzb24pO1xuICAgIH1cbiAgfTtcblxuICB4bWxIdHRwUmVxdWVzdC5vcGVuKG1ldGhvZCwgdXJsKTtcblxuICB4bWxIdHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKFwiYWNjZXB0XCIsIGFjY2VwdCk7XG5cbiAgaWYgKG1ldGhvZCA9PT0gUE9TVF9NRVRIT0QpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IEFQUExJQ0FUSU9OX0pTT05fQ09OVEVOVF9UWVBFO1xuXG4gICAgeG1sSHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihcImNvbnRlbnQtdHlwZVwiLCBjb250ZW50VHlwZSk7XG4gIH1cblxuICB4bWxIdHRwUmVxdWVzdC5zZW5kKGJvZHkpO1xufVxuXG5mdW5jdGlvbiBxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzKHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKSxcbiAgICAgICAgbmFtZXNMZW5ndGggPSBuYW1lcy5sZW5ndGgsXG4gICAgICAgIGxhc3RJbmRleCA9IG5hbWVzTGVuZ3RoIC0gMSxcbiAgICAgICAgcXVlcnlTdHJpbmcgPSBuYW1lcy5yZWR1Y2UoKHF1ZXJ5U3RyaW5nLCBuYW1lLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1ldGVyc1tuYW1lXSxcbiAgICAgICAgICAgICAgICBlbmNvZGVkTmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSxcbiAgICAgICAgICAgICAgICBlbmNvZGVkVmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLFxuICAgICAgICAgICAgICAgIGFtcGVyc2FuZE9yTm90aGluZyA9IChpbmRleCAhPT0gbGFzdEluZGV4KSA/IFwiJlwiIDogXCJcIjtcbiAgXG4gICAgICAgICAgcXVlcnlTdHJpbmcgKz0gYCR7ZW5jb2RlZE5hbWV9PSR7ZW5jb2RlZFZhbHVlfSR7YW1wZXJzYW5kT3JOb3RoaW5nfWA7XG4gIFxuICAgICAgICAgIHJldHVybiBxdWVyeVN0cmluZztcbiAgICAgICAgfSwgXCJcIik7XG5cbiAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xufVxuXG5mdW5jdGlvbiB1cmxGcm9tSG9zdFBhdGhBbmRQYXJhbWV0ZXJzKGhvc3QsIHBhdGgsIHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzKHBhcmFtZXRlcnMpLFxuICAgICAgICB1cmwgPSAocXVlcnlTdHJpbmcgPT09IFwiXCIpID9cbiAgICAgICAgICAgICAgYCR7aG9zdH0ke3BhdGh9YCA6XG4gICAgICAgICAgICAgICAgYCR7aG9zdH0ke3BhdGh9PyR7cXVlcnlTdHJpbmd9YDtcblxuICByZXR1cm4gdXJsO1xufVxuIl19