"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.post = post;

var _constants = require("../../constants");

function get(host, uri, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.GET_METHOD,
      body = undefined;
  request(host, uri, parameters, method, body, callback);
}

function post(host, uri, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.POST_METHOD,
      body = JSON.stringify(json);
  request(host, uri, parameters, method, body, callback);
}

function request(host, uri, parameters, method, body, callback) {
  var url = urlFromHostURIAndParameters(host, uri, parameters),
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;

    if (readyState == 4) {
      var json = null;

      if (status == 200) {
        var jsonString = responseText; ///

        try {
          json = JSON.parse(jsonString);
        } catch (error) {///
        }

        callback(json);
      }
    }
  };

  var contentType = _constants.APPLICATION_JSON_CHARSET_UTF8_CONTENT_TYPE;
  xmlHttpRequest.open(method, url);
  xmlHttpRequest.setRequestHeader("content-type", contentType);
  xmlHttpRequest.send(body);
}

function queryStringFromParameters(parameters) {
  var names = Object.keys(parameters),
      namesLength = names.length,
      lastIndex = namesLength - 1,
      queryString = names.reduce(function (queryString, name, index) {
    var value = parameters[name],
        encodedName = encodeURIComponent(name),
        encodedValue = encodeURIComponent(value),
        ampersandOrNothing = index !== lastIndex ? "&" : "";
    queryString += "".concat(encodedName, "=").concat(encodedValue).concat(ampersandOrNothing);
    return queryString;
  }, "");
  return queryString;
}

function urlFromHostURIAndParameters(host, uri, parameters) {
  var queryString = queryStringFromParameters(parameters),
      url = queryString === "" ? "".concat(host).concat(uri) : "".concat(host).concat(uri, "?").concat(queryString);
  return url;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXguanMiXSwibmFtZXMiOlsiZ2V0IiwiaG9zdCIsInVyaSIsInBhcmFtZXRlcnMiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsIm1ldGhvZCIsIkdFVF9NRVRIT0QiLCJib2R5IiwicmVxdWVzdCIsInBvc3QiLCJqc29uIiwiUE9TVF9NRVRIT0QiLCJKU09OIiwic3RyaW5naWZ5IiwidXJsIiwidXJsRnJvbUhvc3RVUklBbmRQYXJhbWV0ZXJzIiwieG1sSHR0cFJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJqc29uU3RyaW5nIiwicGFyc2UiLCJlcnJvciIsImNvbnRlbnRUeXBlIiwiQVBQTElDQVRJT05fSlNPTl9DSEFSU0VUX1VURjhfQ09OVEVOVF9UWVBFIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwicXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVycyIsIm5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsIm5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwibGFzdEluZGV4IiwicXVlcnlTdHJpbmciLCJyZWR1Y2UiLCJuYW1lIiwiaW5kZXgiLCJ2YWx1ZSIsImVuY29kZWROYW1lIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlZFZhbHVlIiwiYW1wZXJzYW5kT3JOb3RoaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQTs7QUFFTyxTQUFTQSxHQUFULENBQWFDLElBQWIsRUFBbUJDLEdBQW5CLEVBQXdCQyxVQUF4QixFQUFvQ0MsUUFBcEMsRUFBOEM7QUFDbkQsTUFBSUEsUUFBUSxLQUFLQyxTQUFqQixFQUE0QjtBQUMxQkQsSUFBQUEsUUFBUSxHQUFHRCxVQUFYLENBRDBCLENBQ0g7O0FBQ3ZCQSxJQUFBQSxVQUFVLEdBQUcsRUFBYjtBQUNEOztBQUVELE1BQU1HLE1BQU0sR0FBR0MscUJBQWY7QUFBQSxNQUNNQyxJQUFJLEdBQUdI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O0FBS0FDLElBQUFBLFdBQVcsY0FBT0ssV0FBUCxjQUFzQkUsWUFBdEIsU0FBcUNDLGtCQUFyQyxDQUFYO0FBRUEsV0FBT1IsV0FBUDtBQUNELEdBVGEsRUFTWCxFQVRXLENBSHBCO0FBY0EsU0FBT0EsV0FBUDtBQUNEOztBQUVELFNBQVN0QiwyQkFBVCxDQUFxQ2YsSUFBckMsRUFBMkNDLEdBQTNDLEVBQWdEQyxVQUFoRCxFQUE0RDtBQUMxRCxNQUFNbUMsV0FBVyxHQUFHUCx5QkFBeUIsQ0FBQzVCLFVBQUQsQ0FBN0M7QUFBQSxNQUNNWSxHQUFHLEdBQUl1QixXQUFXLEtBQUssRUFBakIsYUFDR3JDLElBREgsU0FDVUMsR0FEVixjQUVLRCxJQUZMLFNBRVlDLEdBRlosY0FFbUJvQyxXQUZuQixDQURaO0FBS0EsU0FBT3ZCLEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBHRVRfTUVUSE9ELCBQT1NUX01FVEhPRCwgQVBQTElDQVRJT05fSlNPTl9DSEFSU0VUX1VURjhfQ09OVEVOVF9UWVBFIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IHBhcmFtZXRlcnM7IC8vL1xuICAgIHBhcmFtZXRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IEdFVF9NRVRIT0QsXG4gICAgICAgIGJvZHkgPSB1bmRlZmluZWQ7XG5cbiAgcmVxdWVzdChob3N0LCB1cmksIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zdChob3N0LCB1cmksIGpzb24sIHBhcmFtZXRlcnMsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FsbGJhY2sgPSBwYXJhbWV0ZXJzOyAvLy9cbiAgICBwYXJhbWV0ZXJzID0ge307XG4gIH1cblxuICBjb25zdCBtZXRob2QgPSBQT1NUX01FVEhPRCxcbiAgICAgICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KGpzb24pO1xuXG4gIHJlcXVlc3QoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gcmVxdWVzdChob3N0LCB1cmksIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spIHtcbiAgY29uc3QgdXJsID0gdXJsRnJvbUhvc3RVUklBbmRQYXJhbWV0ZXJzKGhvc3QsIHVyaSwgcGFyYW1ldGVycyksXG4gICAgICAgIHhtbEh0dHBSZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgeG1sSHR0cFJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVhZHlTdGF0ZSwgc3RhdHVzLCByZXNwb25zZVRleHQgfSA9IHhtbEh0dHBSZXF1ZXN0O1xuXG4gICAgaWYgKHJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgbGV0IGpzb24gPSBudWxsO1xuXG4gICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuICAgICAgICBjb25zdCBqc29uU3RyaW5nID0gcmVzcG9uc2VUZXh0OyAvLy9cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb25TdHJpbmcpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIC8vL1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2soanNvbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNvbnRlbnRUeXBlID0gQVBQTElDQVRJT05fSlNPTl9DSEFSU0VUX1VURjhfQ09OVEVOVF9UWVBFO1xuXG4gIHhtbEh0dHBSZXF1ZXN0Lm9wZW4obWV0aG9kLCB1cmwpO1xuXG4gIHhtbEh0dHBSZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoXCJjb250ZW50LXR5cGVcIiwgY29udGVudFR5cGUpO1xuXG4gIHhtbEh0dHBSZXF1ZXN0LnNlbmQoYm9keSk7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLFxuICAgICAgICBuYW1lc0xlbmd0aCA9IG5hbWVzLmxlbmd0aCxcbiAgICAgICAgbGFzdEluZGV4ID0gbmFtZXNMZW5ndGggLSAxLFxuICAgICAgICBxdWVyeVN0cmluZyA9IG5hbWVzLnJlZHVjZSgocXVlcnlTdHJpbmcsIG5hbWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJhbWV0ZXJzW25hbWVdLFxuICAgICAgICAgICAgICAgIGVuY29kZWROYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpLFxuICAgICAgICAgICAgICAgIGVuY29kZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSksXG4gICAgICAgICAgICAgICAgYW1wZXJzYW5kT3JOb3RoaW5nID0gKGluZGV4ICE9PSBsYXN0SW5kZXgpID8gXCImXCIgOiBcIlwiO1xuICBcbiAgICAgICAgICBxdWVyeVN0cmluZyArPSBgJHtlbmNvZGVkTmFtZX09JHtlbmNvZGVkVmFsdWV9JHthbXBlcnNhbmRPck5vdGhpbmd9YDtcbiAgXG4gICAgICAgICAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xuICAgICAgICB9LCBcIlwiKTtcblxuICByZXR1cm4gcXVlcnlTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHVybEZyb21Ib3N0VVJJQW5kUGFyYW1ldGVycyhob3N0LCB1cmksIHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzKHBhcmFtZXRlcnMpLFxuICAgICAgICB1cmwgPSAocXVlcnlTdHJpbmcgPT09IFwiXCIpID9cbiAgICAgICAgICAgICAgYCR7aG9zdH0ke3VyaX1gIDpcbiAgICAgICAgICAgICAgICBgJHtob3N0fSR7dXJpfT8ke3F1ZXJ5U3RyaW5nfWA7XG5cbiAgcmV0dXJuIHVybDtcbn1cbiJdfQ==