'use strict';

var GET_METHOD = 'GET',
    POST_METHOD = 'POST';

function get(host, uri, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///
    parameters = {};
  }

  var method = GET_METHOD,
      body = undefined;

  request(host, uri, parameters, method, body, callback);
}

function post(host, uri, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///
    parameters = {};
  }

  var method = POST_METHOD,
      body = JSON.stringify(json);

  request(host, uri, parameters, method, body, callback);
}

module.exports = {
  get: get,
  post: post
};

function request(host, uri, parameters, method, body, callback) {
  var url = urlFromHostURIAndParameters(host, uri, parameters),
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;


    if (readyState == 4) {
      if (status == 200) {
        var jsonString = responseText,
            ///
        json = JSON.parse(jsonString);

        callback(json);
      } else {
        callback(null);
      }
    }
  };

  xmlHttpRequest.open(method, url, true);

  xmlHttpRequest.setRequestHeader('content-type', 'application/json;charset=UTF-8');

  xmlHttpRequest.send(body);
}

function urlFromHostURIAndParameters(host, uri, parameters) {
  var queryString = queryStringFromParameters(parameters),
      url = queryString === '' ? '' + host + uri : '' + host + uri + '?' + queryString;

  return url;
}

function queryStringFromParameters(parameters) {
  var names = Object.keys(parameters),
      namesLength = names.length,
      lastIndex = namesLength - 1,
      queryString = names.reduce(function (queryString, name, index) {
    var value = parameters[name],
        encodedName = encodeURIComponent(name),
        encodedValue = encodeURIComponent(value),
        ampersandOrNothing = index !== lastIndex ? '&' : '';

    queryString += encodedName + '=' + encodedValue + ampersandOrNothing;

    return queryString;
  }, '');

  return queryString;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi91dGlsaXRpZXMvbWlzY2VsbGFuZW91cy9hamF4LmpzIl0sIm5hbWVzIjpbIkdFVF9NRVRIT0QiLCJQT1NUX01FVEhPRCIsImdldCIsImhvc3QiLCJ1cmkiLCJwYXJhbWV0ZXJzIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJtZXRob2QiLCJib2R5IiwicmVxdWVzdCIsInBvc3QiLCJqc29uIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1cmwiLCJ1cmxGcm9tSG9zdFVSSUFuZFBhcmFtZXRlcnMiLCJ4bWxIdHRwUmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsImpzb25TdHJpbmciLCJwYXJzZSIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInF1ZXJ5U3RyaW5nIiwicXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVycyIsIm5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsIm5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwibGFzdEluZGV4IiwicmVkdWNlIiwibmFtZSIsImluZGV4IiwidmFsdWUiLCJlbmNvZGVkTmFtZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImVuY29kZWRWYWx1ZSIsImFtcGVyc2FuZE9yTm90aGluZyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsYUFBYSxLQUFuQjtBQUFBLElBQ01DLGNBQWMsTUFEcEI7O0FBR0EsU0FBU0MsR0FBVCxDQUFhQyxJQUFiLEVBQW1CQyxHQUFuQixFQUF3QkMsVUFBeEIsRUFBb0NDLFFBQXBDLEVBQThDO0FBQzVDLE1BQUlBLGFBQWFDLFNBQWpCLEVBQTRCO0FBQzFCRCxlQUFXRCxVQUFYLENBRDBCLENBQ0g7QUFDdkJBLGlCQUFhLEVBQWI7QUFDRDs7QUFFRCxNQUFNRyxTQUFTUixVQUFmO0FBQUEsTUFDTVMsT0FBT0YsU0FEYjs7QUFHQUcsVUFB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RUEsV0FBT2YsV0FBUDtBQUNELEdBVGEsRUFTWCxFQVRXLENBSHBCOztBQWNBLFNBQU9BLFdBQVA7QUFDRCIsImZpbGUiOiJhamF4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBHRVRfTUVUSE9EID0gJ0dFVCcsXG4gICAgICBQT1NUX01FVEhPRCA9ICdQT1NUJztcblxuZnVuY3Rpb24gZ2V0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IHBhcmFtZXRlcnM7IC8vL1xuICAgIHBhcmFtZXRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IEdFVF9NRVRIT0QsXG4gICAgICAgIGJvZHkgPSB1bmRlZmluZWQ7XG5cbiAgcmVxdWVzdChob3N0LCB1cmksIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBwb3N0KGhvc3QsIHVyaSwganNvbiwgcGFyYW1ldGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IHBhcmFtZXRlcnM7IC8vL1xuICAgIHBhcmFtZXRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IFBPU1RfTUVUSE9ELFxuICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoanNvbik7XG5cbiAgcmVxdWVzdChob3N0LCB1cmksIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0LFxuICBwb3N0XG59O1xuXG5mdW5jdGlvbiByZXF1ZXN0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjaykge1xuICBjb25zdCB1cmwgPSB1cmxGcm9tSG9zdFVSSUFuZFBhcmFtZXRlcnMoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzKSxcbiAgICAgICAgeG1sSHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICB4bWxIdHRwUmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCB7IHJlYWR5U3RhdGUsIHN0YXR1cywgcmVzcG9uc2VUZXh0IH0gPSB4bWxIdHRwUmVxdWVzdDtcblxuICAgIGlmIChyZWFkeVN0YXRlID09IDQpIHtcbiAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgIGNvbnN0IGpzb25TdHJpbmcgPSByZXNwb25zZVRleHQsIC8vL1xuICAgICAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcblxuICAgICAgICBjYWxsYmFjayhqc29uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB4bWxIdHRwUmVxdWVzdC5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcblxuICB4bWxIdHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Jyk7XG5cbiAgeG1sSHR0cFJlcXVlc3Quc2VuZChib2R5KTtcbn1cblxuZnVuY3Rpb24gdXJsRnJvbUhvc3RVUklBbmRQYXJhbWV0ZXJzKGhvc3QsIHVyaSwgcGFyYW1ldGVycykge1xuICBjb25zdCBxdWVyeVN0cmluZyA9IHF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMocGFyYW1ldGVycyksXG4gICAgICAgIHVybCA9IChxdWVyeVN0cmluZyA9PT0gJycpID9cbiAgICAgICAgICAgICAgICBgJHtob3N0fSR7dXJpfWAgOlxuICAgICAgICAgICAgICAgICAgYCR7aG9zdH0ke3VyaX0/JHtxdWVyeVN0cmluZ31gO1xuXG4gIHJldHVybiB1cmw7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLFxuICAgICAgICBuYW1lc0xlbmd0aCA9IG5hbWVzLmxlbmd0aCxcbiAgICAgICAgbGFzdEluZGV4ID0gbmFtZXNMZW5ndGggLSAxLFxuICAgICAgICBxdWVyeVN0cmluZyA9IG5hbWVzLnJlZHVjZShmdW5jdGlvbihxdWVyeVN0cmluZywgbmFtZSwgaW5kZXgpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtZXRlcnNbbmFtZV0sXG4gICAgICAgICAgICAgICAgZW5jb2RlZE5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQobmFtZSksXG4gICAgICAgICAgICAgICAgZW5jb2RlZFZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSxcbiAgICAgICAgICAgICAgICBhbXBlcnNhbmRPck5vdGhpbmcgPSAoaW5kZXggIT09IGxhc3RJbmRleCkgPyAnJicgOiAnJztcbiAgXG4gICAgICAgICAgcXVlcnlTdHJpbmcgKz0gYCR7ZW5jb2RlZE5hbWV9PSR7ZW5jb2RlZFZhbHVlfSR7YW1wZXJzYW5kT3JOb3RoaW5nfWA7XG4gIFxuICAgICAgICAgIHJldHVybiBxdWVyeVN0cmluZztcbiAgICAgICAgfSwgJycpO1xuXG4gIHJldHVybiBxdWVyeVN0cmluZztcbn1cbiJdfQ==