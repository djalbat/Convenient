"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.post = post;

var _constants = require("../../constants");

function get(host, path, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.GET_METHOD,
      body = undefined;
  request(host, path, parameters, method, body, callback);
}

function post(host, path, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.POST_METHOD,
      body = JSON.stringify(json);
  request(host, path, parameters, method, body, callback);
}

function request(host, path, parameters, method, body, callback) {
  var url = urlFromHostPathAndParameters(host, path, parameters),
      accept = _constants.APPLICATION_JSON_ACCEPT,
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;

    if (readyState == 4) {
      var json = null;

      if (status == 200) {
        var jsonString = responseText; ///

        try {
          json = JSON.parse(jsonString);
        } catch (error) {///
        }
      }

      callback(json);
    }
  };

  xmlHttpRequest.open(method, url);
  xmlHttpRequest.setRequestHeader("accept", accept);

  if (method === _constants.POST_METHOD) {
    var contentType = _constants.APPLICATION_JSON_CONTENT_TYPE;
    xmlHttpRequest.setRequestHeader("content-type", contentType);
  }

  xmlHttpRequest.send(body);
}

function queryStringFromParameters(parameters) {
  var names = Object.keys(parameters),
      namesLength = names.length,
      lastIndex = namesLength - 1,
      queryString = names.reduce(function (queryString, name, index) {
    var value = parameters[name],
        encodedName = encodeURIComponent(name),
        encodedValue = encodeURIComponent(value),
        ampersandOrNothing = index !== lastIndex ? "&" : "";
    queryString += "".concat(encodedName, "=").concat(encodedValue).concat(ampersandOrNothing);
    return queryString;
  }, "");
  return queryString;
}

function urlFromHostPathAndParameters(host, path, parameters) {
  var queryString = queryStringFromParameters(parameters),
      url = queryString === "" ? "".concat(host).concat(path) : "".concat(host).concat(path, "?").concat(queryString);
  return url;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXguanMiXSwibmFtZXMiOlsiZ2V0IiwiaG9zdCIsInBhdGgiLCJwYXJhbWV0ZXJzIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJtZXRob2QiLCJHRVRfTUVUSE9EIiwiYm9keSIsInJlcXVlc3QiLCJwb3N0IiwianNvbiIsIlBPU1RfTUVUSE9EIiwiSlNPTiIsInN0cmluZ2lmeSIsInVybCIsInVybEZyb21Ib3N0UGF0aEFuZFBhcmFtZXRlcnMiLCJhY2NlcHQiLCJBUFBMSUNBVElPTl9KU09OX0FDQ0VQVCIsInhtbEh0dHBSZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwianNvblN0cmluZyIsInBhcnNlIiwiZXJyb3IiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsImNvbnRlbnRUeXBlIiwiQVBQTElDQVRJT05fSlNPTl9DT05URU5UX1RZUEUiLCJzZW5kIiwicXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVycyIsIm5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsIm5hbWVzTGVuZ3RoIiwibGVuZ3RoIiwibGFzdEluZGV4IiwicXVlcnlTdHJpbmciLCJyZWR1Y2UiLCJuYW1lIiwiaW5kZXgiLCJ2YWx1ZSIsImVuY29kZWROYW1lIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlZFZhbHVlIiwiYW1wZXJzYW5kT3JOb3RoaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQTs7QUFFTyxTQUFTQSxHQUFULENBQWFDLElBQWIsRUFBbUJDLElBQW5CLEVBQXlCQyxVQUF6QixFQUFxQ0MsUUFBckMsRUFBK0M7QUFDcEQsTUFBSUEsUUFBUSxLQUFLQyxTQUFqQixFQUE0QjtBQUMxQkQsSUFBQUEsUUFBUSxHQUFHRCxVQUFYLENBRDBCLENBQ0g7O0FBQ3ZCQSxJQUFBQSxVQUFVLEdBQUcsRUFBYjtBQUNEOztBQUVELE1BQU1HLE1BQU0sR0FBR0MscUJB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QUNNRyxXQUFXLEdBQUdDLGtCQUFrQixDQUFDSixJQUFELENBRHRDO0FBQUEsUUFFTUssWUFBWSxHQUFHRCxrQkFBa0IsQ0FBQ0YsS0FBRCxDQUZ2QztBQUFBLFFBR01JLGtCQUFrQixHQUFJTCxLQUFLLEtBQUtKLFNBQVgsR0FBd0IsR0FBeEIsR0FBOEIsRUFIekQ7QUFLQUMsSUFBQUEsV0FBVyxjQUFPSyxXQUFQLGNBQXNCRSxZQUF0QixTQUFxQ0Msa0JBQXJDLENBQVg7QUFFQSxXQUFPUixXQUFQO0FBQ0QsR0FUYSxFQVNYLEVBVFcsQ0FIcEI7QUFjQSxTQUFPQSxXQUFQO0FBQ0Q7O0FBRUQsU0FBU3hCLDRCQUFULENBQXNDZixJQUF0QyxFQUE0Q0MsSUFBNUMsRUFBa0RDLFVBQWxELEVBQThEO0FBQzVELE1BQU1xQyxXQUFXLEdBQUdQLHlCQUF5QixDQUFDOUIsVUFBRCxDQUE3QztBQUFBLE1BQ01ZLEdBQUcsR0FBSXlCLFdBQVcsS0FBSyxFQUFqQixhQUNHdkMsSUFESCxTQUNVQyxJQURWLGNBRUtELElBRkwsU0FFWUMsSUFGWixjQUVvQnNDLFdBRnBCLENBRFo7QUFLQSxTQUFPekIsR0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEdFVF9NRVRIT0QsIFBPU1RfTUVUSE9ELCBBUFBMSUNBVElPTl9KU09OX0FDQ0VQVCwgQVBQTElDQVRJT05fSlNPTl9DT05URU5UX1RZUEUgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQoaG9zdCwgcGF0aCwgcGFyYW1ldGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IHBhcmFtZXRlcnM7IC8vL1xuICAgIHBhcmFtZXRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IEdFVF9NRVRIT0QsXG4gICAgICAgIGJvZHkgPSB1bmRlZmluZWQ7XG5cbiAgcmVxdWVzdChob3N0LCBwYXRoLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3QoaG9zdCwgcGF0aCwganNvbiwgcGFyYW1ldGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IHBhcmFtZXRlcnM7IC8vL1xuICAgIHBhcmFtZXRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IFBPU1RfTUVUSE9ELFxuICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoanNvbik7XG5cbiAgcmVxdWVzdChob3N0LCBwYXRoLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gcmVxdWVzdChob3N0LCBwYXRoLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHVybCA9IHVybEZyb21Ib3N0UGF0aEFuZFBhcmFtZXRlcnMoaG9zdCwgcGF0aCwgcGFyYW1ldGVycyksXG4gICAgICAgIGFjY2VwdCA9IEFQUExJQ0FUSU9OX0pTT05fQUNDRVBULFxuICAgICAgICB4bWxIdHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gIHhtbEh0dHBSZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IHJlYWR5U3RhdGUsIHN0YXR1cywgcmVzcG9uc2VUZXh0IH0gPSB4bWxIdHRwUmVxdWVzdDtcblxuICAgIGlmIChyZWFkeVN0YXRlID09IDQpIHtcbiAgICAgIGxldCBqc29uID0gbnVsbDtcblxuICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgY29uc3QganNvblN0cmluZyA9IHJlc3BvbnNlVGV4dDsgLy8vXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLy9cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhqc29uKTtcbiAgICB9XG4gIH07XG5cbiAgeG1sSHR0cFJlcXVlc3Qub3BlbihtZXRob2QsIHVybCk7XG5cbiAgeG1sSHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihcImFjY2VwdFwiLCBhY2NlcHQpO1xuXG4gIGlmIChtZXRob2QgPT09IFBPU1RfTUVUSE9EKSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBBUFBMSUNBVElPTl9KU09OX0NPTlRFTlRfVFlQRTtcblxuICAgIHhtbEh0dHBSZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoXCJjb250ZW50LXR5cGVcIiwgY29udGVudFR5cGUpO1xuICB9XG5cbiAgeG1sSHR0cFJlcXVlc3Quc2VuZChib2R5KTtcbn1cblxuZnVuY3Rpb24gcXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVycyhwYXJhbWV0ZXJzKSB7XG4gIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMocGFyYW1ldGVycyksXG4gICAgICAgIG5hbWVzTGVuZ3RoID0gbmFtZXMubGVuZ3RoLFxuICAgICAgICBsYXN0SW5kZXggPSBuYW1lc0xlbmd0aCAtIDEsXG4gICAgICAgIHF1ZXJ5U3RyaW5nID0gbmFtZXMucmVkdWNlKChxdWVyeVN0cmluZywgbmFtZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtZXRlcnNbbmFtZV0sXG4gICAgICAgICAgICAgICAgZW5jb2RlZE5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQobmFtZSksXG4gICAgICAgICAgICAgICAgZW5jb2RlZFZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSxcbiAgICAgICAgICAgICAgICBhbXBlcnNhbmRPck5vdGhpbmcgPSAoaW5kZXggIT09IGxhc3RJbmRleCkgPyBcIiZcIiA6IFwiXCI7XG4gIFxuICAgICAgICAgIHF1ZXJ5U3RyaW5nICs9IGAke2VuY29kZWROYW1lfT0ke2VuY29kZWRWYWx1ZX0ke2FtcGVyc2FuZE9yTm90aGluZ31gO1xuICBcbiAgICAgICAgICByZXR1cm4gcXVlcnlTdHJpbmc7XG4gICAgICAgIH0sIFwiXCIpO1xuXG4gIHJldHVybiBxdWVyeVN0cmluZztcbn1cblxuZnVuY3Rpb24gdXJsRnJvbUhvc3RQYXRoQW5kUGFyYW1ldGVycyhob3N0LCBwYXRoLCBwYXJhbWV0ZXJzKSB7XG4gIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVycyhwYXJhbWV0ZXJzKSxcbiAgICAgICAgdXJsID0gKHF1ZXJ5U3RyaW5nID09PSBcIlwiKSA/XG4gICAgICAgICAgICAgIGAke2hvc3R9JHtwYXRofWAgOlxuICAgICAgICAgICAgICAgIGAke2hvc3R9JHtwYXRofT8ke3F1ZXJ5U3RyaW5nfWA7XG5cbiAgcmV0dXJuIHVybDtcbn1cbiJdfQ==