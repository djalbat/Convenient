"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.post = post;
var GET_METHOD = "GET",
    POST_METHOD = "POST";

function get(host, uri, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = GET_METHOD,
      body = undefined;
  request(host, uri, parameters, method, body, callback);
}

function post(host, uri, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = POST_METHOD,
      body = JSON.stringify(json);
  request(host, uri, parameters, method, body, callback);
}

function request(host, uri, parameters, method, body, callback) {
  var url = urlFromHostURIAndParameters(host, uri, parameters),
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;

    if (readyState == 4) {
      var json = null;

      if (status == 200) {
        var jsonString = responseText; ///

        try {
          json = JSON.parse(jsonString);
        } catch (error) {///
        }

        callback(json);
      }
    }
  };

  xmlHttpRequest.open(method, url, true);
  xmlHttpRequest.setRequestHeader("content-type", "application/json;charset=UTF-8");
  xmlHttpRequest.send(body);
}

function queryStringFromParameters(parameters) {
  var names = Object.keys(parameters),
      namesLength = names.length,
      lastIndex = namesLength - 1,
      queryString = names.reduce(function (queryString, name, index) {
    var value = parameters[name],
        encodedName = encodeURIComponent(name),
        encodedValue = encodeURIComponent(value),
        ampersandOrNothing = index !== lastIndex ? "&" : "";
    queryString += "".concat(encodedName, "=").concat(encodedValue).concat(ampersandOrNothing);
    return queryString;
  }, "");
  return queryString;
}

function urlFromHostURIAndParameters(host, uri, parameters) {
  var queryString = queryStringFromParameters(parameters),
      url = queryString === "" ? "".concat(host).concat(uri) : "".concat(host).concat(uri, "?").concat(queryString);
  return url;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXguanMiXSwibmFtZXMiOlsiR0VUX01FVEhPRCIsIlBPU1RfTUVUSE9EIiwiZ2V0IiwiaG9zdCIsInVyaSIsInBhcmFtZXRlcnMiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsIm1ldGhvZCIsImJvZHkiLCJyZXF1ZXN0IiwicG9zdCIsImpzb24iLCJKU09OIiwic3RyaW5naWZ5IiwidXJsIiwidXJsRnJvbUhvc3RVUklBbmRQYXJhbWV0ZXJzIiwieG1sSHR0cFJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJqc29uU3RyaW5nIiwicGFyc2UiLCJlcnJvciIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMiLCJuYW1lcyIsIk9iamVjdCIsImtleXMiLCJuYW1lc0xlbmd0aCIsImxlbmd0aCIsImxhc3RJbmRleCIsInF1ZXJ5U3RyaW5nIiwicmVkdWNlIiwibmFtZSIsImluZGV4IiwidmFsdWUiLCJlbmNvZGVkTmFtZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImVuY29kZWRWYWx1ZSIsImFtcGVyc2FuZE9yTm90aGluZyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQSxJQUFNQSxVQUFVLEdBQUcsS0FBbkI7QUFBQSxJQUNNQyxXQUFXLEdBQUcsTUFEcEI7O0FBR08sU0FBU0MsR0FBVCxDQUFhQyxJQUFiLEVBQW1CQyxHQUFuQixFQUF3QkMsVUFBeEIsRUFBb0NDLFFBQXBDLEVBQThDO0FBQ25ELE1BQUlBLFFBQVEsS0FBS0MsU0FBakIsRUFBNEI7QUFDMUJELElBQUFBLFFBQVEsR0FBR0QsVUFBWCxDQUQwQixDQUNIOztBQUN2QkEsSUFBQUEsVUFBVSxHQUFHLEVBQWI7QUFDRDs7QUFFRCxNQUFNRyxNQUFNLEdBQUdSLFVBQWY7QUFBQSxNQUNNUyxJQUFJLEdBQUdGLFNBRGI7QUFHQUcs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QUFzQkUsWUFBdEIsU0FBcUNDLGtCQUFyQyxDQUFYO0FBRUEsV0FBT1IsV0FBUDtBQUNELEdBVGEsRUFTWCxFQVRXLENBSHBCO0FBY0EsU0FBT0EsV0FBUDtBQUNEOztBQUVELFNBQVNwQiwyQkFBVCxDQUFxQ2IsSUFBckMsRUFBMkNDLEdBQTNDLEVBQWdEQyxVQUFoRCxFQUE0RDtBQUMxRCxNQUFNK0IsV0FBVyxHQUFHUCx5QkFBeUIsQ0FBQ3hCLFVBQUQsQ0FBN0M7QUFBQSxNQUNNVSxHQUFHLEdBQUlxQixXQUFXLEtBQUssRUFBakIsYUFDR2pDLElBREgsU0FDVUMsR0FEVixjQUVLRCxJQUZMLFNBRVlDLEdBRlosY0FFbUJnQyxXQUZuQixDQURaO0FBS0EsU0FBT3JCLEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBHRVRfTUVUSE9EID0gXCJHRVRcIixcbiAgICAgIFBPU1RfTUVUSE9EID0gXCJQT1NUXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gcGFyYW1ldGVyczsgLy8vXG4gICAgcGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gR0VUX01FVEhPRCxcbiAgICAgICAgYm9keSA9IHVuZGVmaW5lZDtcblxuICByZXF1ZXN0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3N0KGhvc3QsIHVyaSwganNvbiwgcGFyYW1ldGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IHBhcmFtZXRlcnM7IC8vL1xuICAgIHBhcmFtZXRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IFBPU1RfTUVUSE9ELFxuICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoanNvbik7XG5cbiAgcmVxdWVzdChob3N0LCB1cmksIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjaykge1xuICBjb25zdCB1cmwgPSB1cmxGcm9tSG9zdFVSSUFuZFBhcmFtZXRlcnMoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzKSxcbiAgICAgICAgeG1sSHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICB4bWxIdHRwUmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgY29uc3QgeyByZWFkeVN0YXRlLCBzdGF0dXMsIHJlc3BvbnNlVGV4dCB9ID0geG1sSHR0cFJlcXVlc3Q7XG5cbiAgICBpZiAocmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICBsZXQganNvbiA9IG51bGw7XG5cbiAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgIGNvbnN0IGpzb25TdHJpbmcgPSByZXNwb25zZVRleHQ7IC8vL1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAganNvbiA9IEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgLy8vXG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhqc29uKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgeG1sSHR0cFJlcXVlc3Qub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG5cbiAgeG1sSHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihcImNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcblxuICB4bWxIdHRwUmVxdWVzdC5zZW5kKGJvZHkpO1xufVxuXG5mdW5jdGlvbiBxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzKHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKSxcbiAgICAgICAgbmFtZXNMZW5ndGggPSBuYW1lcy5sZW5ndGgsXG4gICAgICAgIGxhc3RJbmRleCA9IG5hbWVzTGVuZ3RoIC0gMSxcbiAgICAgICAgcXVlcnlTdHJpbmcgPSBuYW1lcy5yZWR1Y2UoKHF1ZXJ5U3RyaW5nLCBuYW1lLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1ldGVyc1tuYW1lXSxcbiAgICAgICAgICAgICAgICBlbmNvZGVkTmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSxcbiAgICAgICAgICAgICAgICBlbmNvZGVkVmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLFxuICAgICAgICAgICAgICAgIGFtcGVyc2FuZE9yTm90aGluZyA9IChpbmRleCAhPT0gbGFzdEluZGV4KSA/IFwiJlwiIDogXCJcIjtcbiAgXG4gICAgICAgICAgcXVlcnlTdHJpbmcgKz0gYCR7ZW5jb2RlZE5hbWV9PSR7ZW5jb2RlZFZhbHVlfSR7YW1wZXJzYW5kT3JOb3RoaW5nfWA7XG4gIFxuICAgICAgICAgIHJldHVybiBxdWVyeVN0cmluZztcbiAgICAgICAgfSwgXCJcIik7XG5cbiAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xufVxuXG5mdW5jdGlvbiB1cmxGcm9tSG9zdFVSSUFuZFBhcmFtZXRlcnMoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzKSB7XG4gIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVycyhwYXJhbWV0ZXJzKSxcbiAgICAgICAgdXJsID0gKHF1ZXJ5U3RyaW5nID09PSBcIlwiKSA/XG4gICAgICAgICAgICAgIGAke2hvc3R9JHt1cml9YCA6XG4gICAgICAgICAgICAgICAgYCR7aG9zdH0ke3VyaX0/JHtxdWVyeVN0cmluZ31gO1xuXG4gIHJldHVybiB1cmw7XG59XG4iXX0=