"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.post = post;
exports.request = request;

var _constants = require("../../constants");

function get(host, path, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.GET_METHOD,
      body = undefined;
  request(host, path, parameters, method, body, callback);
}

function post(host, path, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.POST_METHOD,
      body = JSON.stringify(json);
  request(host, path, parameters, method, body, callback);
}

function request(host, path, parameters, method, body, callback) {
  var url = urlFromHostPathAndParameters(host, path, parameters),
      accept = _constants.APPLICATION_JSON_ACCEPT,
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;

    if (readyState == 4) {
      var json = null;

      if (status == 200) {
        var jsonString = responseText; ///

        try {
          json = JSON.parse(jsonString);
        } catch (error) {///
        }
      }

      callback(json, status);
    }
  };

  xmlHttpRequest.open(method, url);
  xmlHttpRequest.setRequestHeader("accept", accept);

  if (method === _constants.PUT_METHOD || method === _constants.POST_METHOD) {
    var contentType = _constants.APPLICATION_JSON_CONTENT_TYPE;
    xmlHttpRequest.setRequestHeader("content-type", contentType);
  }

  xmlHttpRequest.send(body);
}

function queryStringFromParameters(parameters) {
  var names = Object.keys(parameters),
      namesLength = names.length,
      lastIndex = namesLength - 1,
      queryString = names.reduce(function (queryString, name, index) {
    var value = parameters[name],
        encodedName = encodeURIComponent(name),
        encodedValue = encodeURIComponent(value),
        ampersandOrNothing = index !== lastIndex ? "&" : "";
    queryString += "".concat(encodedName, "=").concat(encodedValue).concat(ampersandOrNothing);
    return queryString;
  }, "");
  return queryString;
}

function urlFromHostPathAndParameters(host, path, parameters) {
  var queryString = queryStringFromParameters(parameters),
      url = queryString === "" ? "".concat(host).concat(path) : "".concat(host).concat(path, "?").concat(queryString);
  return url;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi91dGlsaXRpZXMvbWlzY2VsbGFuZW91cy9hamF4LmpzIl0sIm5hbWVzIjpbImdldCIsImhvc3QiLCJwYXRoIiwicGFyYW1ldGVycyIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwibWV0aG9kIiwiR0VUX01FVEhPRCIsImJvZHkiLCJyZXF1ZXN0IiwicG9zdCIsImpzb24iLCJQT1NUX01FVEhPRCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cmwiLCJ1cmxGcm9tSG9zdFBhdGhBbmRQYXJhbWV0ZXJzIiwiYWNjZXB0IiwiQVBQTElDQVRJT05fSlNPTl9BQ0NFUFQiLCJ4bWxIdHRwUmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsImpzb25TdHJpbmciLCJwYXJzZSIsImVycm9yIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJQVVRfTUVUSE9EIiwiY29udGVudFR5cGUiLCJBUFBMSUNBVElPTl9KU09OX0NPTlRFTlRfVFlQRSIsInNlbmQiLCJxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzIiwibmFtZXMiLCJPYmplY3QiLCJrZXlzIiwibmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJsYXN0SW5kZXgiLCJxdWVyeVN0cmluZyIsInJlZHVjZSIsIm5hbWUiLCJpbmRleCIsInZhbHVlIiwiZW5jb2RlZE5hbWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVkVmFsdWUiLCJhbXBlcnNhbmRPck5vdGhpbmciXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFFQTs7QUFFTyxTQUFTQSxHQUFULENBQWFDLElBQWIsRUFBbUJDLElBQW5CLEVBQXlCQyxVQUF6QixFQUFxQ0MsUUFBckMsRUFBK0M7QUFDcEQsTUFBSUEsUUFBUSxLQUFLQyxTQUFqQixFQUE0QjtBQUMxQkQsSUFBQUEsUUFBUSxHQUFHRCxVQUFYLENBRDBCLENBQ0g7O0FBQ3ZCQSxJ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LFdBQUQsRUFBY0UsSUFBZCxFQUFvQkMsS0FBcEIsRUFBOEI7QUFDdkQsUUFBTUMsS0FBSyxHQUFHMUMsVUFBVSxDQUFDd0MsSUFBRCxDQUF4QjtBQUFBLFFBQ01HLFdBQVcsR0FBR0Msa0JBQWtCLENBQUNKLElBQUQsQ0FEdEM7QUFBQSxRQUVNSyxZQUFZLEdBQUdELGtCQUFrQixDQUFDRixLQUFELENBRnZDO0FBQUEsUUFHTUksa0JBQWtCLEdBQUlMLEtBQUssS0FBS0osU0FBWCxHQUF3QixHQUF4QixHQUE4QixFQUh6RDtBQUtBQyxJQUFBQSxXQUFXLGNBQU9LLFdBQVAsY0FBc0JFLFlBQXRCLFNBQXFDQyxrQkFBckMsQ0FBWDtBQUVBLFdBQU9SLFdBQVA7QUFDRCxHQVRhLEVBU1gsRUFUVyxDQUhwQjtBQWNBLFNBQU9BLFdBQVA7QUFDRDs7QUFFRCxTQUFTekIsNEJBQVQsQ0FBc0NmLElBQXRDLEVBQTRDQyxJQUE1QyxFQUFrREMsVUFBbEQsRUFBOEQ7QUFDNUQsTUFBTXNDLFdBQVcsR0FBR1AseUJBQXlCLENBQUMvQixVQUFELENBQTdDO0FBQUEsTUFDTVksR0FBRyxHQUFJMEIsV0FBVyxLQUFLLEVBQWpCLGFBQ0d4QyxJQURILFNBQ1VDLElBRFYsY0FFS0QsSUFGTCxTQUVZQyxJQUZaLGNBRW9CdUMsV0FGcEIsQ0FEWjtBQUtBLFNBQU8xQixHQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgR0VUX01FVEhPRCwgUFVUX01FVEhPRCwgUE9TVF9NRVRIT0QsIEFQUExJQ0FUSU9OX0pTT05fQUNDRVBULCBBUFBMSUNBVElPTl9KU09OX0NPTlRFTlRfVFlQRSB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldChob3N0LCBwYXRoLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gcGFyYW1ldGVyczsgLy8vXG4gICAgcGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gR0VUX01FVEhPRCxcbiAgICAgICAgYm9keSA9IHVuZGVmaW5lZDtcblxuICByZXF1ZXN0KGhvc3QsIHBhdGgsIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zdChob3N0LCBwYXRoLCBqc29uLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gcGFyYW1ldGVyczsgLy8vXG4gICAgcGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gUE9TVF9NRVRIT0QsXG4gICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShqc29uKTtcblxuICByZXF1ZXN0KGhvc3QsIHBhdGgsIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWVzdChob3N0LCBwYXRoLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHVybCA9IHVybEZyb21Ib3N0UGF0aEFuZFBhcmFtZXRlcnMoaG9zdCwgcGF0aCwgcGFyYW1ldGVycyksXG4gICAgICAgIGFjY2VwdCA9IEFQUExJQ0FUSU9OX0pTT05fQUNDRVBULFxuICAgICAgICB4bWxIdHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gIHhtbEh0dHBSZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IHJlYWR5U3RhdGUsIHN0YXR1cywgcmVzcG9uc2VUZXh0IH0gPSB4bWxIdHRwUmVxdWVzdDtcblxuICAgIGlmIChyZWFkeVN0YXRlID09IDQpIHtcbiAgICAgIGxldCBqc29uID0gbnVsbDtcblxuICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgY29uc3QganNvblN0cmluZyA9IHJlc3BvbnNlVGV4dDsgLy8vXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLy9cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhqc29uLCBzdGF0dXMpO1xuICAgIH1cbiAgfTtcblxuICB4bWxIdHRwUmVxdWVzdC5vcGVuKG1ldGhvZCwgdXJsKTtcblxuICB4bWxIdHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKFwiYWNjZXB0XCIsIGFjY2VwdCk7XG5cbiAgaWYgKChtZXRob2QgPT09IFBVVF9NRVRIT0QpIHx8IChtZXRob2QgPT09IFBPU1RfTUVUSE9EKSkge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gQVBQTElDQVRJT05fSlNPTl9DT05URU5UX1RZUEU7XG5cbiAgICB4bWxIdHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKFwiY29udGVudC10eXBlXCIsIGNvbnRlbnRUeXBlKTtcbiAgfVxuXG4gIHhtbEh0dHBSZXF1ZXN0LnNlbmQoYm9keSk7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLFxuICAgICAgICBuYW1lc0xlbmd0aCA9IG5hbWVzLmxlbmd0aCxcbiAgICAgICAgbGFzdEluZGV4ID0gbmFtZXNMZW5ndGggLSAxLFxuICAgICAgICBxdWVyeVN0cmluZyA9IG5hbWVzLnJlZHVjZSgocXVlcnlTdHJpbmcsIG5hbWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJhbWV0ZXJzW25hbWVdLFxuICAgICAgICAgICAgICAgIGVuY29kZWROYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpLFxuICAgICAgICAgICAgICAgIGVuY29kZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSksXG4gICAgICAgICAgICAgICAgYW1wZXJzYW5kT3JOb3RoaW5nID0gKGluZGV4ICE9PSBsYXN0SW5kZXgpID8gXCImXCIgOiBcIlwiO1xuICBcbiAgICAgICAgICBxdWVyeVN0cmluZyArPSBgJHtlbmNvZGVkTmFtZX09JHtlbmNvZGVkVmFsdWV9JHthbXBlcnNhbmRPck5vdGhpbmd9YDtcbiAgXG4gICAgICAgICAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xuICAgICAgICB9LCBcIlwiKTtcblxuICByZXR1cm4gcXVlcnlTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHVybEZyb21Ib3N0UGF0aEFuZFBhcmFtZXRlcnMoaG9zdCwgcGF0aCwgcGFyYW1ldGVycykge1xuICBjb25zdCBxdWVyeVN0cmluZyA9IHF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMocGFyYW1ldGVycyksXG4gICAgICAgIHVybCA9IChxdWVyeVN0cmluZyA9PT0gXCJcIikgP1xuICAgICAgICAgICAgICBgJHtob3N0fSR7cGF0aH1gIDpcbiAgICAgICAgICAgICAgICBgJHtob3N0fSR7cGF0aH0/JHtxdWVyeVN0cmluZ31gO1xuXG4gIHJldHVybiB1cmw7XG59XG4iXX0=