"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.post = post;

var _constants = require("../../constants");

function get(host, path, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.GET_METHOD,
      body = undefined;
  request(host, path, parameters, method, body, callback);
}

function post(host, path, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.POST_METHOD,
      body = JSON.stringify(json);
  request(host, path, parameters, method, body, callback);
}

function request(host, path, parameters, method, body, callback) {
  var url = urlFromHostPathAndParameters(host, path, parameters),
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;

    if (readyState == 4) {
      var json = null;

      if (status == 200) {
        var jsonString = responseText; ///

        try {
          json = JSON.parse(jsonString);
        } catch (error) {///
        }
      }

      callback(json);
    }
  };

  var contentType = _constants.APPLICATION_JSON_CHARSET_UTF8_CONTENT_TYPE;
  xmlHttpRequest.open(method, url);
  xmlHttpRequest.setRequestHeader("content-type", contentType);
  xmlHttpRequest.send(body);
}

function queryStringFromParameters(parameters) {
  var names = Object.keys(parameters),
      namesLength = names.length,
      lastIndex = namesLength - 1,
      queryString = names.reduce(function (queryString, name, index) {
    var value = parameters[name],
        encodedName = encodeURIComponent(name),
        encodedValue = encodeURIComponent(value),
        ampersandOrNothing = index !== lastIndex ? "&" : "";
    queryString += "".concat(encodedName, "=").concat(encodedValue).concat(ampersandOrNothing);
    return queryString;
  }, "");
  return queryString;
}

function urlFromHostPathAndParameters(host, path, parameters) {
  var queryString = queryStringFromParameters(parameters),
      url = queryString === "" ? "".concat(host).concat(path) : "".concat(host).concat(path, "?").concat(queryString);
  return url;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXguanMiXSwibmFtZXMiOlsiZ2V0IiwiaG9zdCIsInBhdGgiLCJwYXJhbWV0ZXJzIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJtZXRob2QiLCJHRVRfTUVUSE9EIiwiYm9keSIsInJlcXVlc3QiLCJwb3N0IiwianNvbiIsIlBPU1RfTUVUSE9EIiwiSlNPTiIsInN0cmluZ2lmeSIsInVybCIsInVybEZyb21Ib3N0UGF0aEFuZFBhcmFtZXRlcnMiLCJ4bWxIdHRwUmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsImpzb25TdHJpbmciLCJwYXJzZSIsImVycm9yIiwiY29udGVudFR5cGUiLCJBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGOF9DT05URU5UX1RZUEUiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzIiwibmFtZXMiLCJPYmplY3QiLCJrZXlzIiwibmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJsYXN0SW5kZXgiLCJxdWVyeVN0cmluZyIsInJlZHVjZSIsIm5hbWUiLCJpbmRleCIsInZhbHVlIiwiZW5jb2RlZE5hbWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVkVmFsdWUiLCJhbXBlcnNhbmRPck5vdGhpbmciXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBOztBQUVPLFNBQVNBLEdBQVQsQ0FBYUMsSUFBYixFQUFtQkMsSUFBbkIsRUFBeUJDLFVBQXpCLEVBQXFDQyxRQUFyQyxFQUErQztBQUNwRCxNQUFJQSxRQUFRLEtBQUtDLFNBQWpCLEVBQTRCO0FBQzFCRCxJQUFBQSxRQUFRLEdBQUdELFVBQVgsQ0FEMEIsQ0FDSDs7QUFDdkJBLElBQUFBLFVBQVUsR0FBRyxFQUFiO0FBQ0Q7O0FBRUQsTUFBTUcsTUFBTSxHQUFHQyxxQkFBZjtBQUFBLE1BQ01DLElBQUksR0FB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ekQ7QUFLQUMsSUFBQUEsV0FBVyxjQUFPSyxXQUFQLGNBQXNCRSxZQUF0QixTQUFxQ0Msa0JBQXJDLENBQVg7QUFFQSxXQUFPUixXQUFQO0FBQ0QsR0FUYSxFQVNYLEVBVFcsQ0FIcEI7QUFjQSxTQUFPQSxXQUFQO0FBQ0Q7O0FBRUQsU0FBU3RCLDRCQUFULENBQXNDZixJQUF0QyxFQUE0Q0MsSUFBNUMsRUFBa0RDLFVBQWxELEVBQThEO0FBQzVELE1BQU1tQyxXQUFXLEdBQUdQLHlCQUF5QixDQUFDNUIsVUFBRCxDQUE3QztBQUFBLE1BQ01ZLEdBQUcsR0FBSXVCLFdBQVcsS0FBSyxFQUFqQixhQUNHckMsSUFESCxTQUNVQyxJQURWLGNBRUtELElBRkwsU0FFWUMsSUFGWixjQUVvQm9DLFdBRnBCLENBRFo7QUFLQSxTQUFPdkIsR0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEdFVF9NRVRIT0QsIFBPU1RfTUVUSE9ELCBBUFBMSUNBVElPTl9KU09OX0NIQVJTRVRfVVRGOF9DT05URU5UX1RZUEUgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQoaG9zdCwgcGF0aCwgcGFyYW1ldGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IHBhcmFtZXRlcnM7IC8vL1xuICAgIHBhcmFtZXRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IEdFVF9NRVRIT0QsXG4gICAgICAgIGJvZHkgPSB1bmRlZmluZWQ7XG5cbiAgcmVxdWVzdChob3N0LCBwYXRoLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3QoaG9zdCwgcGF0aCwganNvbiwgcGFyYW1ldGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IHBhcmFtZXRlcnM7IC8vL1xuICAgIHBhcmFtZXRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IFBPU1RfTUVUSE9ELFxuICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoanNvbik7XG5cbiAgcmVxdWVzdChob3N0LCBwYXRoLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gcmVxdWVzdChob3N0LCBwYXRoLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHVybCA9IHVybEZyb21Ib3N0UGF0aEFuZFBhcmFtZXRlcnMoaG9zdCwgcGF0aCwgcGFyYW1ldGVycyksXG4gICAgICAgIHhtbEh0dHBSZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgeG1sSHR0cFJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVhZHlTdGF0ZSwgc3RhdHVzLCByZXNwb25zZVRleHQgfSA9IHhtbEh0dHBSZXF1ZXN0O1xuXG4gICAgaWYgKHJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgbGV0IGpzb24gPSBudWxsO1xuXG4gICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuICAgICAgICBjb25zdCBqc29uU3RyaW5nID0gcmVzcG9uc2VUZXh0OyAvLy9cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb25TdHJpbmcpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIC8vL1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKGpzb24pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBjb250ZW50VHlwZSA9IEFQUExJQ0FUSU9OX0pTT05fQ0hBUlNFVF9VVEY4X0NPTlRFTlRfVFlQRTtcblxuICB4bWxIdHRwUmVxdWVzdC5vcGVuKG1ldGhvZCwgdXJsKTtcblxuICB4bWxIdHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKFwiY29udGVudC10eXBlXCIsIGNvbnRlbnRUeXBlKTtcblxuICB4bWxIdHRwUmVxdWVzdC5zZW5kKGJvZHkpO1xufVxuXG5mdW5jdGlvbiBxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzKHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKSxcbiAgICAgICAgbmFtZXNMZW5ndGggPSBuYW1lcy5sZW5ndGgsXG4gICAgICAgIGxhc3RJbmRleCA9IG5hbWVzTGVuZ3RoIC0gMSxcbiAgICAgICAgcXVlcnlTdHJpbmcgPSBuYW1lcy5yZWR1Y2UoKHF1ZXJ5U3RyaW5nLCBuYW1lLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1ldGVyc1tuYW1lXSxcbiAgICAgICAgICAgICAgICBlbmNvZGVkTmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSxcbiAgICAgICAgICAgICAgICBlbmNvZGVkVmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLFxuICAgICAgICAgICAgICAgIGFtcGVyc2FuZE9yTm90aGluZyA9IChpbmRleCAhPT0gbGFzdEluZGV4KSA/IFwiJlwiIDogXCJcIjtcbiAgXG4gICAgICAgICAgcXVlcnlTdHJpbmcgKz0gYCR7ZW5jb2RlZE5hbWV9PSR7ZW5jb2RlZFZhbHVlfSR7YW1wZXJzYW5kT3JOb3RoaW5nfWA7XG4gIFxuICAgICAgICAgIHJldHVybiBxdWVyeVN0cmluZztcbiAgICAgICAgfSwgXCJcIik7XG5cbiAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xufVxuXG5mdW5jdGlvbiB1cmxGcm9tSG9zdFBhdGhBbmRQYXJhbWV0ZXJzKGhvc3QsIHBhdGgsIHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzKHBhcmFtZXRlcnMpLFxuICAgICAgICB1cmwgPSAocXVlcnlTdHJpbmcgPT09IFwiXCIpID9cbiAgICAgICAgICAgICAgYCR7aG9zdH0ke3BhdGh9YCA6XG4gICAgICAgICAgICAgICAgYCR7aG9zdH0ke3BhdGh9PyR7cXVlcnlTdHJpbmd9YDtcblxuICByZXR1cm4gdXJsO1xufVxuIl19