'use strict';

var GET_METHOD = 'GET',
    POST_METHOD = 'POST';

function get(host, uri, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///
    parameters = {};
  }

  var method = GET_METHOD,
      body = undefined;

  request(host, uri, parameters, method, body, callback);
}

function post(host, uri, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///
    parameters = {};
  }

  var method = POST_METHOD,
      body = JSON.stringify(json);

  request(host, uri, parameters, method, body, callback);
}

module.exports = {
  get: get,
  post: post
};

function request(host, uri, parameters, method, body, callback) {
  var json = null;

  var url = urlFromHostURIAndParameters(host, uri, parameters),
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;


    if (readyState == 4) {
      if (status == 200) {
        var jsonString = responseText; ///

        try {
          json = JSON.parse(jsonString);
        } catch (error) {
          ///
        }

        callback(json);
      }
    }
  };

  xmlHttpRequest.open(method, url, true);

  xmlHttpRequest.setRequestHeader('content-type', 'application/json;charset=UTF-8');

  try {
    xmlHttpRequest.send(body);
  } catch (error) {
    callback(json);
  }
}

function urlFromHostURIAndParameters(host, uri, parameters) {
  var queryString = queryStringFromParameters(parameters),
      url = queryString === '' ? '' + host + uri : '' + host + uri + '?' + queryString;

  return url;
}

function queryStringFromParameters(parameters) {
  var names = Object.keys(parameters),
      namesLength = names.length,
      lastIndex = namesLength - 1,
      queryString = names.reduce(function (queryString, name, index) {
    var value = parameters[name],
        encodedName = encodeURIComponent(name),
        encodedValue = encodeURIComponent(value),
        ampersandOrNothing = index !== lastIndex ? '&' : '';

    queryString += encodedName + '=' + encodedValue + ampersandOrNothing;

    return queryString;
  }, '');

  return queryString;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi91dGlsaXRpZXMvbWlzY2VsbGFuZW91cy9hamF4LmpzIl0sIm5hbWVzIjpbIkdFVF9NRVRIT0QiLCJQT1NUX01FVEhPRCIsImdldCIsImhvc3QiLCJ1cmkiLCJwYXJhbWV0ZXJzIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJtZXRob2QiLCJib2R5IiwicmVxdWVzdCIsInBvc3QiLCJqc29uIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1cmwiLCJ1cmxGcm9tSG9zdFVSSUFuZFBhcmFtZXRlcnMiLCJ4bWxIdHRwUmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsImpzb25TdHJpbmciLCJwYXJzZSIsImVycm9yIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwicXVlcnlTdHJpbmciLCJxdWVyeVN0cmluZ0Zyb21QYXJhbWV0ZXJzIiwibmFtZXMiLCJPYmplY3QiLCJrZXlzIiwibmFtZXNMZW5ndGgiLCJsZW5ndGgiLCJsYXN0SW5kZXgiLCJyZWR1Y2UiLCJuYW1lIiwiaW5kZXgiLCJ2YWx1ZSIsImVuY29kZWROYW1lIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlZFZhbHVlIiwiYW1wZXJzYW5kT3JOb3RoaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxhQUFhLEtBQW5CO0FBQUEsSUFDTUMsY0FBYyxNQURwQjs7QUFHQSxTQUFTQyxHQUFULENBQWFDLElBQWIsRUFBbUJDLEdBQW5CLEVBQXdCQyxVQUF4QixFQUFvQ0MsUUFBcEMsRUFBOEM7QUFDNUMsTUFBSUEsYUFBYUMsU0FBakIsRUFBNEI7QUFDMUJELGVBQVdELFVBQVgsQ0FEMEIsQ0FDSDtBQUN2QkEsaUJBQWEsRUFBYjtBQUNEOztBQUVELE1BQU1HLFNBQVNSLFVBQWY7QUFBQSxNQUNNUyxPQUFPRixTQURiOztB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RixLQUFuQixDQUZyQjtBQUFBLFFBR01JLHFCQUFzQkwsVUFBVUgsU0FBWCxHQUF3QixHQUF4QixHQUE4QixFQUh6RDs7QUFLQVAsbUJBQWtCWSxXQUFsQixTQUFpQ0UsWUFBakMsR0FBZ0RDLGtCQUFoRDs7QUFFQSxXQUFPZixXQUFQO0FBQ0QsR0FUYSxFQVNYLEVBVFcsQ0FIcEI7O0FBY0EsU0FBT0EsV0FBUDtBQUNEIiwiZmlsZSI6ImFqYXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEdFVF9NRVRIT0QgPSAnR0VUJyxcbiAgICAgIFBPU1RfTUVUSE9EID0gJ1BPU1QnO1xuXG5mdW5jdGlvbiBnZXQoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gcGFyYW1ldGVyczsgLy8vXG4gICAgcGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gR0VUX01FVEhPRCxcbiAgICAgICAgYm9keSA9IHVuZGVmaW5lZDtcblxuICByZXF1ZXN0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIHBvc3QoaG9zdCwgdXJpLCBqc29uLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gcGFyYW1ldGVyczsgLy8vXG4gICAgcGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gUE9TVF9NRVRIT0QsXG4gICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShqc29uKTtcblxuICByZXF1ZXN0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXQsXG4gIHBvc3Rcbn07XG5cbmZ1bmN0aW9uIHJlcXVlc3QoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKSB7XG4gIGxldCBqc29uID0gbnVsbDtcblxuICBjb25zdCB1cmwgPSB1cmxGcm9tSG9zdFVSSUFuZFBhcmFtZXRlcnMoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzKSxcbiAgICAgICAgeG1sSHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICB4bWxIdHRwUmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCB7IHJlYWR5U3RhdGUsIHN0YXR1cywgcmVzcG9uc2VUZXh0IH0gPSB4bWxIdHRwUmVxdWVzdDtcblxuICAgIGlmIChyZWFkeVN0YXRlID09IDQpIHtcbiAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgIGNvbnN0IGpzb25TdHJpbmcgPSByZXNwb25zZVRleHQ7IC8vL1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAganNvbiA9IEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgLy8vXG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhqc29uKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgeG1sSHR0cFJlcXVlc3Qub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG5cbiAgeG1sSHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCcpO1xuXG4gIHRyeSB7XG4gICAgeG1sSHR0cFJlcXVlc3Quc2VuZChib2R5KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYWxsYmFjayhqc29uKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cmxGcm9tSG9zdFVSSUFuZFBhcmFtZXRlcnMoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzKSB7XG4gIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVycyhwYXJhbWV0ZXJzKSxcbiAgICAgICAgdXJsID0gKHF1ZXJ5U3RyaW5nID09PSAnJykgP1xuICAgICAgICAgICAgICAgIGAke2hvc3R9JHt1cml9YCA6XG4gICAgICAgICAgICAgICAgICBgJHtob3N0fSR7dXJpfT8ke3F1ZXJ5U3RyaW5nfWA7XG5cbiAgcmV0dXJuIHVybDtcbn1cblxuZnVuY3Rpb24gcXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVycyhwYXJhbWV0ZXJzKSB7XG4gIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMocGFyYW1ldGVycyksXG4gICAgICAgIG5hbWVzTGVuZ3RoID0gbmFtZXMubGVuZ3RoLFxuICAgICAgICBsYXN0SW5kZXggPSBuYW1lc0xlbmd0aCAtIDEsXG4gICAgICAgIHF1ZXJ5U3RyaW5nID0gbmFtZXMucmVkdWNlKGZ1bmN0aW9uKHF1ZXJ5U3RyaW5nLCBuYW1lLCBpbmRleCkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1ldGVyc1tuYW1lXSxcbiAgICAgICAgICAgICAgICBlbmNvZGVkTmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSxcbiAgICAgICAgICAgICAgICBlbmNvZGVkVmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLFxuICAgICAgICAgICAgICAgIGFtcGVyc2FuZE9yTm90aGluZyA9IChpbmRleCAhPT0gbGFzdEluZGV4KSA/ICcmJyA6ICcnO1xuICBcbiAgICAgICAgICBxdWVyeVN0cmluZyArPSBgJHtlbmNvZGVkTmFtZX09JHtlbmNvZGVkVmFsdWV9JHthbXBlcnNhbmRPck5vdGhpbmd9YDtcbiAgXG4gICAgICAgICAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xuICAgICAgICB9LCAnJyk7XG5cbiAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xufVxuIl19