'use strict';

var GET_METHOD = 'GET',
    POST_METHOD = 'POST';

function get(host, uri, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = GET_METHOD,
      body = undefined;
  request(host, uri, parameters, method, body, callback);
}

function post(host, uri, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = POST_METHOD,
      body = JSON.stringify(json);
  request(host, uri, parameters, method, body, callback);
}

module.exports = {
  get: get,
  post: post
};

function request(host, uri, parameters, method, body, callback) {
  var url = urlFromHostURIAndParameters(host, uri, parameters),
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;

    if (readyState == 4) {
      var json = null;

      if (status == 200) {
        var jsonString = responseText; ///

        try {
          json = JSON.parse(jsonString);
        } catch (error) {///
        }

        callback(json);
      }
    }
  };

  xmlHttpRequest.open(method, url, true);
  xmlHttpRequest.setRequestHeader('content-type', 'application/json;charset=UTF-8');
  xmlHttpRequest.send(body);
}

function urlFromHostURIAndParameters(host, uri, parameters) {
  var queryString = queryStringFromParameters(parameters),
      url = queryString === '' ? "".concat(host).concat(uri) : "".concat(host).concat(uri, "?").concat(queryString);
  return url;
}

function queryStringFromParameters(parameters) {
  var names = Object.keys(parameters),
      namesLength = names.length,
      lastIndex = namesLength - 1,
      queryString = names.reduce(function (queryString, name, index) {
    var value = parameters[name],
        encodedName = encodeURIComponent(name),
        encodedValue = encodeURIComponent(value),
        ampersandOrNothing = index !== lastIndex ? '&' : '';
    queryString += "".concat(encodedName, "=").concat(encodedValue).concat(ampersandOrNothing);
    return queryString;
  }, '');
  return queryString;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXguanMiXSwibmFtZXMiOlsiR0VUX01FVEhPRCIsIlBPU1RfTUVUSE9EIiwiZ2V0IiwiaG9zdCIsInVyaSIsInBhcmFtZXRlcnMiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsIm1ldGhvZCIsImJvZHkiLCJyZXF1ZXN0IiwicG9zdCIsImpzb24iLCJKU09OIiwic3RyaW5naWZ5IiwibW9kdWxlIiwiZXhwb3J0cyIsInVybCIsInVybEZyb21Ib3N0VVJJQW5kUGFyYW1ldGVycyIsInhtbEh0dHBSZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwianNvblN0cmluZyIsInBhcnNlIiwiZXJyb3IiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJxdWVyeVN0cmluZyIsInF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMiLCJuYW1lcyIsIk9iamVjdCIsImtleXMiLCJuYW1lc0xlbmd0aCIsImxlbmd0aCIsImxhc3RJbmRleCIsInJlZHVjZSIsIm5hbWUiLCJpbmRleCIsInZhbHVlIiwiZW5jb2RlZE5hbWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVkVmFsdWUiLCJhbXBlcnNhbmRPck5vdGhpbmciXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFVBQVUsR0FBRyxLQUFuQjtBQUFBLElBQ01DLFdBQVcsR0FBRyxNQURwQjs7QUFHQSxTQUFTQyxHQUFULENBQWFDLElBQWIsRUFBbUJDLEdBQW5CLEVBQXdCQyxVQUF4QixFQUFvQ0MsUUFBcEMsRUFBOEM7QUFDNUMsTUFBSUEsUUFBUSxLQUFLQyxTQUFqQixFQUE0QjtBQUMxQkQsSUFBQUEsUUFBUSxHQUFHRCxVQUFYLENBRDBCLENBQ0g7O0FBQ3ZCQSxJQUFBQSxVQUFVLEdBQUcsRUFBYjtBQUNEOztBQUVELE1BQU1HLE1BQU0sR0FBR1IsVUFBZjtBQUFBLE1BQ01TLElBQUksR0FB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U0FBUyxHQUFHRixXQUFXLEdBQUcsQ0FGaEM7QUFBQSxNQUdNTCxXQUFXLEdBQUdFLEtBQUssQ0FBQ00sTUFBTixDQUFhLFVBQVNSLFdBQVQsRUFBc0JTLElBQXRCLEVBQTRCQyxLQUE1QixFQUFtQztBQUM1RCxRQUFNQyxLQUFLLEdBQUdyQyxVQUFVLENBQUNtQyxJQUFELENBQXhCO0FBQUEsUUFDTUcsV0FBVyxHQUFHQyxrQkFBa0IsQ0FBQ0osSUFBRCxDQUR0QztBQUFBLFFBRU1LLFlBQVksR0FBR0Qsa0JBQWtCLENBQUNGLEtBQUQsQ0FGdkM7QUFBQSxRQUdNSSxrQkFBa0IsR0FBSUwsS0FBSyxLQUFLSCxTQUFYLEdBQXdCLEdBQXhCLEdBQThCLEVBSHpEO0FBS0FQLElBQUFBLFdBQVcsY0FBT1ksV0FBUCxjQUFzQkUsWUFBdEIsU0FBcUNDLGtCQUFyQyxDQUFYO0FBRUEsV0FBT2YsV0FBUDtBQUNELEdBVGEsRUFTWCxFQVRXLENBSHBCO0FBY0EsU0FBT0EsV0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBHRVRfTUVUSE9EID0gJ0dFVCcsXG4gICAgICBQT1NUX01FVEhPRCA9ICdQT1NUJztcblxuZnVuY3Rpb24gZ2V0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IHBhcmFtZXRlcnM7IC8vL1xuICAgIHBhcmFtZXRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IEdFVF9NRVRIT0QsXG4gICAgICAgIGJvZHkgPSB1bmRlZmluZWQ7XG5cbiAgcmVxdWVzdChob3N0LCB1cmksIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBwb3N0KGhvc3QsIHVyaSwganNvbiwgcGFyYW1ldGVycywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxsYmFjayA9IHBhcmFtZXRlcnM7IC8vL1xuICAgIHBhcmFtZXRlcnMgPSB7fTtcbiAgfVxuXG4gIGNvbnN0IG1ldGhvZCA9IFBPU1RfTUVUSE9ELFxuICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoanNvbik7XG5cbiAgcmVxdWVzdChob3N0LCB1cmksIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0LFxuICBwb3N0XG59O1xuXG5mdW5jdGlvbiByZXF1ZXN0KGhvc3QsIHVyaSwgcGFyYW1ldGVycywgbWV0aG9kLCBib2R5LCBjYWxsYmFjaykge1xuICBjb25zdCB1cmwgPSB1cmxGcm9tSG9zdFVSSUFuZFBhcmFtZXRlcnMoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzKSxcbiAgICAgICAgeG1sSHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICB4bWxIdHRwUmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCB7IHJlYWR5U3RhdGUsIHN0YXR1cywgcmVzcG9uc2VUZXh0IH0gPSB4bWxIdHRwUmVxdWVzdDtcblxuICAgIGlmIChyZWFkeVN0YXRlID09IDQpIHtcbiAgICAgIGxldCBqc29uID0gbnVsbDtcblxuICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgY29uc3QganNvblN0cmluZyA9IHJlc3BvbnNlVGV4dDsgLy8vXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLy9cbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKGpzb24pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB4bWxIdHRwUmVxdWVzdC5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcblxuICB4bWxIdHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Jyk7XG5cbiAgeG1sSHR0cFJlcXVlc3Quc2VuZChib2R5KTtcbn1cblxuZnVuY3Rpb24gdXJsRnJvbUhvc3RVUklBbmRQYXJhbWV0ZXJzKGhvc3QsIHVyaSwgcGFyYW1ldGVycykge1xuICBjb25zdCBxdWVyeVN0cmluZyA9IHF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMocGFyYW1ldGVycyksXG4gICAgICAgIHVybCA9IChxdWVyeVN0cmluZyA9PT0gJycpID9cbiAgICAgICAgICAgICAgICBgJHtob3N0fSR7dXJpfWAgOlxuICAgICAgICAgICAgICAgICAgYCR7aG9zdH0ke3VyaX0/JHtxdWVyeVN0cmluZ31gO1xuXG4gIHJldHVybiB1cmw7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLFxuICAgICAgICBuYW1lc0xlbmd0aCA9IG5hbWVzLmxlbmd0aCxcbiAgICAgICAgbGFzdEluZGV4ID0gbmFtZXNMZW5ndGggLSAxLFxuICAgICAgICBxdWVyeVN0cmluZyA9IG5hbWVzLnJlZHVjZShmdW5jdGlvbihxdWVyeVN0cmluZywgbmFtZSwgaW5kZXgpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtZXRlcnNbbmFtZV0sXG4gICAgICAgICAgICAgICAgZW5jb2RlZE5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQobmFtZSksXG4gICAgICAgICAgICAgICAgZW5jb2RlZFZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSxcbiAgICAgICAgICAgICAgICBhbXBlcnNhbmRPck5vdGhpbmcgPSAoaW5kZXggIT09IGxhc3RJbmRleCkgPyAnJicgOiAnJztcbiAgXG4gICAgICAgICAgcXVlcnlTdHJpbmcgKz0gYCR7ZW5jb2RlZE5hbWV9PSR7ZW5jb2RlZFZhbHVlfSR7YW1wZXJzYW5kT3JOb3RoaW5nfWA7XG4gIFxuICAgICAgICAgIHJldHVybiBxdWVyeVN0cmluZztcbiAgICAgICAgfSwgJycpO1xuXG4gIHJldHVybiBxdWVyeVN0cmluZztcbn1cbiJdfQ==