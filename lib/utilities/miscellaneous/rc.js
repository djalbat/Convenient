'use strict';

var path = require('path');

var arrayUtilities = require('../../utilities/array'),
    fileSystemUtilities = require('../../utilities/fileSystem');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    readFile = fileSystemUtilities.readFile,
    writeFile = fileSystemUtilities.writeFile;


var rcBaseExtension = '';

function rc() {
  var environmentNameOrArgv = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  var environment = void 0,
      environmentName = void 0;

  if (environmentNameOrArgv instanceof Array) {
    var argv = environmentNameOrArgv;

    environmentName = environmentNameFromArgv(argv);
  } else {
    environmentName = environmentNameOrArgv;
  }

  var json = readRCFile(),
      environments = json.environments;


  if (environmentName === null) {
    var firstEnvironment = first(environments);

    environment = firstEnvironment; ///
  } else {
    environment = environments.find(function (environment) {
      var name = environment.name,
          found = name === environmentName;


      return found;
    });
  }

  delete environment.name;

  Object.assign(rc, environment);

  return environment;
}

function readRCFile() {
  var filePath = './.' + rcBaseExtension + 'rc',
      absoluteFilePath = path.resolve(filePath),
      fileContent = readFile(absoluteFilePath),
      json = JSON.parse(fileContent);

  return json;
}

function writeRCFile(json) {
  var filePath = './.' + rcBaseExtension + 'rc',
      absoluteFilePath = path.resolve(filePath),
      fileContent = JSON.stringify(json, null, '\t');

  writeFile(absoluteFilePath, fileContent);
}

function updateRCFile(addedPropperties) {
  var json = readRCFile();

  if (addedPropperties) {
    Object.assign(json, addedPropperties);
  }

  for (var _len = arguments.length, deletedPropertyNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    deletedPropertyNames[_key - 1] = arguments[_key];
  }

  deletedPropertyNames.forEach(function (deletedPropertyName) {
    delete json[deletedPropertyName];
  });

  writeRCFile(json);
}

function setRCBaseExtension(baseExtension) {
  rcBaseExtension = baseExtension;
}

Object.assign(rc, {
  readRCFile: readRCFile,
  writeRCFile: writeRCFile,
  updateRCFile: updateRCFile,
  setRCBaseExtension: setRCBaseExtension
});

module.exports = rc;

function environmentNameFromArgv(argv) {
  var environmentName = null;

  argv.find(function (argument) {
    ///
    var matches = argument.match(/\-\-environment=(.+)/),
        found = matches !== null;

    if (found) {
      var secondMatch = second(matches);

      environmentName = secondMatch;
    }

    return found;
  });

  return environmentName;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi91dGlsaXRpZXMvbWlzY2VsbGFuZW91cy9yYy5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsImZpcnN0Iiwic2Vjb25kIiwicmVhZEZpbGUiLCJ3cml0ZUZpbGUiLCJyY0Jhc2VFeHRlbnNpb24iLCJyYyIsImVudmlyb25tZW50TmFtZU9yQXJndiIsImVudmlyb25tZW50IiwiZW52aXJvbm1lbnROYW1lIiwiQXJyYXkiLCJhcmd2IiwiZW52aXJvbm1lbnROYW1lRnJvbUFyZ3YiLCJyZWFkUkNGaWxlIiwiZW52aXJvbm1lbnRzIiwianNvbiIsImZpcnN0RW52aXJvbm1lbnQiLCJmaW5kIiwibmFtZSIsImZvdW5kIiwiT2JqZWN0IiwiYXNzaWduIiwiZmlsZVBhdGgiLCJhYnNvbHV0ZUZpbGVQYXRoIiwicmVzb2x2ZSIsImZpbGVDb250ZW50IiwiSlNPTiIsInBhcnNlIiwid3JpdGVSQ0ZpbGUiLCJzdHJpbmdpZnkiLCJ1cGRhdGVSQ0ZpbGUiLCJhZGRlZFByb3BwZXJ0aWVzIiwiZGVsZXRlZFByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwiZGVsZXRlZFByb3BlcnR5TmFtZSIsInNldFJDQmFzZUV4dGVuc2lvbiIsImJhc2VFeHRlbnNpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJndW1lbnQiLCJtYXRjaGVzIiwibWF0Y2giLCJzZWNvbmRNYXRjaCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7O0FBRUEsSUFBTUMsaUJBQWlCRCxRQUFRLHVCQUFSLENBQXZCO0FBQUEsSUFDTUUsc0JBQXNCRixRQUFRLDRCQUFSLENBRDVCOztJQUdRRyxLLEdBQWtCRixjLENBQWxCRSxLO0lBQU9DLE0sR0FBV0gsYyxDQUFYRyxNO0lBQ1BDLFEsR0FBd0JILG1CLENBQXhCRyxRO0lBQVVDLFMsR0FBY0osbUIsQ0FBZEksUzs7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LFVBQU11QixjQUFjeEMsT0FBT3NDLE9BQVAsQ0FBcEI7O0FBRUEvQix3QkFBa0JpQyxXQUFsQjtBQUNEOztBQUVELFdBQU92QixLQUFQO0FBQ0QsR0FYRDs7QUFhQSxTQUFPVixlQUFQO0FBQ0QiLCJmaWxlIjoicmMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmNvbnN0IGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICBmaWxlU3lzdGVtVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2ZpbGVTeXN0ZW0nKTtcblxuY29uc3QgeyBmaXJzdCwgc2Vjb25kIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgcmVhZEZpbGUsIHdyaXRlRmlsZSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxubGV0IHJjQmFzZUV4dGVuc2lvbiA9ICcnO1xuXG5mdW5jdGlvbiByYyhlbnZpcm9ubWVudE5hbWVPckFyZ3YgPSBudWxsKSB7XG4gIGxldCBlbnZpcm9ubWVudCxcbiAgICAgIGVudmlyb25tZW50TmFtZTtcblxuICBpZiAoZW52aXJvbm1lbnROYW1lT3JBcmd2IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBjb25zdCBhcmd2ID0gZW52aXJvbm1lbnROYW1lT3JBcmd2O1xuXG4gICAgZW52aXJvbm1lbnROYW1lID0gZW52aXJvbm1lbnROYW1lRnJvbUFyZ3YoYXJndik7XG4gIH0gZWxzZSB7XG4gICAgZW52aXJvbm1lbnROYW1lID0gZW52aXJvbm1lbnROYW1lT3JBcmd2O1xuICB9XG5cbiAgY29uc3QganNvbiA9IHJlYWRSQ0ZpbGUoKSxcbiAgICAgICAgeyBlbnZpcm9ubWVudHMgfSA9IGpzb247XG5cbiAgaWYgKGVudmlyb25tZW50TmFtZSA9PT0gbnVsbCkge1xuICAgIGNvbnN0IGZpcnN0RW52aXJvbm1lbnQgPSBmaXJzdChlbnZpcm9ubWVudHMpO1xuXG4gICAgZW52aXJvbm1lbnQgPSBmaXJzdEVudmlyb25tZW50OyAvLy9cbiAgfSBlbHNlIHtcbiAgICBlbnZpcm9ubWVudCA9IGVudmlyb25tZW50cy5maW5kKGZ1bmN0aW9uKGVudmlyb25tZW50KSB7XG4gICAgICBjb25zdCB7IG5hbWUgfSA9IGVudmlyb25tZW50LFxuICAgICAgICAgICAgZm91bmQgPSAobmFtZSA9PT0gZW52aXJvbm1lbnROYW1lKTtcblxuICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH0pO1xuICB9XG5cbiAgZGVsZXRlIGVudmlyb25tZW50Lm5hbWU7XG5cbiAgT2JqZWN0LmFzc2lnbihyYywgZW52aXJvbm1lbnQpO1xuXG4gIHJldHVybiBlbnZpcm9ubWVudDtcbn1cblxuZnVuY3Rpb24gcmVhZFJDRmlsZSgpIHtcbiAgY29uc3QgZmlsZVBhdGggPSBgLi8uJHtyY0Jhc2VFeHRlbnNpb259cmNgLFxuICAgICAgICBhYnNvbHV0ZUZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKGZpbGVQYXRoKSxcbiAgICAgICAgZmlsZUNvbnRlbnQgPSByZWFkRmlsZShhYnNvbHV0ZUZpbGVQYXRoKSxcbiAgICAgICAganNvbiA9IEpTT04ucGFyc2UoZmlsZUNvbnRlbnQpO1xuXG4gIHJldHVybiBqc29uOyAgICAgIFxufVxuXG5mdW5jdGlvbiB3cml0ZVJDRmlsZShqc29uKSB7XG4gIGNvbnN0IGZpbGVQYXRoID0gYC4vLiR7cmNCYXNlRXh0ZW5zaW9ufXJjYCxcbiAgICAgICAgYWJzb2x1dGVGaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShmaWxlUGF0aCksXG4gICAgICAgIGZpbGVDb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoanNvbiwgbnVsbCwgYFxcdGApO1xuXG4gIHdyaXRlRmlsZShhYnNvbHV0ZUZpbGVQYXRoLCBmaWxlQ29udGVudCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVJDRmlsZShhZGRlZFByb3BwZXJ0aWVzLCAuLi5kZWxldGVkUHJvcGVydHlOYW1lcykge1xuICBsZXQganNvbiA9IHJlYWRSQ0ZpbGUoKTtcblxuICBpZiAoYWRkZWRQcm9wcGVydGllcykge1xuICAgIE9iamVjdC5hc3NpZ24oanNvbiwgYWRkZWRQcm9wcGVydGllcyk7XG4gIH1cblxuICBkZWxldGVkUHJvcGVydHlOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGRlbGV0ZWRQcm9wZXJ0eU5hbWUpIHtcbiAgICBkZWxldGUganNvbltkZWxldGVkUHJvcGVydHlOYW1lXTtcbiAgfSk7XG5cbiAgd3JpdGVSQ0ZpbGUoanNvbik7ICAgICAgXG59XG5cbmZ1bmN0aW9uIHNldFJDQmFzZUV4dGVuc2lvbihiYXNlRXh0ZW5zaW9uKSB7IHJjQmFzZUV4dGVuc2lvbiA9IGJhc2VFeHRlbnNpb247IH1cblxuT2JqZWN0LmFzc2lnbihyYywge1xuICByZWFkUkNGaWxlOiByZWFkUkNGaWxlLFxuICB3cml0ZVJDRmlsZTogd3JpdGVSQ0ZpbGUsXG4gIHVwZGF0ZVJDRmlsZTogdXBkYXRlUkNGaWxlLFxuICBzZXRSQ0Jhc2VFeHRlbnNpb246IHNldFJDQmFzZUV4dGVuc2lvblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmM7XG5cbmZ1bmN0aW9uIGVudmlyb25tZW50TmFtZUZyb21Bcmd2KGFyZ3YpIHtcbiAgbGV0IGVudmlyb25tZW50TmFtZSA9IG51bGw7XG5cbiAgYXJndi5maW5kKGZ1bmN0aW9uKGFyZ3VtZW50KSB7ICAvLy9cbiAgICBjb25zdCBtYXRjaGVzID0gYXJndW1lbnQubWF0Y2goL1xcLVxcLWVudmlyb25tZW50PSguKykvKSxcbiAgICAgICAgICBmb3VuZCA9IChtYXRjaGVzICE9PSBudWxsKTtcblxuICAgIGlmIChmb3VuZCkge1xuICAgICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICAgIGVudmlyb25tZW50TmFtZSA9IHNlY29uZE1hdGNoO1xuICAgIH1cblxuICAgIHJldHVybiBmb3VuZDtcbiAgfSk7XG5cbiAgcmV0dXJuIGVudmlyb25tZW50TmFtZTtcbn1cbiJdfQ==