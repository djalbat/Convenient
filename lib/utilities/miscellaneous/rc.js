'use strict';

var path = require('path');

var arrayUtilities = require('../../utilities/array'),
    fileSystemUtilities = require('../../utilities/fileSystem');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    readFile = fileSystemUtilities.readFile;


var rcBaseExtension = '';

function rc() {
  var environmentNameOrArgv = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  var environment = void 0,
      environmentName = void 0;

  if (environmentNameOrArgv instanceof Array) {
    var argv = environmentNameOrArgv;

    environmentName = environmentNameFromArgv(argv);
  } else {
    environmentName = environmentNameOrArgv;
  }

  var filePath = './.' + rcBaseExtension + 'rc',
      absoluteFilePath = path.resolve(filePath),
      fileContent = readFile(absoluteFilePath),
      json = JSON.parse(fileContent),
      environments = json.environments;


  if (environmentName === null) {
    var firstEnvironment = first(environments);

    environment = firstEnvironment; ///
  } else {
    environment = environments.find(function (environment) {
      var name = environment.name,
          found = name === environmentName;


      return found;
    });
  }

  delete environment.name;

  Object.assign(rc, environment);

  return environment;
}

function setRCBaseExtension(baseExtension) {
  rcBaseExtension = baseExtension;
}

Object.assign(rc, {
  setRCBaseExtension: setRCBaseExtension
});

module.exports = rc;

function environmentNameFromArgv(argv) {
  var environmentName = null;

  argv.find(function (argument) {
    ///
    var matches = argument.match(/\-\-environment=(.+)/),
        found = matches !== null;

    if (found) {
      var secondMatch = second(matches);

      environmentName = secondMatch;
    }

    return found;
  });

  return environmentName;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi91dGlsaXRpZXMvbWlzY2VsbGFuZW91cy9yYy5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsImZpcnN0Iiwic2Vjb25kIiwicmVhZEZpbGUiLCJyY0Jhc2VFeHRlbnNpb24iLCJyYyIsImVudmlyb25tZW50TmFtZU9yQXJndiIsImVudmlyb25tZW50IiwiZW52aXJvbm1lbnROYW1lIiwiQXJyYXkiLCJhcmd2IiwiZW52aXJvbm1lbnROYW1lRnJvbUFyZ3YiLCJhYnNvbHV0ZUZpbGVQYXRoIiwicmVzb2x2ZSIsImZpbGVQYXRoIiwiZmlsZUNvbnRlbnQiLCJqc29uIiwiSlNPTiIsInBhcnNlIiwiZW52aXJvbm1lbnRzIiwiZmlyc3RFbnZpcm9ubWVudCIsImZpbmQiLCJuYW1lIiwiZm91bmQiLCJPYmplY3QiLCJhc3NpZ24iLCJzZXRSQ0Jhc2VFeHRlbnNpb24iLCJiYXNlRXh0ZW5zaW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsImFyZ3VtZW50IiwibWF0Y2hlcyIsIm1hdGNoIiwic2Vjb25kTWF0Y2giXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLE9BQU9DLFFBQVEsTUFBUixDQUFiOztBQUVBLElBQU1DLGlCQUFpQkQsUUFBUSx1QkFBUixDQUF2QjtBQUFBLElBQ01FLHNCQUFzQkYsUUFBUSw0QkFBUixDQUQ1Qjs7SUFHUUcsSyxHQUFrQkYsYyxDQUFsQkUsSztJQUFPQyxNLEdBQVdILGMsQ0FBWEcsTTtJQUNQQyxRLEdBQWFILG1CLENBQWJHLFE7OztBQUVSLElBQUlDLGtCQUFrQixFQUF0Qjs7QUFFQSxTQUFTQyxFQUFULEdBQTBDO0FBQUEsTUFBOUJDLHFCQUE4Qix1RUFBTixJQUFNOztBQUN4QyxNQUFJQyxvQkFBSjtBQUFBLE1BQ0lDLHdCQURKOztBQUdBLE1BQUlGLGlDQUFpQ0csS0FBckMsRUFBNEM7QUFDMUMsUUFBTUMsT0FBT0oscUJBQWI7O0FBRUFFLHNCQUFrQkcsd0JBQXdCRCxJQUF4QixDQUFsQjtBQUNELEdBSkQsTUFJTztBQUNMRixzQkFBa0JGLHFCQUFsQjtBQUNEOztBQUVLLHlCQUFpQkYsZUFBakI7QUFBQSxNQUNBUSxnQkFEQSxHQUNtQmYsS0FBS2dCLE9BQUwsQ0FBYUMsUUFBYixDQURuQjtBQUFBLE1BRUFDLFdBRkEsR0FFY1osU0FBU1MsZ0JBQVQsQ0FGZDtBQUFBLE1BR0FJLElBSEEsR0FHT0MsS0FBS0MsS0FBTCxDQUFXSCxXQUFYLENBSFA7QUFBQSxNQUlFSSxZQUpGLEdBSW1CSCxJQUpuQixDQUlFRyxZQUpGOzs7QUFNTixNQUFJWCxvQkFBb0IsSUFBeEIsRUFBOEI7QUFDNUIsUUFBTVksbUJBQW1CbkIsTUFBTWtCLFlBQU4sQ0FBekI7O0FBRUFaLGtCQUFjYSxnQkFBZCxDQUg0QixDQUdJO0FBQ2pDLEdBSkQsTUFJTztBQUNMYixrQkFBY1ksYUFBYUUsSUFBYixDQUFrQixVQUFTZCxXQUFULEVBQXNCO0FBQzlDLFVBQUVlLElBQUYsR0FBV2YsV0FBWCxDQUFFZSxJQUFGO0FBQUEsVUFDQUMsS0FEQSxHQUNTRCxTQUFTZCxlQURsQjs7O0FBR04sYUFBT2UsS0FBUDtBQUNELEtBTGEsQ0FBZDtBQU1EOztBQUVELFNBQU9oQixZQUFZZSxJQUFuQjs7QUFFQUUsU0FBT0MsTUFBUCxDQUFjcEIsRUFBZCxFQUFrQkUsV0FBbEI7O0FBRUEsU0FBT0EsV0FBUDtBQUNEOztBQUVELFNBQVNtQixrQkFBVCxDQUE0QkMsYUFBNUIsRUFBMkM7QUFBRXZCLG9CQUFrQnVCLGFBQWxCO0FBQWtDOztBQUUvRUgsT0FBT0MsTUFBUCxDQUFjcEIsRUFBZCxFQUFrQjtBQUNoQnFCLHNCQUFvQkE7QUFESixDQUFsQjs7QUFJQUUsT0FBT0MsT0FBUCxHQUFpQnhCLEVBQWpCOztBQUVBLFNBQVNNLHVCQUFULENBQWlDRCxJQUFqQyxFQUF1QztBQUNyQyxNQUFJRixrQkFBa0IsSUFBdEI7O0FBRUFFLE9BQUtXLElBQUwsQ0FBVSxVQUFTUyxRQUFULEVBQW1CO0FBQUc7QUFDOUIsUUFBTUMsVUFBVUQsU0FBU0UsS0FBVCxDQUFlLHNCQUFmLENBQWhCO0FBQUEsUUFDTVQsUUFBU1EsWUFBWSxJQUQzQjs7QUFHQSxRQUFJUixLQUFKLEVBQVc7QUFDVCxVQUFNVSxjQUFjL0IsT0FBTzZCLE9BQVAsQ0FBcEI7O0FBRUF2Qix3QkFBa0J5QixXQUFsQjtBQUNEOztBQUVELFdBQU9WLEtBQVA7QUFDRCxHQVhEOztBQWFBLFNBQU9mLGVBQVA7QUFDRCIsImZpbGUiOiJyYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIGZpbGVTeXN0ZW1VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvZmlsZVN5c3RlbScpO1xuXG5jb25zdCB7IGZpcnN0LCBzZWNvbmQgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyByZWFkRmlsZSB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxubGV0IHJjQmFzZUV4dGVuc2lvbiA9ICcnO1xuXG5mdW5jdGlvbiByYyhlbnZpcm9ubWVudE5hbWVPckFyZ3YgPSBudWxsKSB7XG4gIGxldCBlbnZpcm9ubWVudCxcbiAgICAgIGVudmlyb25tZW50TmFtZTtcblxuICBpZiAoZW52aXJvbm1lbnROYW1lT3JBcmd2IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBjb25zdCBhcmd2ID0gZW52aXJvbm1lbnROYW1lT3JBcmd2O1xuXG4gICAgZW52aXJvbm1lbnROYW1lID0gZW52aXJvbm1lbnROYW1lRnJvbUFyZ3YoYXJndik7XG4gIH0gZWxzZSB7XG4gICAgZW52aXJvbm1lbnROYW1lID0gZW52aXJvbm1lbnROYW1lT3JBcmd2O1xuICB9XG5cbiAgY29uc3QgZmlsZVBhdGggPSBgLi8uJHtyY0Jhc2VFeHRlbnNpb259cmNgLFxuICAgICAgICBhYnNvbHV0ZUZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKGZpbGVQYXRoKSxcbiAgICAgICAgZmlsZUNvbnRlbnQgPSByZWFkRmlsZShhYnNvbHV0ZUZpbGVQYXRoKSxcbiAgICAgICAganNvbiA9IEpTT04ucGFyc2UoZmlsZUNvbnRlbnQpLFxuICAgICAgICB7IGVudmlyb25tZW50cyB9ID0ganNvbjtcblxuICBpZiAoZW52aXJvbm1lbnROYW1lID09PSBudWxsKSB7XG4gICAgY29uc3QgZmlyc3RFbnZpcm9ubWVudCA9IGZpcnN0KGVudmlyb25tZW50cyk7XG5cbiAgICBlbnZpcm9ubWVudCA9IGZpcnN0RW52aXJvbm1lbnQ7IC8vL1xuICB9IGVsc2Uge1xuICAgIGVudmlyb25tZW50ID0gZW52aXJvbm1lbnRzLmZpbmQoZnVuY3Rpb24oZW52aXJvbm1lbnQpIHtcbiAgICAgIGNvbnN0IHsgbmFtZSB9ID0gZW52aXJvbm1lbnQsXG4gICAgICAgICAgICBmb3VuZCA9IChuYW1lID09PSBlbnZpcm9ubWVudE5hbWUpO1xuXG4gICAgICByZXR1cm4gZm91bmQ7XG4gICAgfSk7XG4gIH1cblxuICBkZWxldGUgZW52aXJvbm1lbnQubmFtZTtcblxuICBPYmplY3QuYXNzaWduKHJjLCBlbnZpcm9ubWVudCk7XG5cbiAgcmV0dXJuIGVudmlyb25tZW50O1xufVxuXG5mdW5jdGlvbiBzZXRSQ0Jhc2VFeHRlbnNpb24oYmFzZUV4dGVuc2lvbikgeyByY0Jhc2VFeHRlbnNpb24gPSBiYXNlRXh0ZW5zaW9uOyB9XG5cbk9iamVjdC5hc3NpZ24ocmMsIHtcbiAgc2V0UkNCYXNlRXh0ZW5zaW9uOiBzZXRSQ0Jhc2VFeHRlbnNpb25cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJjO1xuXG5mdW5jdGlvbiBlbnZpcm9ubWVudE5hbWVGcm9tQXJndihhcmd2KSB7XG4gIGxldCBlbnZpcm9ubWVudE5hbWUgPSBudWxsO1xuXG4gIGFyZ3YuZmluZChmdW5jdGlvbihhcmd1bWVudCkgeyAgLy8vXG4gICAgY29uc3QgbWF0Y2hlcyA9IGFyZ3VtZW50Lm1hdGNoKC9cXC1cXC1lbnZpcm9ubWVudD0oLispLyksXG4gICAgICAgICAgZm91bmQgPSAobWF0Y2hlcyAhPT0gbnVsbCk7XG5cbiAgICBpZiAoZm91bmQpIHtcbiAgICAgIGNvbnN0IHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpO1xuXG4gICAgICBlbnZpcm9ubWVudE5hbWUgPSBzZWNvbmRNYXRjaDtcbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmQ7XG4gIH0pO1xuXG4gIHJldHVybiBlbnZpcm9ubWVudE5hbWU7XG59XG4iXX0=