'use strict';

var path = require('path');

var arrayUtilities = require('../../utilities/array'),
    fileSystemUtilities = require('../../utilities/fileSystem');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    readFile = fileSystemUtilities.readFile,
    writeFile = fileSystemUtilities.writeFile;


var rcBaseExtension = '';

function rc() {
  var environmentNameOrArgv = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  var environment = void 0,
      environmentName = void 0;

  if (environmentNameOrArgv instanceof Array) {
    var argv = environmentNameOrArgv;

    environmentName = environmentNameFromArgv(argv);
  } else {
    environmentName = environmentNameOrArgv;
  }

  var json = readRCFile(),
      environments = json.environments;


  if (environmentName === null) {
    var firstEnvironment = first(environments);

    environment = firstEnvironment; ///
  } else {
    environment = environments.find(function (environment) {
      var name = environment.name,
          found = name === environmentName;


      return found;
    });
  }

  delete environment.name;

  Object.assign(rc, environment);

  return environment;
}

function readRCFile() {
  var filePath = './.' + rcBaseExtension + 'rc',
      absoluteFilePath = path.resolve(filePath),
      fileContent = readFile(absoluteFilePath),
      json = JSON.parse(fileContent);

  return json;
}

function writeRCFile(json) {
  var filePath = './.' + rcBaseExtension + 'rc',
      absoluteFilePath = path.resolve(filePath),
      fileContent = JSON.stringify(json, null, '\t');

  writeFile(absoluteFilePath, fileContent);
}

function updateRCFile(json) {
  var oldJSON = readRCFile(),
      newJSON = Object.assign(oldJSON, json);

  writeRCFile(newJSON);
}

function setRCBaseExtension(baseExtension) {
  rcBaseExtension = baseExtension;
}

Object.assign(rc, {
  readRCFile: readRCFile,
  writeRCFile: writeRCFile,
  updateRCFile: updateRCFile,
  setRCBaseExtension: setRCBaseExtension
});

module.exports = rc;

function environmentNameFromArgv(argv) {
  var environmentName = null;

  argv.find(function (argument) {
    ///
    var matches = argument.match(/\-\-environment=(.+)/),
        found = matches !== null;

    if (found) {
      var secondMatch = second(matches);

      environmentName = secondMatch;
    }

    return found;
  });

  return environmentName;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi91dGlsaXRpZXMvbWlzY2VsbGFuZW91cy9yYy5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsImZpcnN0Iiwic2Vjb25kIiwicmVhZEZpbGUiLCJ3cml0ZUZpbGUiLCJyY0Jhc2VFeHRlbnNpb24iLCJyYyIsImVudmlyb25tZW50TmFtZU9yQXJndiIsImVudmlyb25tZW50IiwiZW52aXJvbm1lbnROYW1lIiwiQXJyYXkiLCJhcmd2IiwiZW52aXJvbm1lbnROYW1lRnJvbUFyZ3YiLCJyZWFkUkNGaWxlIiwiZW52aXJvbm1lbnRzIiwianNvbiIsImZpcnN0RW52aXJvbm1lbnQiLCJmaW5kIiwibmFtZSIsImZvdW5kIiwiT2JqZWN0IiwiYXNzaWduIiwiZmlsZVBhdGgiLCJhYnNvbHV0ZUZpbGVQYXRoIiwicmVzb2x2ZSIsImZpbGVDb250ZW50IiwiSlNPTiIsInBhcnNlIiwid3JpdGVSQ0ZpbGUiLCJzdHJpbmdpZnkiLCJ1cGRhdGVSQ0ZpbGUiLCJvbGRKU09OIiwibmV3SlNPTiIsInNldFJDQmFzZUV4dGVuc2lvbiIsImJhc2VFeHRlbnNpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJndW1lbnQiLCJtYXRjaGVzIiwibWF0Y2giLCJzZWNvbmRNYXRjaCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7O0FBRUEsSUFBTUMsaUJBQWlCRCxRQUFRLHVCQUFSLENBQXZCO0FBQUEsSUFDTUUsc0JBQXNCRixRQUFRLDRCQUFSLENBRDVCOztJQUdRRyxLLEdBQWtCRixjLENBQWxCRSxLO0lBQU9DLE0sR0FBV0gsYyxDQUFYRyxNO0lBQ1BDLFEsR0FBd0JILG1CLENBQXhCRyxRO0lBQVVDLFMsR0FBY0osbUIsQ0FBZEksUzs7O0FBRWxCLElBQUlDLGtCQUFrQixFQUF0Qjs7QUFFQSxTQUFTQyxFQUFULEdBQTBDO0FBQUEsTUFBOUJDLHFCQUE4Qix1RUFBTixJQUFNOztBQUN4QyxNQUFJQyxvQkFBSjtBQUFBLE1BQ0lDLHdCQURKOztBQUdBLE1BQUlGLGlDQUFpQ0csS0FBckMsRUFBNEM7QUFDMUMsUUFBTUMsT0FBT0oscUJBQWI7O0FBRUFFLHNCQUFrQkcsd0JBQXdCRCxJQUF4QixDQUFsQjtBQUNELEdBSkQsTUFJTztBQUNMRixzQkFBa0JGLHFCQUFsQjtBQUNEOztBQUVLLGFBQU9NLFlBQVA7QUFBQSxNQUNFQyxZQURGLEdBQ21CQyxJQURuQixDQUNFRCxZQURGOzs7QUFHTixNQUFJTCxvQkFBb0IsSUFBeEIsRUFBOEI7QUFDNUIsUUFBTU8sbUJBQW1CZixNQUFNYSxZQUFOLENBQXpCOztBQUVBTixrQkFBY1EsZ0JBQWQsQ0FINEIsQ0FHSTtBQUNqQyxHQUpELE1BSU87QUFDTFIsa0JBQWNNLGFBQWFHLElBQWIsQ0FBa0IsVUFBU1QsV0FBVCxFQUFzQjtBQUM5QyxVQUFFVSxJQUFGLEdBQVdWLFdBQVgsQ0FBRVUsSUFBRjtBQUFBLFVBQ0FDLEtBREEsR0FDU0QsU0FBU1QsZUFEbEI7OztBQUdOLGFBQU9VLEtBQVA7QUFDRCxLQUxhLENBQWQ7QUFNRDs7QUFFRCxTQUFPWCxZQUFZVSxJQUFuQjs7QUFFQUUsU0FBT0MsTUFBUCxDQUFjZixFQUFkLEVBQWtCRSxXQUFsQjs7QUFFQSxTQUFPQSxXQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssVUFBVCxHQUFzQjtBQUNwQixNQUFNUyxtQkFBaUJqQixlQUFqQixPQUFOO0FBQUEsTUFDTWtCLG1CQUFtQjFCLEtBQUsyQixPQUFMLENBQWFGLFFBQWIsQ0FEekI7QUFBQSxNQUVNRyxjQUFjdEIsU0FBU29CLGdCQUFULENBRnBCO0FBQUEsTUFHTVIsT0FBT1csS0FBS0MsS0FBTCxDQUFXRixXQUFYLENBSGI7O0FBS0EsU0FBT1YsSUFBUDtBQUNEOztBQUVELFNBQVNhLFdBQVQsQ0FBcUJiLElBQXJCLEVBQTJCO0FBQ3pCLE1BQU1PLG1CQUFpQmpCLGVBQWpCLE9BQU47QUFBQSxNQUNNa0IsbUJBQW1CMUIsS0FBSzJCLE9BQUwsQ0FBYUYsUUFBYixDQUR6QjtBQUFBLE1BRU1HLGNBQWNDLEtBQUtHLFNBQUwsQ0FBZWQsSUFBZixFQUFxQixJQUFyQixPQUZwQjs7QUFJQVgsWUFBVW1CLGdCQUFWLEVBQTRCRSxXQUE1QjtBQUNEOztBQUVELFNBQVNLLFlBQVQsQ0FBc0JmLElBQXRCLEVBQTRCO0FBQzFCLE1BQU1nQixVQUFVbEIsWUFBaEI7QUFBQSxNQUNNbUIsVUFBVVosT0FBT0MsTUFBUCxDQUFjVSxPQUFkLEVBQXVCaEIsSUFBdkIsQ0FEaEI7O0FBR0FhLGNBQVlJLE9BQVo7QUFDRDs7QUFFRCxTQUFTQyxrQkFBVCxDQUE0QkMsYUFBNUIsRUFBMkM7QUFBRTdCLG9CQUFrQjZCLGFBQWxCO0FBQWtDOztBQUUvRWQsT0FBT0MsTUFBUCxDQUFjZixFQUFkLEVBQWtCO0FBQ2hCTyxjQUFZQSxVQURJO0FBRWhCZSxlQUFhQSxXQUZHO0FBR2hCRSxnQkFBY0EsWUFIRTtBQUloQkcsc0JBQW9CQTtBQUpKLENBQWxCOztBQU9BRSxPQUFPQyxPQUFQLEdBQWlCOUIsRUFBakI7O0FBRUEsU0FBU00sdUJBQVQsQ0FBaUNELElBQWpDLEVBQXVDO0FBQ3JDLE1BQUlGLGtCQUFrQixJQUF0Qjs7QUFFQUUsT0FBS00sSUFBTCxDQUFVLFVBQVNvQixRQUFULEVBQW1CO0FBQUc7QUFDOUIsUUFBTUMsVUFBVUQsU0FBU0UsS0FBVCxDQUFlLHNCQUFmLENBQWhCO0FBQUEsUUFDTXBCLFFBQVNtQixZQUFZLElBRDNCOztBQUdBLFFBQUluQixLQUFKLEVBQVc7QUFDVCxVQUFNcUIsY0FBY3RDLE9BQU9vQyxPQUFQLENBQXBCOztBQUVBN0Isd0JBQWtCK0IsV0FBbEI7QUFDRDs7QUFFRCxXQUFPckIsS0FBUDtBQUNELEdBWEQ7O0FBYUEsU0FBT1YsZUFBUDtBQUNEIiwiZmlsZSI6InJjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgZmlsZVN5c3RlbVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdGllcy9maWxlU3lzdGVtJyk7XG5cbmNvbnN0IHsgZmlyc3QsIHNlY29uZCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IHJlYWRGaWxlLCB3cml0ZUZpbGUgfSA9IGZpbGVTeXN0ZW1VdGlsaXRpZXM7XG5cbmxldCByY0Jhc2VFeHRlbnNpb24gPSAnJztcblxuZnVuY3Rpb24gcmMoZW52aXJvbm1lbnROYW1lT3JBcmd2ID0gbnVsbCkge1xuICBsZXQgZW52aXJvbm1lbnQsXG4gICAgICBlbnZpcm9ubWVudE5hbWU7XG5cbiAgaWYgKGVudmlyb25tZW50TmFtZU9yQXJndiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgY29uc3QgYXJndiA9IGVudmlyb25tZW50TmFtZU9yQXJndjtcblxuICAgIGVudmlyb25tZW50TmFtZSA9IGVudmlyb25tZW50TmFtZUZyb21Bcmd2KGFyZ3YpO1xuICB9IGVsc2Uge1xuICAgIGVudmlyb25tZW50TmFtZSA9IGVudmlyb25tZW50TmFtZU9yQXJndjtcbiAgfVxuXG4gIGNvbnN0IGpzb24gPSByZWFkUkNGaWxlKCksXG4gICAgICAgIHsgZW52aXJvbm1lbnRzIH0gPSBqc29uO1xuXG4gIGlmIChlbnZpcm9ubWVudE5hbWUgPT09IG51bGwpIHtcbiAgICBjb25zdCBmaXJzdEVudmlyb25tZW50ID0gZmlyc3QoZW52aXJvbm1lbnRzKTtcblxuICAgIGVudmlyb25tZW50ID0gZmlyc3RFbnZpcm9ubWVudDsgLy8vXG4gIH0gZWxzZSB7XG4gICAgZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudHMuZmluZChmdW5jdGlvbihlbnZpcm9ubWVudCkge1xuICAgICAgY29uc3QgeyBuYW1lIH0gPSBlbnZpcm9ubWVudCxcbiAgICAgICAgICAgIGZvdW5kID0gKG5hbWUgPT09IGVudmlyb25tZW50TmFtZSk7XG5cbiAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9KTtcbiAgfVxuXG4gIGRlbGV0ZSBlbnZpcm9ubWVudC5uYW1lO1xuXG4gIE9iamVjdC5hc3NpZ24ocmMsIGVudmlyb25tZW50KTtcblxuICByZXR1cm4gZW52aXJvbm1lbnQ7XG59XG5cbmZ1bmN0aW9uIHJlYWRSQ0ZpbGUoKSB7XG4gIGNvbnN0IGZpbGVQYXRoID0gYC4vLiR7cmNCYXNlRXh0ZW5zaW9ufXJjYCxcbiAgICAgICAgYWJzb2x1dGVGaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShmaWxlUGF0aCksXG4gICAgICAgIGZpbGVDb250ZW50ID0gcmVhZEZpbGUoYWJzb2x1dGVGaWxlUGF0aCksXG4gICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGZpbGVDb250ZW50KTtcblxuICByZXR1cm4ganNvbjsgICAgICBcbn1cblxuZnVuY3Rpb24gd3JpdGVSQ0ZpbGUoanNvbikge1xuICBjb25zdCBmaWxlUGF0aCA9IGAuLy4ke3JjQmFzZUV4dGVuc2lvbn1yY2AsXG4gICAgICAgIGFic29sdXRlRmlsZVBhdGggPSBwYXRoLnJlc29sdmUoZmlsZVBhdGgpLFxuICAgICAgICBmaWxlQ29udGVudCA9IEpTT04uc3RyaW5naWZ5KGpzb24sIG51bGwsIGBcXHRgKTtcblxuICB3cml0ZUZpbGUoYWJzb2x1dGVGaWxlUGF0aCwgZmlsZUNvbnRlbnQpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVSQ0ZpbGUoanNvbikge1xuICBjb25zdCBvbGRKU09OID0gcmVhZFJDRmlsZSgpLFxuICAgICAgICBuZXdKU09OID0gT2JqZWN0LmFzc2lnbihvbGRKU09OLCBqc29uKTtcblxuICB3cml0ZVJDRmlsZShuZXdKU09OKTsgICAgICBcbn1cblxuZnVuY3Rpb24gc2V0UkNCYXNlRXh0ZW5zaW9uKGJhc2VFeHRlbnNpb24pIHsgcmNCYXNlRXh0ZW5zaW9uID0gYmFzZUV4dGVuc2lvbjsgfVxuXG5PYmplY3QuYXNzaWduKHJjLCB7XG4gIHJlYWRSQ0ZpbGU6IHJlYWRSQ0ZpbGUsXG4gIHdyaXRlUkNGaWxlOiB3cml0ZVJDRmlsZSxcbiAgdXBkYXRlUkNGaWxlOiB1cGRhdGVSQ0ZpbGUsXG4gIHNldFJDQmFzZUV4dGVuc2lvbjogc2V0UkNCYXNlRXh0ZW5zaW9uXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSByYztcblxuZnVuY3Rpb24gZW52aXJvbm1lbnROYW1lRnJvbUFyZ3YoYXJndikge1xuICBsZXQgZW52aXJvbm1lbnROYW1lID0gbnVsbDtcblxuICBhcmd2LmZpbmQoZnVuY3Rpb24oYXJndW1lbnQpIHsgIC8vL1xuICAgIGNvbnN0IG1hdGNoZXMgPSBhcmd1bWVudC5tYXRjaCgvXFwtXFwtZW52aXJvbm1lbnQ9KC4rKS8pLFxuICAgICAgICAgIGZvdW5kID0gKG1hdGNoZXMgIT09IG51bGwpO1xuXG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICBjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuICAgICAgZW52aXJvbm1lbnROYW1lID0gc2Vjb25kTWF0Y2g7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvdW5kO1xuICB9KTtcblxuICByZXR1cm4gZW52aXJvbm1lbnROYW1lO1xufVxuIl19