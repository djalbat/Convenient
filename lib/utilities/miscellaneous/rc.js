'use strict';

var path = require('path');

var arrayUtilities = require('../../utilities/array'),
    fileSystemUtilities = require('../../utilities/fileSystem');

var first = arrayUtilities.first,
    second = arrayUtilities.second,
    readFile = fileSystemUtilities.readFile,
    writeFile = fileSystemUtilities.writeFile;


var rcBaseExtension = '';

function rc() {
  var environmentNameOrArgv = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  var environment = void 0,
      environmentName = void 0;

  if (environmentNameOrArgv instanceof Array) {
    var argv = environmentNameOrArgv;

    environmentName = environmentNameFromArgv(argv);
  } else {
    environmentName = environmentNameOrArgv;
  }

  var json = readRCFile(),
      environments = json.environments;


  if (environmentName === null) {
    var firstEnvironment = first(environments);

    environment = firstEnvironment; ///
  } else {
    environment = environments.find(function (environment) {
      var name = environment.name,
          found = name === environmentName;


      return found;
    });
  }

  delete environment.name;

  Object.assign(rc, environment);

  return environment;
}

function readRCFile() {
  var filePath = './.' + rcBaseExtension + 'rc',
      absoluteFilePath = path.resolve(filePath),
      fileContent = readFile(absoluteFilePath),
      json = JSON.parse(fileContent);

  return json;
}

function writeRCFile(json) {
  var filePath = './.' + rcBaseExtension + 'rc',
      absoluteFilePath = path.resolve(filePath),
      fileContent = JSON.stringify(json, null, '\t');

  writeFile(fileContent);
}

function updateRCFile(json) {
  var oldJSON = readRCFile(),
      newJSON = Object.assign(oldJSON, json);

  writeRCFile(newJSON);
}

function setRCBaseExtension(baseExtension) {
  rcBaseExtension = baseExtension;
}

Object.assign(rc, {
  readRCFile: readRCFile,
  writeRCFile: writeRCFile,
  updateRCFile: updateRCFile,
  setRCBaseExtension: setRCBaseExtension
});

module.exports = rc;

function environmentNameFromArgv(argv) {
  var environmentName = null;

  argv.find(function (argument) {
    ///
    var matches = argument.match(/\-\-environment=(.+)/),
        found = matches !== null;

    if (found) {
      var secondMatch = second(matches);

      environmentName = secondMatch;
    }

    return found;
  });

  return environmentName;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi91dGlsaXRpZXMvbWlzY2VsbGFuZW91cy9yYy5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsImZpcnN0Iiwic2Vjb25kIiwicmVhZEZpbGUiLCJ3cml0ZUZpbGUiLCJyY0Jhc2VFeHRlbnNpb24iLCJyYyIsImVudmlyb25tZW50TmFtZU9yQXJndiIsImVudmlyb25tZW50IiwiZW52aXJvbm1lbnROYW1lIiwiQXJyYXkiLCJhcmd2IiwiZW52aXJvbm1lbnROYW1lRnJvbUFyZ3YiLCJyZWFkUkNGaWxlIiwiZW52aXJvbm1lbnRzIiwianNvbiIsImZpcnN0RW52aXJvbm1lbnQiLCJmaW5kIiwibmFtZSIsImZvdW5kIiwiT2JqZWN0IiwiYXNzaWduIiwiZmlsZVBhdGgiLCJhYnNvbHV0ZUZpbGVQYXRoIiwicmVzb2x2ZSIsImZpbGVDb250ZW50IiwiSlNPTiIsInBhcnNlIiwid3JpdGVSQ0ZpbGUiLCJzdHJpbmdpZnkiLCJ1cGRhdGVSQ0ZpbGUiLCJvbGRKU09OIiwibmV3SlNPTiIsInNldFJDQmFzZUV4dGVuc2lvbiIsImJhc2VFeHRlbnNpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJndW1lbnQiLCJtYXRjaGVzIiwibWF0Y2giLCJzZWNvbmRNYXRjaCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7O0FBRUEsSUFBTUMsaUJBQWlCRCxRQUFRLHVCQUFSLENBQXZCO0FBQUEsSUFDTUUsc0JBQXNCRixRQUFRLDRCQUFSLENBRDVCOztJQUdRRyxLLEdBQWtCRixjLENBQWxCRSxLO0lBQU9DLE0sR0FBV0gsYyxDQUFYRyxNO0lBQ1BDLFEsR0FBd0JILG1CLENBQXhCRyxRO0lBQVVDLFMsR0FBY0osbUIsQ0FBZEksUzs7O0FBRWxCLElBQUlDLGtCQUFrQixFQUF0Qjs7QUFFQSxTQUFTQyxFQUFULEdBQTBDO0FBQUEsTUFBOUJDLHFCQUE4Qix1RUFBTixJQUFNOztBQUN4QyxNQUFJQyxvQkFBSjtBQUFBLE1BQ0lDLHdCQURKOztBQUdBLE1BQUlGLGlDQUFpQ0csS0FBckMsRUFBNEM7QUFDMUMsUUFBTUMsT0FBT0oscUJBQWI7O0FBRUFFLHNCQUFrQkcsd0JBQXdCRCxJQUF4QixDQUFsQjtBQUNELEdBSkQsTUFJTztBQUNMRixzQkFBa0JGLHFCQUFsQjtBQUNEOztBQUVLLGFBQU9NLFlBQVA7QUFBQSxNQUNFQyxZQURGLEdBQ21CQyxJQURuQixDQUNFRCxZQURGOzs7QUFHTixNQUFJTCxvQkFBb0IsSUFBeEIsRUFBOEI7QUFDNUIsUUFBTU8sbUJBQW1CZixNQUFNYSxZQUFOLENBQXpCOztBQUVBTixrQkFBY1EsZ0JBQWQsQ0FINEIsQ0FHSTtBQUNqQyxHQUpELE1BSU87QUFDTFIsa0JBQWNNLGFBQWFHLElBQWIsQ0FBa0IsVUFBU1QsV0FBVCxFQUFzQjtBQUM5QyxVQUFFVSxJQUFGLEdBQVdWLFdBQVgsQ0FBRVUsSUFBRjtBQUFBLFVBQ0FDLEtBREEsR0FDU0QsU0FBU1QsZUFEbEI7OztBQUdOLGFBQU9VLEtBQVA7QUFDRCxLQUxhLENBQWQ7QUFNRDs7QUFFRCxTQUFPWCxZQUFZVSxJQUFuQjs7QUFFQUUsU0FBT0MsTUFBUCxDQUFjZixFQUFkLEVBQWtCRSxXQUFsQjs7QUFFQSxTQUFPQSxXQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssVUFBVCxHQUFzQjtBQUNwQixNQUFNUyxtQkFBaUJqQixlQUFqQixPQUFOO0FBQUEsTUFDTWtCLG1CQUFtQjFCLEtBQUsyQixPQUFMLENBQWFGLFFBQWIsQ0FEekI7QUFBQSxNQUVNRyxjQUFjdEIsU0FBU29CLGdCQUFULENBRnBCO0FBQUEsTUFHTVIsT0FBT1csS0FBS0MsS0FBTCxDQUFXRixXQUFYLENBSGI7O0FBS0EsU0FBT1YsSUFBUDtBQUNEOztBQUVELFNBQVNhLFdBQVQsQ0FBcUJiLElBQXJCLEVBQTJCO0FBQ3pCLE1BQU1PLG1CQUFpQmpCLGVBQWpCLE9BQU47QUFBQSxNQUNNa0IsbUJBQW1CMUIsS0FBSzJCLE9BQUwsQ0FBYUYsUUFBYixDQUR6QjtBQUFBLE1BRU1HLGNBQWNDLEtBQUtHLFNBQUwsQ0FBZWQsSUFBZixFQUFxQixJQUFyQixPQUZwQjs7QUFJQVgsWUFBVXFCLFdBQVY7QUFDRDs7QUFFRCxTQUFTSyxZQUFULENBQXNCZixJQUF0QixFQUE0QjtBQUMxQixNQUFNZ0IsVUFBVWxCLFlBQWhCO0FBQUEsTUFDTW1CLFVBQVVaLE9BQU9DLE1BQVAsQ0FBY1UsT0FBZCxFQUF1QmhCLElBQXZCLENBRGhCOztBQUdBYSxjQUFZSSxPQUFaO0FBQ0Q7O0FBRUQsU0FBU0Msa0JBQVQsQ0FBNEJDLGFBQTVCLEVBQTJDO0FBQUU3QixvQkFBa0I2QixhQUFsQjtBQUFrQzs7QUFFL0VkLE9BQU9DLE1BQVAsQ0FBY2YsRUFBZCxFQUFrQjtBQUNoQk8sY0FBWUEsVUFESTtBQUVoQmUsZUFBYUEsV0FGRztBQUdoQkUsZ0JBQWNBLFlBSEU7QUFJaEJHLHNCQUFvQkE7QUFKSixDQUFsQjs7QUFPQUUsT0FBT0MsT0FBUCxHQUFpQjlCLEVBQWpCOztBQUVBLFNBQVNNLHVCQUFULENBQWlDRCxJQUFqQyxFQUF1QztBQUNyQyxNQUFJRixrQkFBa0IsSUFBdEI7O0FBRUFFLE9BQUtNLElBQUwsQ0FBVSxVQUFTb0IsUUFBVCxFQUFtQjtBQUFHO0FBQzlCLFFBQU1DLFVBQVVELFNBQVNFLEtBQVQsQ0FBZSxzQkFBZixDQUFoQjtBQUFBLFFBQ01wQixRQUFTbUIsWUFBWSxJQUQzQjs7QUFHQSxRQUFJbkIsS0FBSixFQUFXO0FBQ1QsVUFBTXFCLGNBQWN0QyxPQUFPb0MsT0FBUCxDQUFwQjs7QUFFQTdCLHdCQUFrQitCLFdBQWxCO0FBQ0Q7O0FBRUQsV0FBT3JCLEtBQVA7QUFDRCxHQVhEOztBQWFBLFNBQU9WLGVBQVA7QUFDRCIsImZpbGUiOiJyYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIGZpbGVTeXN0ZW1VdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXRpZXMvZmlsZVN5c3RlbScpO1xuXG5jb25zdCB7IGZpcnN0LCBzZWNvbmQgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyByZWFkRmlsZSwgd3JpdGVGaWxlIH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzO1xuXG5sZXQgcmNCYXNlRXh0ZW5zaW9uID0gJyc7XG5cbmZ1bmN0aW9uIHJjKGVudmlyb25tZW50TmFtZU9yQXJndiA9IG51bGwpIHtcbiAgbGV0IGVudmlyb25tZW50LFxuICAgICAgZW52aXJvbm1lbnROYW1lO1xuXG4gIGlmIChlbnZpcm9ubWVudE5hbWVPckFyZ3YgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIGNvbnN0IGFyZ3YgPSBlbnZpcm9ubWVudE5hbWVPckFyZ3Y7XG5cbiAgICBlbnZpcm9ubWVudE5hbWUgPSBlbnZpcm9ubWVudE5hbWVGcm9tQXJndihhcmd2KTtcbiAgfSBlbHNlIHtcbiAgICBlbnZpcm9ubWVudE5hbWUgPSBlbnZpcm9ubWVudE5hbWVPckFyZ3Y7XG4gIH1cblxuICBjb25zdCBqc29uID0gcmVhZFJDRmlsZSgpLFxuICAgICAgICB7IGVudmlyb25tZW50cyB9ID0ganNvbjtcblxuICBpZiAoZW52aXJvbm1lbnROYW1lID09PSBudWxsKSB7XG4gICAgY29uc3QgZmlyc3RFbnZpcm9ubWVudCA9IGZpcnN0KGVudmlyb25tZW50cyk7XG5cbiAgICBlbnZpcm9ubWVudCA9IGZpcnN0RW52aXJvbm1lbnQ7IC8vL1xuICB9IGVsc2Uge1xuICAgIGVudmlyb25tZW50ID0gZW52aXJvbm1lbnRzLmZpbmQoZnVuY3Rpb24oZW52aXJvbm1lbnQpIHtcbiAgICAgIGNvbnN0IHsgbmFtZSB9ID0gZW52aXJvbm1lbnQsXG4gICAgICAgICAgICBmb3VuZCA9IChuYW1lID09PSBlbnZpcm9ubWVudE5hbWUpO1xuXG4gICAgICByZXR1cm4gZm91bmQ7XG4gICAgfSk7XG4gIH1cblxuICBkZWxldGUgZW52aXJvbm1lbnQubmFtZTtcblxuICBPYmplY3QuYXNzaWduKHJjLCBlbnZpcm9ubWVudCk7XG5cbiAgcmV0dXJuIGVudmlyb25tZW50O1xufVxuXG5mdW5jdGlvbiByZWFkUkNGaWxlKCkge1xuICBjb25zdCBmaWxlUGF0aCA9IGAuLy4ke3JjQmFzZUV4dGVuc2lvbn1yY2AsXG4gICAgICAgIGFic29sdXRlRmlsZVBhdGggPSBwYXRoLnJlc29sdmUoZmlsZVBhdGgpLFxuICAgICAgICBmaWxlQ29udGVudCA9IHJlYWRGaWxlKGFic29sdXRlRmlsZVBhdGgpLFxuICAgICAgICBqc29uID0gSlNPTi5wYXJzZShmaWxlQ29udGVudCk7XG5cbiAgcmV0dXJuIGpzb247ICAgICAgXG59XG5cbmZ1bmN0aW9uIHdyaXRlUkNGaWxlKGpzb24pIHtcbiAgY29uc3QgZmlsZVBhdGggPSBgLi8uJHtyY0Jhc2VFeHRlbnNpb259cmNgLFxuICAgICAgICBhYnNvbHV0ZUZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKGZpbGVQYXRoKSxcbiAgICAgICAgZmlsZUNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShqc29uLCBudWxsLCBgXFx0YCk7XG5cbiAgd3JpdGVGaWxlKGZpbGVDb250ZW50KTsgICAgICBcbn1cblxuZnVuY3Rpb24gdXBkYXRlUkNGaWxlKGpzb24pIHtcbiAgY29uc3Qgb2xkSlNPTiA9IHJlYWRSQ0ZpbGUoKSxcbiAgICAgICAgbmV3SlNPTiA9IE9iamVjdC5hc3NpZ24ob2xkSlNPTiwganNvbik7XG5cbiAgd3JpdGVSQ0ZpbGUobmV3SlNPTik7ICAgICAgXG59XG5cbmZ1bmN0aW9uIHNldFJDQmFzZUV4dGVuc2lvbihiYXNlRXh0ZW5zaW9uKSB7IHJjQmFzZUV4dGVuc2lvbiA9IGJhc2VFeHRlbnNpb247IH1cblxuT2JqZWN0LmFzc2lnbihyYywge1xuICByZWFkUkNGaWxlOiByZWFkUkNGaWxlLFxuICB3cml0ZVJDRmlsZTogd3JpdGVSQ0ZpbGUsXG4gIHVwZGF0ZVJDRmlsZTogdXBkYXRlUkNGaWxlLFxuICBzZXRSQ0Jhc2VFeHRlbnNpb246IHNldFJDQmFzZUV4dGVuc2lvblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmM7XG5cbmZ1bmN0aW9uIGVudmlyb25tZW50TmFtZUZyb21Bcmd2KGFyZ3YpIHtcbiAgbGV0IGVudmlyb25tZW50TmFtZSA9IG51bGw7XG5cbiAgYXJndi5maW5kKGZ1bmN0aW9uKGFyZ3VtZW50KSB7ICAvLy9cbiAgICBjb25zdCBtYXRjaGVzID0gYXJndW1lbnQubWF0Y2goL1xcLVxcLWVudmlyb25tZW50PSguKykvKSxcbiAgICAgICAgICBmb3VuZCA9IChtYXRjaGVzICE9PSBudWxsKTtcblxuICAgIGlmIChmb3VuZCkge1xuICAgICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICAgIGVudmlyb25tZW50TmFtZSA9IHNlY29uZE1hdGNoO1xuICAgIH1cblxuICAgIHJldHVybiBmb3VuZDtcbiAgfSk7XG5cbiAgcmV0dXJuIGVudmlyb25tZW50TmFtZTtcbn1cbiJdfQ==