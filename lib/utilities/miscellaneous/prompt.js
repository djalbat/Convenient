'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = prompt;

var _onETX = _interopRequireDefault(require("./onETX"));

var _asynchronous = require("../../utilities/asynchronous");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _process = process,
    stdin = _process.stdin,
    stdout = _process.stdout,
    exit = _process.exit;
var BACKSPACE_CHARACTER = String.fromCharCode(127),
    LINE_FEED_CHARACTER = '\n',
    CARRIAGE_RETURN_CHARACTER = '\r';

function prompt(options, callback) {
  var value = null,
      _options$attempts = options.attempts,
      attempts = _options$attempts === void 0 ? 3 : _options$attempts,
      context = {
    value: value,
    attempts: attempts,
    options: options
  };
  (0, _asynchronous.whilst)(attempt, function () {
    var value = context.value;
    callback(value);
  }, context);
}

function attempt(next, done, context) {
  var attempts = context.attempts;
  var terminate = attempts-- === 0;

  if (terminate) {
    done();
    return;
  }

  var options = context.options,
      _options$hidden = options.hidden,
      hidden = _options$hidden === void 0 ? false : _options$hidden,
      _options$encoding = options.encoding,
      encoding = _options$encoding === void 0 ? 'utf8' : _options$encoding,
      description = options.description,
      _options$initialValue = options.initialValue,
      initialValue = _options$initialValue === void 0 ? '' : _options$initialValue,
      errorMessage = options.errorMessage,
      validationPattern = options.validationPattern,
      validationFunction = options.validationFunction;
  input(description, initialValue, encoding, hidden, callback);

  function callback(value) {
    var valid = validationFunction ? ///
    validationFunction(value) : validationPattern.test(value);

    if (valid) {
      Object.assign(context, {
        value: value
      });
      done();
    } else {
      console.log(errorMessage);
      Object.assign(context, {
        attempts: attempts
      });
      next();
    }
  }
}

function input(description, initialValue, encoding, hidden, callback) {
  var value = initialValue; ///

  var rawMode = true,
      offETX = (0, _onETX["default"])(function () {
    console.log('^C');
    exit();
  });
  stdin.setEncoding(encoding);
  stdin.setRawMode(rawMode);
  stdout.write(description);

  if (!hidden) {
    stdout.write(value);
  }

  stdin.resume();
  stdin.on('data', listener);

  function listener(chunk) {
    var character = chunk.toString(encoding);

    switch (character) {
      case LINE_FEED_CHARACTER:
      case CARRIAGE_RETURN_CHARACTER:
        stdout.write(LINE_FEED_CHARACTER);
        stdin.removeListener('data', listener);
        stdin.pause();
        offETX();
        callback(value);
        break;

      case BACKSPACE_CHARACTER:
        value = value.slice(0, value.length - 1);
        stdout.clearLine();
        stdout.cursorTo(0);
        stdout.write(description);

        if (!hidden) {
          stdout.write(value);
        }

        break;

      default:
        value += character;

        if (!hidden) {
          stdout.clearLine();
          stdout.cursorTo(0);
          stdout.write(description);
          stdout.write(value);
        }

        break;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,