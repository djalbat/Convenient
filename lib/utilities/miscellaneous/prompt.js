"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prompt = prompt;

var _onETX = _interopRequireDefault(require("./onETX"));

var _asynchronous = require("../../utilities/asynchronous");

var _constants = require("../../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function prompt(options, callback) {
  var _options$answer = options.answer,
      answer = _options$answer === void 0 ? null : _options$answer;

  if (answer !== null) {
    callback(answer);
    return;
  }

  answer = null;
  var _options$attempts = options.attempts,
      attempts = _options$attempts === void 0 ? _constants.DEFAULT_ATTEMPTS : _options$attempts,
      context = {
    answer: answer,
    attempts: attempts,
    options: options
  };
  (0, _asynchronous.whilst)(attempt, function () {
    var answer = context.answer;
    callback(answer);
  }, context);
}

function attempt(next, done, context) {
  var attempts = context.attempts;
  var terminate = attempts-- === 0;

  if (terminate) {
    done();
    return;
  }

  var options = context.options,
      _options$hidden = options.hidden,
      hidden = _options$hidden === void 0 ? false : _options$hidden,
      _options$encoding = options.encoding,
      encoding = _options$encoding === void 0 ? _constants.DEFAULT_ENCODING : _options$encoding,
      description = options.description,
      errorMessage = options.errorMessage,
      _options$initialAnswe = options.initialAnswer,
      initialAnswer = _options$initialAnswe === void 0 ? _constants.DEFAULT_INITIAL_ANSWER : _options$initialAnswe,
      validationPattern = options.validationPattern,
      validationFunction = options.validationFunction;
  input(description, initialAnswer, encoding, hidden, callback);

  function callback(answer) {
    var valid = validationFunction ? ///
    validationFunction(answer) : validationPattern.test(answer);

    if (valid) {
      Object.assign(context, {
        answer: answer
      });
      done();
    } else {
      console.log(errorMessage);
      Object.assign(context, {
        attempts: attempts
      });
      next();
    }
  }
}

function input(description, initialAnswer, encoding, hidden, callback) {
  var answer = initialAnswer; ///

  var event = _constants.DATA_EVENT,
      rawMode = true,
      offETX = (0, _onETX["default"])(function () {
    console.log(_constants.CTRL_C);
    process.exit();
  });
  process.stdin.setEncoding(encoding);
  process.stdin.setRawMode(rawMode);
  process.stdout.write(description);

  if (!hidden) {
    process.stdout.write(answer);
  }

  process.stdin.resume();
  process.stdin.on(event, listener);

  function listener(chunk) {
    var character = chunk.toString(encoding);

    switch (character) {
      case _constants.LINE_FEED_CHARACTER:
      case _constants.CARRIAGE_RETURN_CHARACTER:
        process.stdout.write(_constants.LINE_FEED_CHARACTER);
        process.stdin.removeListener(event, listener);
        process.stdin.pause();
        offETX();
        callback(answer);
        break;

      case _constants.BACKSPACE_CHARACTER:
        answer = answer.slice(0, answer.length - 1);
        process.stdout.clearLine();
        process.stdout.cursorTo(0);
        process.stdout.write(description);

        if (!hidden) {
          process.stdout.write(answer);
        }

        break;

      default:
        answer += character;

        if (!hidden) {
          process.stdout.clearLine();
          process.stdout.cursorTo(0);
          process.stdout.write(description);
          process.stdout.write(answer);
        }

        break;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,