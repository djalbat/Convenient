'use strict';

var path = require('path');

var pathUtilities = require('../../utilities/path'),
    arrayUtilities = require('../../utilities/array'),
    fileSystemUtilities = require('../../utilities/fileSystem');

var second = arrayUtilities.second,
    concatenatePaths = pathUtilities.concatenatePaths,
    doesFileExist = fileSystemUtilities.doesFileExist,
    readFile = fileSystemUtilities.readFile,
    appendToFile = fileSystemUtilities.appendToFile,
    renameFile = fileSystemUtilities.renameFile,
    getStats = fileSystemUtilities.getStats;


var TRACE = 'TRACE',
    DEBUG = 'DEBUG',
    INFO = 'INFO',
    WARNING = 'WARNING',
    ERROR = 'ERROR',
    FATAL = 'FATAL';

var logLevel = WARNING,
    logFileBaseName = 'default',
    logDirectoryPath = null;

function log(message) {
  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var pertinentStackMessageIndex = 2;

  var levels = [TRACE, DEBUG, INFO, WARNING, ERROR, FATAL];

  if (level) {
    ///
    var levelIndex = levels.indexOf(level),
        logLevelIndex = levels.indexOf(logLevel);

    if (levelIndex < logLevelIndex) {
      return;
    }

    pertinentStackMessageIndex += 1;

    level = level + ' '; ///
  }

  var error = new Error(),
      stack = error.stack,
      stackMessages = stack.split(/\r\n|\n/),
      pertinentStackMessage = stackMessages[pertinentStackMessageIndex],
      currentDateAndTimeString = getCurrentDateAndTimeString(),
      filePath = filePathFromStackMessage(pertinentStackMessage),
      lineNumber = lineNumberFromStackMessage(pertinentStackMessage),
      logMessage = '' + level + currentDateAndTimeString + ' ' + filePath + '(' + lineNumber + ') ' + message;


  console.log(logMessage);

  if (logDirectoryPath !== null) {
    rollOverLogFile();

    var logFilePath = getLogFilePath(),
        logFileContent = logMessage + '\n';

    appendToFile(logFilePath, logFileContent);
  }

  return logMessage;
}

function trace(message) {
  return log(message, TRACE);
}

function debug(message) {
  return log(message, DEBUG);
}

function info(message) {
  return log(message, INFO);
}

function warning(message) {
  return log(message, WARNING);
}

function error(message) {
  return log(message, ERROR);
}

function fatal(message) {
  return log(message, FATAL);
}

function setLogLevel(level) {
  logLevel = level;
}

function setLogFileBaseName(fileBaseName) {
  logFileBaseName = fileBaseName;
}

function setLogDirectoryPath(directoryPath) {
  logDirectoryPath = directoryPath;
}

function getLogFileContent() {
  var logFilePath = getLogFilePath(),
      logFileContent = readFile(logFilePath);

  return logFileContent;
}

Object.assign(log, {
  TRACE: TRACE,
  DEBUG: DEBUG,
  INFO: INFO,
  WARNING: WARNING,
  ERROR: ERROR,
  FATAL: FATAL,
  trace: trace,
  debug: debug,
  info: info,
  warning: warning,
  error: error,
  fatal: fatal,
  setLogLevel: setLogLevel,
  setLogFileBaseName: setLogFileBaseName,
  setLogDirectoryPath: setLogDirectoryPath,
  getLogFileContent: getLogFileContent
});

module.exports = log;

function getLogFilePath() {
  var logFileName = logFileBaseName + '.log',
      logFilePath = concatenatePaths(logDirectoryPath, logFileName);

  return logFilePath;
}

function getRolledOverLogFilePath() {
  var currentDateString = getCurrentDateString(),
      rolledOverLogFileName = logFileBaseName + '.' + currentDateString + '.log',
      rolledOverLogFilePath = concatenatePaths(logDirectoryPath, rolledOverLogFileName);

  return rolledOverLogFilePath;
}

function getLogFileLastModifiedDate() {
  var logFilePath = getLogFilePath(),
      logFileStats = getStats(logFilePath),
      mtime = logFileStats.mtime,
      logFileLastModifiedDate = new Date(mtime); ///

  return logFileLastModifiedDate;
}

function rollOverLogFile() {
  var logFilePath = getLogFilePath(),
      logFileExists = doesFileExist(logFilePath);

  if (!logFileExists) {
    return;
  }

  var logFileLastModifiedDate = getLogFileLastModifiedDate(),
      logFileLastModifiedDateCurrentDate = isDateCurrentDate(logFileLastModifiedDate);

  if (!logFileLastModifiedDateCurrentDate) {
    var rolledOverLogFilePath = getRolledOverLogFilePath();

    renameFile(logFilePath, rolledOverLogFilePath);
  }
}

function isDateCurrentDate(date) {
  var currentDate = new Date(),
      dateString = date.toDateString(),
      currentDateString = currentDate.toDateString(),
      dateCurrentDate = dateString === currentDateString;

  return dateCurrentDate;
}

function getCurrentDateString() {
  var date = new Date(),
      day = padStartWithZeroes(date.getDate(), 2),
      ///
  month = padStartWithZeroes(date.getMonth() + 1, 2),
      ///
  year = date.getFullYear(),
      currentDateAndTimeString = day + '-' + month + '-' + year;

  return currentDateAndTimeString;
}

function getCurrentDateAndTimeString() {
  var date = new Date(),
      day = padStartWithZeroes(date.getDate(), 2),
      ///
  month = padStartWithZeroes(date.getMonth() + 1, 2),
      ///
  year = date.getFullYear(),
      hours = padStartWithZeroes(date.getHours(), 2),
      minutes = padStartWithZeroes(date.getMinutes(), 2),
      seconds = padStartWithZeroes(date.getSeconds(), 2),
      milliseconds = padStartWithZeroes(date.getMilliseconds(), 3),
      currentDateAndTimeString = day + '-' + month + '-' + year + ' ' + hours + ':' + minutes + ':' + seconds + '.' + milliseconds;

  return currentDateAndTimeString;
}

function filePathFromStackMessage(stackMessage) {
  var matches = stackMessage.match(/(\/.+)\:\d+\:\d+/),
      secondMatch = second(matches),
      absoluteFilePath = secondMatch,
      ///
  currentWorkingDirectoryPath = path.resolve('.'),
      ///
  currentWorkingDirectoryPathLength = currentWorkingDirectoryPath.length,
      start = currentWorkingDirectoryPathLength + 1,
      ///
  filePath = absoluteFilePath.substr(start);

  return filePath;
}

function lineNumberFromStackMessage(stackMessage) {
  var matches = stackMessage.match(/\:(\d+)/),
      secondMatch = second(matches),
      lineNumber = secondMatch; ///

  return lineNumber;
}

function padStartWithZeroes(string, targetLength) {
  var padString = '0',
      paddedString = padStart(string, targetLength, padString);

  return paddedString;
}

function padStart(string, targetLength, padString) {
  var padding = '';

  for (var index = 0; index < targetLength; index++) {
    padding += padString;
  }

  var paddedString = ('' + padding + string).substr(-targetLength);

  return paddedString;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi91dGlsaXRpZXMvbWlzY2VsbGFuZW91cy9sb2cuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJwYXRoVXRpbGl0aWVzIiwiYXJyYXlVdGlsaXRpZXMiLCJmaWxlU3lzdGVtVXRpbGl0aWVzIiwic2Vjb25kIiwiY29uY2F0ZW5hdGVQYXRocyIsImRvZXNGaWxlRXhpc3QiLCJyZWFkRmlsZSIsImFwcGVuZFRvRmlsZSIsInJlbmFtZUZpbGUiLCJnZXRTdGF0cyIsIlRSQUNFIiwiREVCVUciLCJJTkZPIiwiV0FSTklORyIsIkVSUk9SIiwiRkFUQUwiLCJsb2dMZXZlbCIsImxvZ0ZpbGVCYXNlTmFtZSIsImxvZ0RpcmVjdG9yeVBhdGgiLCJsb2ciLCJtZXNzYWdlIiwibGV2ZWwiLCJwZXJ0aW5lbnRTdGFja01lc3NhZ2VJbmRleCIsImxldmVscyIsImxldmVsSW5kZXgiLCJpbmRleE9mIiwibG9nTGV2ZWxJbmRleCIsIkVycm9yIiwic3RhY2siLCJlcnJvciIsInN0YWNrTWVzc2FnZXMiLCJzcGxpdCIsInBlcnRpbmVudFN0YWNrTWVzc2FnZSIsImN1cnJlbnREYXRlQW5kVGltZVN0cmluZyIsImdldEN1cnJlbnREYXRlQW5kVGltZVN0cmluZyIsImZpbGVQYXRoIiwiZmlsZVBhdGhGcm9tU3RhY2tNZXNzYWdlIiwibGluZU51bWJlciIsImxpbmVOdW1iZXJGcm9tU3RhY2tNZXNzYWdlIiwibG9nTWVzc2FnZSIsImNvbnNvbGUiLCJyb2xsT3ZlckxvZ0ZpbGUiLCJsb2dGaWxlUGF0aCIsImdldExvZ0ZpbGVQYXRoIiwibG9nRmlsZUNvbnRlbnQiLCJ0cmFjZSIsImRlYnVnIiwiaW5mbyIsIndhcm5pbmciLCJmYXRhbCIsInNldExvZ0xldmVsIiwic2V0TG9nRmlsZUJhc2VOYW1lIiwiZmlsZUJhc2VOYW1lIiwic2V0TG9nRGlyZWN0b3J5UGF0aCIsImRpcmVjdG9yeVBhdGgiLCJnZXRMb2dGaWxlQ29udGVudCIsIk9iamVjdCIsImFzc2lnbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJsb2dGaWxlTmFtZSIsImdldFJvbGxlZE92ZXJMb2dGaWxlUGF0aCIsImN1cnJlbnREYXRlU3RyaW5nIiwiZ2V0Q3VycmVudERhdGVTdHJpbmciLCJyb2xsZWRPdmVyTG9nRmlsZU5hbWUiLCJyb2xsZWRPdmVyTG9nRmlsZVBhdGgiLCJnZXRMb2dGaWxlTGFzdE1vZGlmaWVkRGF0ZSIsImxvZ0ZpbGVTdGF0cyIsIm10aW1lIiwibG9nRmlsZUxhc3RNb2RpZmllZERhdGUiLCJEYXRlIiwibG9nRmlsZUV4aXN0cyIsImxvZ0ZpbGVMYXN0TW9kaWZpZWREYXRlQ3VycmVudERhdGUiLCJpc0RhdGVDdXJyZW50RGF0ZSIsImRhdGUiLCJjdXJyZW50RGF0ZSIsImRhdGVTdHJpbmciLCJ0b0RhdGVTdHJpbmciLCJkYXRlQ3VycmVudERhdGUiLCJkYXkiLCJwYWRTdGFydFdpdGhaZXJvZXMiLCJnZXREYXRlIiwibW9udGgiLCJnZXRNb250aCIsInllYXIiLCJnZXRGdWxsWWVhciIsImhvdXJzIiwiZ2V0SG91cnMiLCJtaW51dGVzIiwiZ2V0TWludXRlcyIsInNlY29uZHMiLCJnZXRTZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwic3RhY2tNZXNzYWdlIiwibWF0Y2hlcyIsIm1hdGNoIiwic2Vjb25kTWF0Y2giLCJhYnNvbHV0ZUZpbGVQYXRoIiwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnlQYXRoIiwicmVzb2x2ZSIsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5UGF0aExlbmd0aCIsImxlbmd0aCIsInN0YXJ0Iiwic3Vic3RyIiwic3RyaW5nIiwidGFyZ2V0TGVuZ3RoIiwicGFkU3RyaW5nIiwicGFkZGVkU3RyaW5nIiwicGFkU3RhcnQiLCJwYWRkaW5nIiwiaW5kZXgiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLE9BQU9DLFFBQVEsTUFBUixDQUFiOztBQUVBLElBQU1DLGdCQUFnQkQsUUFBUSxzQkFBUixDQUF0QjtBQUFB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QVFMLFlBQTVCLEVBQTBDSyxPQUExQyxFQUFtRDtBQUNqREQsZUFBV0gsU0FBWDtBQUNEOztBQUVELE1BQU1DLGVBQWUsTUFBR0UsT0FBSCxHQUFhTCxNQUFiLEVBQXNCRCxNQUF0QixDQUE2QixDQUFDRSxZQUE5QixDQUFyQjs7QUFFQSxTQUFPRSxZQUFQO0FBQ0QiLCJmaWxlIjoibG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCBwYXRoVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL3BhdGgnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICBmaWxlU3lzdGVtVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0aWVzL2ZpbGVTeXN0ZW0nKTtcblxuY29uc3QgeyBzZWNvbmQgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzLFxuICAgICAgeyBkb2VzRmlsZUV4aXN0LCByZWFkRmlsZSwgYXBwZW5kVG9GaWxlLCByZW5hbWVGaWxlLCBnZXRTdGF0cyB9ID0gZmlsZVN5c3RlbVV0aWxpdGllcztcblxuY29uc3QgVFJBQ0UgPSAnVFJBQ0UnLFxuICAgICAgREVCVUcgPSAnREVCVUcnLFxuICAgICAgSU5GTyA9ICdJTkZPJyxcbiAgICAgIFdBUk5JTkcgPSAnV0FSTklORycsXG4gICAgICBFUlJPUiA9ICdFUlJPUicsXG4gICAgICBGQVRBTCA9ICdGQVRBTCc7XG5cbmxldCBsb2dMZXZlbCA9IFdBUk5JTkcsXG4gICAgbG9nRmlsZUJhc2VOYW1lID0gJ2RlZmF1bHQnLFxuICAgIGxvZ0RpcmVjdG9yeVBhdGggPSBudWxsO1xuXG5mdW5jdGlvbiBsb2cobWVzc2FnZSwgbGV2ZWwgPSAnJykge1xuICBsZXQgcGVydGluZW50U3RhY2tNZXNzYWdlSW5kZXggPSAyO1xuXG4gIGNvbnN0IGxldmVscyA9IFtcbiAgICBUUkFDRSxcbiAgICBERUJVRyxcbiAgICBJTkZPLFxuICAgIFdBUk5JTkcsXG4gICAgRVJST1IsXG4gICAgRkFUQUxcbiAgXTtcblxuICBpZiAobGV2ZWwpIHsgLy8vXG4gICAgY29uc3QgbGV2ZWxJbmRleCA9IGxldmVscy5pbmRleE9mKGxldmVsKSxcbiAgICAgICAgICBsb2dMZXZlbEluZGV4ID0gbGV2ZWxzLmluZGV4T2YobG9nTGV2ZWwpO1xuXG4gICAgaWYgKGxldmVsSW5kZXggPCBsb2dMZXZlbEluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGVydGluZW50U3RhY2tNZXNzYWdlSW5kZXggKz0gMTtcblxuICAgIGxldmVsID0gYCR7bGV2ZWx9IGA7ICAvLy9cbiAgfVxuXG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCksXG4gICAgICAgIHsgc3RhY2sgfSA9IGVycm9yLFxuICAgICAgICBzdGFja01lc3NhZ2VzID0gc3RhY2suc3BsaXQoL1xcclxcbnxcXG4vKSxcbiAgICAgICAgcGVydGluZW50U3RhY2tNZXNzYWdlID0gc3RhY2tNZXNzYWdlc1twZXJ0aW5lbnRTdGFja01lc3NhZ2VJbmRleF0sXG4gICAgICAgIGN1cnJlbnREYXRlQW5kVGltZVN0cmluZyA9IGdldEN1cnJlbnREYXRlQW5kVGltZVN0cmluZygpLFxuICAgICAgICBmaWxlUGF0aCA9IGZpbGVQYXRoRnJvbVN0YWNrTWVzc2FnZShwZXJ0aW5lbnRTdGFja01lc3NhZ2UpLFxuICAgICAgICBsaW5lTnVtYmVyID0gbGluZU51bWJlckZyb21TdGFja01lc3NhZ2UocGVydGluZW50U3RhY2tNZXNzYWdlKSxcbiAgICAgICAgbG9nTWVzc2FnZSA9IGAke2xldmVsfSR7Y3VycmVudERhdGVBbmRUaW1lU3RyaW5nfSAke2ZpbGVQYXRofSgke2xpbmVOdW1iZXJ9KSAke21lc3NhZ2V9YDtcblxuICBjb25zb2xlLmxvZyhsb2dNZXNzYWdlKTtcblxuICBpZiAobG9nRGlyZWN0b3J5UGF0aCAhPT0gbnVsbCkge1xuICAgIHJvbGxPdmVyTG9nRmlsZSgpO1xuXG4gICAgY29uc3QgbG9nRmlsZVBhdGggPSBnZXRMb2dGaWxlUGF0aCgpLFxuICAgICAgICAgIGxvZ0ZpbGVDb250ZW50ID0gYCR7bG9nTWVzc2FnZX1cXG5gO1xuXG4gICAgYXBwZW5kVG9GaWxlKGxvZ0ZpbGVQYXRoLCBsb2dGaWxlQ29udGVudCk7XG4gIH1cblxuICByZXR1cm4gbG9nTWVzc2FnZTtcbn1cblxuZnVuY3Rpb24gdHJhY2UobWVzc2FnZSkgeyByZXR1cm4gbG9nKG1lc3NhZ2UsIFRSQUNFKTsgfVxuXG5mdW5jdGlvbiBkZWJ1ZyhtZXNzYWdlKSB7IHJldHVybiBsb2cobWVzc2FnZSwgREVCVUcpOyB9XG5cbmZ1bmN0aW9uIGluZm8obWVzc2FnZSkgeyByZXR1cm4gbG9nKG1lc3NhZ2UsIElORk8pOyB9XG5cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkgeyByZXR1cm4gbG9nKG1lc3NhZ2UsIFdBUk5JTkcpOyB9XG5cbmZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGxvZyhtZXNzYWdlLCBFUlJPUik7IH1cblxuZnVuY3Rpb24gZmF0YWwobWVzc2FnZSkgeyByZXR1cm4gbG9nKG1lc3NhZ2UsIEZBVEFMKTsgfVxuXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkgeyBsb2dMZXZlbCA9IGxldmVsOyB9XG5cbmZ1bmN0aW9uIHNldExvZ0ZpbGVCYXNlTmFtZShmaWxlQmFzZU5hbWUpIHsgbG9nRmlsZUJhc2VOYW1lID0gZmlsZUJhc2VOYW1lOyB9XG5cbmZ1bmN0aW9uIHNldExvZ0RpcmVjdG9yeVBhdGgoZGlyZWN0b3J5UGF0aCkgeyBsb2dEaXJlY3RvcnlQYXRoID0gZGlyZWN0b3J5UGF0aDsgfVxuXG5mdW5jdGlvbiBnZXRMb2dGaWxlQ29udGVudCgpIHtcbiAgY29uc3QgbG9nRmlsZVBhdGggPSBnZXRMb2dGaWxlUGF0aCgpLFxuICAgICAgICBsb2dGaWxlQ29udGVudCA9IHJlYWRGaWxlKGxvZ0ZpbGVQYXRoKTtcblxuICByZXR1cm4gbG9nRmlsZUNvbnRlbnQ7XG59XG5cbk9iamVjdC5hc3NpZ24obG9nLCB7XG4gIFRSQUNFOiBUUkFDRSxcbiAgREVCVUc6IERFQlVHLFxuICBJTkZPOiBJTkZPLFxuICBXQVJOSU5HOiBXQVJOSU5HLFxuICBFUlJPUjogRVJST1IsXG4gIEZBVEFMOiBGQVRBTCxcbiAgdHJhY2U6IHRyYWNlLFxuICBkZWJ1ZzogZGVidWcsXG4gIGluZm86IGluZm8sXG4gIHdhcm5pbmc6IHdhcm5pbmcsXG4gIGVycm9yOiBlcnJvcixcbiAgZmF0YWw6IGZhdGFsLFxuICBzZXRMb2dMZXZlbDogc2V0TG9nTGV2ZWwsXG4gIHNldExvZ0ZpbGVCYXNlTmFtZTogc2V0TG9nRmlsZUJhc2VOYW1lLFxuICBzZXRMb2dEaXJlY3RvcnlQYXRoOiBzZXRMb2dEaXJlY3RvcnlQYXRoLFxuICBnZXRMb2dGaWxlQ29udGVudDogZ2V0TG9nRmlsZUNvbnRlbnRcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZztcblxuZnVuY3Rpb24gZ2V0TG9nRmlsZVBhdGgoKSB7XG4gIGNvbnN0IGxvZ0ZpbGVOYW1lID0gYCR7bG9nRmlsZUJhc2VOYW1lfS5sb2dgLFxuICAgICAgICBsb2dGaWxlUGF0aCA9IGNvbmNhdGVuYXRlUGF0aHMobG9nRGlyZWN0b3J5UGF0aCwgbG9nRmlsZU5hbWUpO1xuXG4gIHJldHVybiBsb2dGaWxlUGF0aDtcbn1cblxuZnVuY3Rpb24gZ2V0Um9sbGVkT3ZlckxvZ0ZpbGVQYXRoKCkge1xuICBjb25zdCBjdXJyZW50RGF0ZVN0cmluZyA9IGdldEN1cnJlbnREYXRlU3RyaW5nKCksXG4gICAgICAgIHJvbGxlZE92ZXJMb2dGaWxlTmFtZSA9IGAke2xvZ0ZpbGVCYXNlTmFtZX0uJHtjdXJyZW50RGF0ZVN0cmluZ30ubG9nYCxcbiAgICAgICAgcm9sbGVkT3ZlckxvZ0ZpbGVQYXRoID0gY29uY2F0ZW5hdGVQYXRocyhsb2dEaXJlY3RvcnlQYXRoLCByb2xsZWRPdmVyTG9nRmlsZU5hbWUpO1xuXG4gIHJldHVybiByb2xsZWRPdmVyTG9nRmlsZVBhdGg7XG59XG5cbmZ1bmN0aW9uIGdldExvZ0ZpbGVMYXN0TW9kaWZpZWREYXRlKCkge1xuICBjb25zdCBsb2dGaWxlUGF0aCA9IGdldExvZ0ZpbGVQYXRoKCksXG4gICAgICAgIGxvZ0ZpbGVTdGF0cyA9IGdldFN0YXRzKGxvZ0ZpbGVQYXRoKSxcbiAgICAgICAgeyBtdGltZSB9ID0gbG9nRmlsZVN0YXRzLFxuICAgICAgICBsb2dGaWxlTGFzdE1vZGlmaWVkRGF0ZSA9IG5ldyBEYXRlKG10aW1lKTsgIC8vL1xuXG4gIHJldHVybiBsb2dGaWxlTGFzdE1vZGlmaWVkRGF0ZTtcbn1cblxuZnVuY3Rpb24gcm9sbE92ZXJMb2dGaWxlKCkge1xuICBjb25zdCBsb2dGaWxlUGF0aCA9IGdldExvZ0ZpbGVQYXRoKCksXG4gICAgICAgIGxvZ0ZpbGVFeGlzdHMgPSBkb2VzRmlsZUV4aXN0KGxvZ0ZpbGVQYXRoKTtcblxuICBpZiAoIWxvZ0ZpbGVFeGlzdHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBsb2dGaWxlTGFzdE1vZGlmaWVkRGF0ZSA9IGdldExvZ0ZpbGVMYXN0TW9kaWZpZWREYXRlKCksXG4gICAgICAgIGxvZ0ZpbGVMYXN0TW9kaWZpZWREYXRlQ3VycmVudERhdGUgPSBpc0RhdGVDdXJyZW50RGF0ZShsb2dGaWxlTGFzdE1vZGlmaWVkRGF0ZSk7XG5cbiAgaWYgKCFsb2dGaWxlTGFzdE1vZGlmaWVkRGF0ZUN1cnJlbnREYXRlKSB7XG4gICAgY29uc3Qgcm9sbGVkT3ZlckxvZ0ZpbGVQYXRoID0gZ2V0Um9sbGVkT3ZlckxvZ0ZpbGVQYXRoKCk7XG5cbiAgICByZW5hbWVGaWxlKGxvZ0ZpbGVQYXRoLCByb2xsZWRPdmVyTG9nRmlsZVBhdGgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZUN1cnJlbnREYXRlKGRhdGUpIHtcbiAgY29uc3QgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpLFxuICAgICAgICBkYXRlU3RyaW5nID0gZGF0ZS50b0RhdGVTdHJpbmcoKSxcbiAgICAgICAgY3VycmVudERhdGVTdHJpbmcgPSBjdXJyZW50RGF0ZS50b0RhdGVTdHJpbmcoKSxcbiAgICAgICAgZGF0ZUN1cnJlbnREYXRlID0gKGRhdGVTdHJpbmcgPT09IGN1cnJlbnREYXRlU3RyaW5nKTtcblxuICByZXR1cm4gZGF0ZUN1cnJlbnREYXRlO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50RGF0ZVN0cmluZygpIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCksXG4gICAgICAgIGRheSA9IHBhZFN0YXJ0V2l0aFplcm9lcyhkYXRlLmdldERhdGUoKSwgMiksICAvLy9cbiAgICAgICAgbW9udGggPSBwYWRTdGFydFdpdGhaZXJvZXMoZGF0ZS5nZXRNb250aCgpICsgMSwgMiksIC8vL1xuICAgICAgICB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICBjdXJyZW50RGF0ZUFuZFRpbWVTdHJpbmcgPSBgJHtkYXl9LSR7bW9udGh9LSR7eWVhcn1gO1xuXG4gIHJldHVybiBjdXJyZW50RGF0ZUFuZFRpbWVTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnREYXRlQW5kVGltZVN0cmluZygpIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCksXG4gICAgICAgIGRheSA9IHBhZFN0YXJ0V2l0aFplcm9lcyhkYXRlLmdldERhdGUoKSwgMiksICAvLy9cbiAgICAgICAgbW9udGggPSBwYWRTdGFydFdpdGhaZXJvZXMoZGF0ZS5nZXRNb250aCgpICsgMSwgMiksIC8vL1xuICAgICAgICB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICBob3VycyA9IHBhZFN0YXJ0V2l0aFplcm9lcyhkYXRlLmdldEhvdXJzKCksIDIpLFxuICAgICAgICBtaW51dGVzID0gcGFkU3RhcnRXaXRoWmVyb2VzKGRhdGUuZ2V0TWludXRlcygpLCAyKSxcbiAgICAgICAgc2Vjb25kcyA9IHBhZFN0YXJ0V2l0aFplcm9lcyhkYXRlLmdldFNlY29uZHMoKSwgMiksXG4gICAgICAgIG1pbGxpc2Vjb25kcyA9IHBhZFN0YXJ0V2l0aFplcm9lcyhkYXRlLmdldE1pbGxpc2Vjb25kcygpLCAzKSxcbiAgICAgICAgY3VycmVudERhdGVBbmRUaW1lU3RyaW5nID0gYCR7ZGF5fS0ke21vbnRofS0ke3llYXJ9ICR7aG91cnN9OiR7bWludXRlc306JHtzZWNvbmRzfS4ke21pbGxpc2Vjb25kc31gO1xuXG4gIHJldHVybiBjdXJyZW50RGF0ZUFuZFRpbWVTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGZpbGVQYXRoRnJvbVN0YWNrTWVzc2FnZShzdGFja01lc3NhZ2UpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IHN0YWNrTWVzc2FnZS5tYXRjaCgvKFxcLy4rKVxcOlxcZCtcXDpcXGQrLyksXG4gICAgICAgIHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpLFxuICAgICAgICBhYnNvbHV0ZUZpbGVQYXRoID0gc2Vjb25kTWF0Y2gsICAvLy9cbiAgICAgICAgY3VycmVudFdvcmtpbmdEaXJlY3RvcnlQYXRoID0gcGF0aC5yZXNvbHZlKCcuJyksICAvLy9cbiAgICAgICAgY3VycmVudFdvcmtpbmdEaXJlY3RvcnlQYXRoTGVuZ3RoID0gY3VycmVudFdvcmtpbmdEaXJlY3RvcnlQYXRoLmxlbmd0aCxcbiAgICAgICAgc3RhcnQgPSBjdXJyZW50V29ya2luZ0RpcmVjdG9yeVBhdGhMZW5ndGggKyAxLCAgLy8vXG4gICAgICAgIGZpbGVQYXRoID0gYWJzb2x1dGVGaWxlUGF0aC5zdWJzdHIoc3RhcnQpO1xuXG4gIHJldHVybiBmaWxlUGF0aDtcbn1cblxuZnVuY3Rpb24gbGluZU51bWJlckZyb21TdGFja01lc3NhZ2Uoc3RhY2tNZXNzYWdlKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBzdGFja01lc3NhZ2UubWF0Y2goL1xcOihcXGQrKS8pLFxuICAgICAgICBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKSxcbiAgICAgICAgbGluZU51bWJlciA9IHNlY29uZE1hdGNoOyAvLy9cblxuICByZXR1cm4gbGluZU51bWJlcjtcbn1cblxuZnVuY3Rpb24gcGFkU3RhcnRXaXRoWmVyb2VzKHN0cmluZywgdGFyZ2V0TGVuZ3RoKSB7XG4gIGNvbnN0IHBhZFN0cmluZyA9ICcwJyxcbiAgICAgICAgcGFkZGVkU3RyaW5nID0gcGFkU3RhcnQoc3RyaW5nLCB0YXJnZXRMZW5ndGgsIHBhZFN0cmluZyk7XG5cbiAgcmV0dXJuIHBhZGRlZFN0cmluZztcbn1cblxuZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCB0YXJnZXRMZW5ndGgsIHBhZFN0cmluZykge1xuICBsZXQgcGFkZGluZyA9ICcnO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0YXJnZXRMZW5ndGg7IGluZGV4KyspIHtcbiAgICBwYWRkaW5nICs9IHBhZFN0cmluZztcbiAgfVxuXG4gIGNvbnN0IHBhZGRlZFN0cmluZyA9IGAke3BhZGRpbmd9JHtzdHJpbmd9YC5zdWJzdHIoLXRhcmdldExlbmd0aCk7XG5cbiAgcmV0dXJuIHBhZGRlZFN0cmluZztcbn1cblxuIl19