"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.get = get;
exports.post = post;
exports.request = request;
exports.default = void 0;
var _http = require("../utilities/http");
var _constants = require("../constants");
function get(host, uri, parameters, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var method = _constants.GET, body = null;
    underwriteAccept(headers);
    request(host, uri, parameters, method, body, headers, callback);
}
function post(host, uri, parameters, body, headers, callback) {
    if (callback === undefined) {
        callback = headers; ///
        headers = {
        };
    }
    var method = _constants.POST;
    underwriteAccept(headers);
    underwriteContentType(headers);
    request(host, uri, parameters, method, body, headers, callback);
}
function request(host, uri, parameters, method, body, headers, callback) {
    var url = urlFromHostURIAndParameters(host, uri, parameters), accept = headers[_constants.ACCEPT] || null, contentType = headers[_constants.CONTENT_TYPE] || null, xmlHttpRequest = new XMLHttpRequest();
    if (contentType === _constants.APPLICATION_JSON) {
        var json = body, jsonString = JSON.stringify(json);
        body = jsonString; ///
    }
    xmlHttpRequest.onreadystatechange = function() {
        var readyState = xmlHttpRequest.readyState, status = xmlHttpRequest.status, responseText = xmlHttpRequest.responseText;
        if (readyState == 4) {
            var body1 = responseText;
            if (accept === _constants.APPLICATION_JSON) {
                try {
                    var jsonString = body1, json = JSON.parse(jsonString);
                    body1 = json; ///
                } catch (error) {
                    body1 = null;
                }
                callback(body1, status);
            }
        }
    };
    xmlHttpRequest.open(method, url);
    if (accept !== null) {
        xmlHttpRequest.setRequestHeader(_constants.ACCEPT, accept);
    }
    if (contentType !== null) {
        xmlHttpRequest.setRequestHeader(_constants.CONTENT_TYPE, contentType);
    }
    body !== null ? xmlHttpRequest.send(body) : xmlHttpRequest.send();
}
var _default = {
    get: get,
    post: post,
    request: request
};
exports.default = _default;
function underwriteAccept(headers) {
    var name = _constants.ACCEPT, value = _constants.APPLICATION_JSON; ///
    (0, _http).underwrite(headers, name, value);
}
function underwriteContentType(headers) {
    var name = _constants.CONTENT_TYPE, value = _constants.APPLICATION_JSON; ///
    (0, _http).underwrite(headers, name, value);
}
function urlFromHostURIAndParameters(host, uri, parameters) {
    var queryString = (0, _http).queryStringFromParameters(parameters), url = queryString === "" ? "".concat(host).concat(uri) : "".concat(host).concat(uri, "?").concat(queryString);
    return url;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvYWpheC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgdW5kZXJ3cml0ZSwgcXVlcnlTdHJpbmdGcm9tUGFyYW1ldGVycyB9IGZyb20gXCIuLi91dGlsaXRpZXMvaHR0cFwiO1xuaW1wb3J0IHsgR0VULCBQT1NULCBBQ0NFUFQsIENPTlRFTlRfVFlQRSwgQVBQTElDQVRJT05fSlNPTiB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldChob3N0LCB1cmksIHBhcmFtZXRlcnMsIGhlYWRlcnMsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FsbGJhY2sgPSBoZWFkZXJzOyAvLy9cbiAgICBoZWFkZXJzID0ge307XG4gIH1cblxuICBjb25zdCBtZXRob2QgPSBHRVQsXG4gICAgICAgIGJvZHkgPSBudWxsO1xuXG4gIHVuZGVyd3JpdGVBY2NlcHQoaGVhZGVycyk7XG5cbiAgcmVxdWVzdChob3N0LCB1cmksIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgaGVhZGVycywgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zdChob3N0LCB1cmksIHBhcmFtZXRlcnMsIGJvZHksIGhlYWRlcnMsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FsbGJhY2sgPSBoZWFkZXJzOyAvLy9cbiAgICBoZWFkZXJzID0ge307XG4gIH1cblxuICBjb25zdCBtZXRob2QgPSBQT1NUO1xuXG4gIHVuZGVyd3JpdGVBY2NlcHQoaGVhZGVycyk7XG5cbiAgdW5kZXJ3cml0ZUNvbnRlbnRUeXBlKGhlYWRlcnMpO1xuXG4gIHJlcXVlc3QoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGhlYWRlcnMsIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3QoaG9zdCwgdXJpLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGhlYWRlcnMsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHVybCA9IHVybEZyb21Ib3N0VVJJQW5kUGFyYW1ldGVycyhob3N0LCB1cmksIHBhcmFtZXRlcnMpLFxuICAgICAgICBhY2NlcHQgPSBoZWFkZXJzW0FDQ0VQVF0gfHwgbnVsbCxcbiAgICAgICAgY29udGVudFR5cGUgPSBoZWFkZXJzW0NPTlRFTlRfVFlQRV0gfHwgbnVsbCxcbiAgICAgICAgeG1sSHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICBpZiAoY29udGVudFR5cGUgPT09IEFQUExJQ0FUSU9OX0pTT04pIHtcbiAgICBjb25zdCBqc29uID0gYm9keSwgIC8vL1xuICAgICAgICAgIGpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShqc29uKTtcblxuICAgIGJvZHkgPSBqc29uU3RyaW5nOyAgLy8vXG4gIH1cblxuICB4bWxIdHRwUmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgY29uc3QgeyByZWFkeVN0YXRlLCBzdGF0dXMsIHJlc3BvbnNlVGV4dCB9ID0geG1sSHR0cFJlcXVlc3Q7XG5cbiAgICBpZiAocmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICBsZXQgYm9keSA9IHJlc3BvbnNlVGV4dDtcblxuICAgICAgaWYgKGFjY2VwdCA9PT0gQVBQTElDQVRJT05fSlNPTikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGpzb25TdHJpbmcgPSBib2R5LCAgLy8vXG4gICAgICAgICAgICAgICAganNvbiA9IEpTT04ucGFyc2UoanNvblN0cmluZyk7XG5cbiAgICAgICAgICBib2R5ID0ganNvbjsgIC8vL1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGJvZHkgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2soYm9keSwgc3RhdHVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgeG1sSHR0cFJlcXVlc3Qub3BlbihtZXRob2QsIHVybCk7XG5cbiAgaWYgKGFjY2VwdCAhPT0gbnVsbCkge1xuICAgIHhtbEh0dHBSZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoQUNDRVBULCBhY2NlcHQpO1xuICB9XG5cbiAgaWYgKGNvbnRlbnRUeXBlICE9PSBudWxsKSB7XG4gICAgeG1sSHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihDT05URU5UX1RZUEUsIGNvbnRlbnRUeXBlKTtcbiAgfVxuXG4gIChib2R5ICE9PSBudWxsKSA/XG4gICAgeG1sSHR0cFJlcXVlc3Quc2VuZChib2R5KSA6XG4gICAgICB4bWxIdHRwUmVxdWVzdC5zZW5kKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0LFxuICBwb3N0LFxuICByZXF1ZXN0XG59XG5cbmZ1bmN0aW9uIHVuZGVyd3JpdGVBY2NlcHQoaGVhZGVycykge1xuICBjb25zdCBuYW1lID0gQUNDRVBULCAgLy8vXG4gICAgICAgIHZhbHVlID0gQVBQTElDQVRJT05fSlNPTjsgLy8vXG5cbiAgdW5kZXJ3cml0ZShoZWFkZXJzLCBuYW1lLCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHVuZGVyd3JpdGVDb250ZW50VHlwZShoZWFkZXJzKSB7XG4gIGNvbnN0IG5hbWUgPSBDT05URU5UX1RZUEUsICAvLy9cbiAgICAgICAgdmFsdWUgPSBBUFBMSUNBVElPTl9KU09OOyAvLy9cblxuICB1bmRlcndyaXRlKGhlYWRlcnMsIG5hbWUsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdXJsRnJvbUhvc3RVUklBbmRQYXJhbWV0ZXJzKGhvc3QsIHVyaSwgcGFyYW1ldGVycykge1xuICBjb25zdCBxdWVyeVN0cmluZyA9IHF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMocGFyYW1ldGVycyksXG4gICAgICAgIHVybCA9IChxdWVyeVN0cmluZyA9PT0gXCJcIikgP1xuICAgICAgICAgICAgICBgJHtob3N0fSR7dXJpfWAgOlxuICAgICAgICAgICAgICAgIGAke2hvc3R9JHt1cml9PyR7cXVlcnlTdHJpbmd9YDtcblxuICByZXR1cm4gdXJsO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7UUFLSSxHQUFHLEdBQUgsR0FBRztRQWNILElBQUksR0FBSixJQUFJO1FBZUosT0FBTyxHQUFQLE9BQU87O0lBaEMrQixLQUFtQjtJQUNQLFVBQWM7U0FFaEUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxRQUFRO1FBQ3RELFFBQVEsS0FBSyxTQUFTO1FBQ3hCLFFBQVEsR0FBRyxPQUFPLENBQUUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBQ3ZCLE9BQU87OztRQUdILE1BQU0sR0FSb0QsVUFBYyxNQVN4RSxJQUFJLEdBQUcsSUFBSTtJQUVqQixnQkFBZ0IsQ0FBQyxPQUFPO0lBRXhCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFROztTQUdoRCxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRO1FBQzdELFFBQVEsS0FBSyxTQUFTO1FBQ3hCLFFBQVEsR0FBRyxPQUFPLENBQUUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBQ3ZCLE9BQU87OztRQUdILE1BQU0sR0F0Qm9ELFVBQWM7SUF3QjlFLGdCQUFnQixDQUFDLE9BQU87SUFFeEIscUJBQXFCLENBQUMsT0FBTztJQUU3QixPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUTs7U0FHaEQsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVE7UUFDdEUsR0FBRyxHQUFHLDJCQUEyQixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsVUFBVSxHQUN2RCxNQUFNLEdBQUcsT0FBTyxDQWpDMEMsVUFBYyxZQWlDNUMsSUFBSSxFQUNoQyxXQUFXLEdBQUcsT0FBTyxDQWxDcUMsVUFBYyxrQkFrQ2pDLElBQUksRUFDM0MsY0FBYyxPQUFPLGNBQWM7UUFFckMsV0FBVyxLQXJDaUQsVUFBYztZQXNDdEUsSUFBSSxHQUFHLElBQUksRUFDWCxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJO1FBRXRDLElBQUksR0FBRyxVQUFVLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHOztJQUd6QixjQUFjLENBQUMsa0JBQWtCO1lBQ3ZCLFVBQVUsR0FBMkIsY0FBYyxDQUFuRCxVQUFVLEVBQUUsTUFBTSxHQUFtQixjQUFjLENBQXZDLE1BQU0sRUFBRSxZQUFZLEdBQUssY0FBYyxDQUEvQixZQUFZO1lBRXBDLFVBQVUsSUFBSSxDQUFDO2dCQUNiLEtBQUksR0FBRyxZQUFZO2dCQUVuQixNQUFNLEtBbERrRCxVQUFjOzt3QkFvRGhFLFVBQVUsR0FBRyxLQUFJLEVBQ2pCLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVU7b0JBRWxDLEtBQUksR0FBRyxJQUFJLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO3lCQUNWLEtBQUs7b0JBQ1osS0FBSSxHQUFHLElBQUk7O2dCQUdiLFFBQVEsQ0FBQyxLQUFJLEVBQUUsTUFBTTs7OztJQUszQixjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHO1FBRTNCLE1BQU0sS0FBSyxJQUFJO1FBQ2pCLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FwRStCLFVBQWMsU0FvRXBDLE1BQU07O1FBRzVDLFdBQVcsS0FBSyxJQUFJO1FBQ3RCLGNBQWMsQ0FBQyxnQkFBZ0IsQ0F4RStCLFVBQWMsZUF3RTlCLFdBQVc7O0lBRzFELElBQUksS0FBSyxJQUFJLEdBQ1osY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQ3RCLGNBQWMsQ0FBQyxJQUFJOzs7SUFJdkIsR0FBRyxFQUFILEdBQUc7SUFDSCxJQUFJLEVBQUosSUFBSTtJQUNKLE9BQU8sRUFBUCxPQUFPOzs7U0FHQSxnQkFBZ0IsQ0FBQyxPQUFPO1FBQ3pCLElBQUksR0F2RnNELFVBQWMsU0F3RnhFLEtBQUssR0F4RnFELFVBQWMsa0JBd0Y5QyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUF6RmlCLEtBQW1CLGFBMkY1RCxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUs7O1NBR3hCLHFCQUFxQixDQUFDLE9BQU87UUFDOUIsSUFBSSxHQTlGc0QsVUFBYyxlQStGeEUsS0FBSyxHQS9GcUQsVUFBYyxrQkErRjlDLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztRQWhHaUIsS0FBbUIsYUFrRzVELE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSzs7U0FHeEIsMkJBQTJCLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVO1FBQ2xELFdBQVcsT0F0R21DLEtBQW1CLDRCQXNHekIsVUFBVSxHQUNsRCxHQUFHLEdBQUksV0FBVyxhQUNGLE1BQUcsQ0FBVixJQUFJLEVBQU8sTUFBQSxDQUFKLEdBQUcsT0FDRCxNQUFHLENBQVYsSUFBSSxFQUFVLE1BQVcsQ0FBbEIsR0FBRyxHQUFDLENBQUMsR0FBYyxNQUFBLENBQVosV0FBVztXQUVuQyxHQUFHIn0=