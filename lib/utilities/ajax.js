"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.post = post;
exports.request = request;
exports["default"] = void 0;

var _constants = require("../constants");

function get(host, path, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.GET_METHOD,
      body = undefined;
  request(host, path, parameters, method, body, callback);
}

function post(host, path, json, parameters, callback) {
  if (callback === undefined) {
    callback = parameters; ///

    parameters = {};
  }

  var method = _constants.POST_METHOD,
      body = JSON.stringify(json);
  request(host, path, parameters, method, body, callback);
}

function request(host, path, parameters, method, body, callback) {
  var url = urlFromHostPathAndParameters(host, path, parameters),
      accept = _constants.APPLICATION_JSON_ACCEPT,
      xmlHttpRequest = new XMLHttpRequest();

  xmlHttpRequest.onreadystatechange = function () {
    var readyState = xmlHttpRequest.readyState,
        status = xmlHttpRequest.status,
        responseText = xmlHttpRequest.responseText;

    if (readyState == 4) {
      var json = null;

      if (status == 200) {
        var jsonString = responseText; ///

        try {
          json = JSON.parse(jsonString);
        } catch (error) {///
        }
      }

      callback(json, status);
    }
  };

  xmlHttpRequest.open(method, url);
  xmlHttpRequest.setRequestHeader("accept", accept);

  if (method === _constants.PUT_METHOD || method === _constants.POST_METHOD) {
    var contentType = _constants.APPLICATION_JSON_CONTENT_TYPE;
    xmlHttpRequest.setRequestHeader("content-type", contentType);
  }

  xmlHttpRequest.send(body);
}

var _default = {
  get: get,
  post: post,
  request: request
};
exports["default"] = _default;

function queryStringFromParameters(parameters) {
  var names = Object.keys(parameters),
      namesLength = names.length,
      lastIndex = namesLength - 1,
      queryString = names.reduce(function (queryString, name, index) {
    var value = parameters[name],
        encodedName = encodeURIComponent(name),
        encodedValue = encodeURIComponent(value),
        ampersandOrNothing = index !== lastIndex ? "&" : "";
    queryString += "".concat(encodedName, "=").concat(encodedValue).concat(ampersandOrNothing);
    return queryString;
  }, "");
  return queryString;
}

function urlFromHostPathAndParameters(host, path, parameters) {
  var queryString = queryStringFromParameters(parameters),
      url = queryString === "" ? "".concat(host).concat(path) : "".concat(host).concat(path, "?").concat(queryString);
  return url;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,