"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.get = get;
exports.post = post;
exports.request = request;
exports.default = void 0;
var _constants = require("../constants");
"use strict";
function get(host, path, parameters, callback) {
    if (callback === undefined) {
        callback = parameters; ///
        parameters = {
        };
    }
    var method = _constants.GET_METHOD, body = undefined;
    request(host, path, parameters, method, body, callback);
}
function post(host, path, json, parameters, callback) {
    if (callback === undefined) {
        callback = parameters; ///
        parameters = {
        };
    }
    var method = _constants.POST_METHOD, body = JSON.stringify(json);
    request(host, path, parameters, method, body, callback);
}
function request(host, path, parameters, method, body, callback) {
    var url = urlFromHostPathAndParameters(host, path, parameters), accept = _constants.APPLICATION_JSON_ACCEPT, xmlHttpRequest = new XMLHttpRequest();
    xmlHttpRequest.onreadystatechange = function() {
        var readyState = xmlHttpRequest.readyState, status = xmlHttpRequest.status, responseText = xmlHttpRequest.responseText;
        if (readyState == 4) {
            var json = null;
            if (status == 200) {
                var jsonString = responseText; ///
                try {
                    json = JSON.parse(jsonString);
                } catch (error) {
                }
            }
            callback(json, status);
        }
    };
    xmlHttpRequest.open(method, url);
    xmlHttpRequest.setRequestHeader("accept", accept);
    if (method === _constants.PUT_METHOD || method === _constants.POST_METHOD) {
        var contentType = _constants.APPLICATION_JSON_CONTENT_TYPE;
        xmlHttpRequest.setRequestHeader("content-type", contentType);
    }
    xmlHttpRequest.send(body);
}
var _default = {
    get: get,
    post: post,
    request: request
};
exports.default = _default;
function queryStringFromParameters(parameters) {
    var names = Object.keys(parameters), namesLength = names.length, lastIndex = namesLength - 1, queryString = names.reduce(function(queryString1, name, index) {
        var value = parameters[name], encodedName = encodeURIComponent(name), encodedValue = encodeURIComponent(value), ampersandOrNothing = index !== lastIndex ? "&" : "";
        queryString1 += "".concat(encodedName, "=").concat(encodedValue).concat(ampersandOrNothing);
        return queryString1;
    }, "");
    return queryString;
}
function urlFromHostPathAndParameters(host, path, parameters) {
    var queryString = queryStringFromParameters(parameters), url = queryString === "" ? "".concat(host).concat(path) : "".concat(host).concat(path, "?").concat(queryString);
    return url;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNi91dGlsaXRpZXMvYWpheC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgR0VUX01FVEhPRCwgUFVUX01FVEhPRCwgUE9TVF9NRVRIT0QsIEFQUExJQ0FUSU9OX0pTT05fQUNDRVBULCBBUFBMSUNBVElPTl9KU09OX0NPTlRFTlRfVFlQRSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldChob3N0LCBwYXRoLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gcGFyYW1ldGVyczsgLy8vXG4gICAgcGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gR0VUX01FVEhPRCxcbiAgICAgICAgYm9keSA9IHVuZGVmaW5lZDtcblxuICByZXF1ZXN0KGhvc3QsIHBhdGgsIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zdChob3N0LCBwYXRoLCBqc29uLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGxiYWNrID0gcGFyYW1ldGVyczsgLy8vXG4gICAgcGFyYW1ldGVycyA9IHt9O1xuICB9XG5cbiAgY29uc3QgbWV0aG9kID0gUE9TVF9NRVRIT0QsXG4gICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShqc29uKTtcblxuICByZXF1ZXN0KGhvc3QsIHBhdGgsIHBhcmFtZXRlcnMsIG1ldGhvZCwgYm9keSwgY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWVzdChob3N0LCBwYXRoLCBwYXJhbWV0ZXJzLCBtZXRob2QsIGJvZHksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHVybCA9IHVybEZyb21Ib3N0UGF0aEFuZFBhcmFtZXRlcnMoaG9zdCwgcGF0aCwgcGFyYW1ldGVycyksXG4gICAgICAgIGFjY2VwdCA9IEFQUExJQ0FUSU9OX0pTT05fQUNDRVBULFxuICAgICAgICB4bWxIdHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gIHhtbEh0dHBSZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IHJlYWR5U3RhdGUsIHN0YXR1cywgcmVzcG9uc2VUZXh0IH0gPSB4bWxIdHRwUmVxdWVzdDtcblxuICAgIGlmIChyZWFkeVN0YXRlID09IDQpIHtcbiAgICAgIGxldCBqc29uID0gbnVsbDtcblxuICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgY29uc3QganNvblN0cmluZyA9IHJlc3BvbnNlVGV4dDsgLy8vXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLy9cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhqc29uLCBzdGF0dXMpO1xuICAgIH1cbiAgfTtcblxuICB4bWxIdHRwUmVxdWVzdC5vcGVuKG1ldGhvZCwgdXJsKTtcblxuICB4bWxIdHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKFwiYWNjZXB0XCIsIGFjY2VwdCk7XG5cbiAgaWYgKChtZXRob2QgPT09IFBVVF9NRVRIT0QpIHx8IChtZXRob2QgPT09IFBPU1RfTUVUSE9EKSkge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gQVBQTElDQVRJT05fSlNPTl9DT05URU5UX1RZUEU7XG5cbiAgICB4bWxIdHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKFwiY29udGVudC10eXBlXCIsIGNvbnRlbnRUeXBlKTtcbiAgfVxuXG4gIHhtbEh0dHBSZXF1ZXN0LnNlbmQoYm9keSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0LFxuICBwb3N0LFxuICByZXF1ZXN0XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLFxuICAgICAgICBuYW1lc0xlbmd0aCA9IG5hbWVzLmxlbmd0aCxcbiAgICAgICAgbGFzdEluZGV4ID0gbmFtZXNMZW5ndGggLSAxLFxuICAgICAgICBxdWVyeVN0cmluZyA9IG5hbWVzLnJlZHVjZSgocXVlcnlTdHJpbmcsIG5hbWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJhbWV0ZXJzW25hbWVdLFxuICAgICAgICAgICAgICAgIGVuY29kZWROYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpLFxuICAgICAgICAgICAgICAgIGVuY29kZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSksXG4gICAgICAgICAgICAgICAgYW1wZXJzYW5kT3JOb3RoaW5nID0gKGluZGV4ICE9PSBsYXN0SW5kZXgpID8gXCImXCIgOiBcIlwiO1xuICBcbiAgICAgICAgICBxdWVyeVN0cmluZyArPSBgJHtlbmNvZGVkTmFtZX09JHtlbmNvZGVkVmFsdWV9JHthbXBlcnNhbmRPck5vdGhpbmd9YDtcbiAgXG4gICAgICAgICAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xuICAgICAgICB9LCBcIlwiKTtcblxuICByZXR1cm4gcXVlcnlTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHVybEZyb21Ib3N0UGF0aEFuZFBhcmFtZXRlcnMoaG9zdCwgcGF0aCwgcGFyYW1ldGVycykge1xuICBjb25zdCBxdWVyeVN0cmluZyA9IHF1ZXJ5U3RyaW5nRnJvbVBhcmFtZXRlcnMocGFyYW1ldGVycyksXG4gICAgICAgIHVybCA9IChxdWVyeVN0cmluZyA9PT0gXCJcIikgP1xuICAgICAgICAgICAgICBgJHtob3N0fSR7cGF0aH1gIDpcbiAgICAgICAgICAgICAgICBgJHtob3N0fSR7cGF0aH0/JHtxdWVyeVN0cmluZ31g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