"use strict";

import path from "path";
import { first, second } from "../utilities/array";
import { DEFAULT_RC_BASE_EXTENSION } from "../constants";
import { readFile, writeFile, checkFileExists } from "../utilities/fileSystem";

if (!globalThis.rc) {
  globalThis.rc = _rc;
}

const {
  rc
} = globalThis;
export default {
  rc
};
let baseExtension = DEFAULT_RC_BASE_EXTENSION;

function _rc(environmentNameOrArgv = null) {
  let environment,
      environmentName,
      environmentNameOrArgvArgv = environmentNameOrArgv instanceof Array;

  if (environmentNameOrArgvArgv) {
    const argv = environmentNameOrArgv; ///

    environmentName = environmentNameFromArgv(argv);
  } else {
    environmentName = environmentNameOrArgv; ///
  }

  const json = readRCFile(),
        {
    environments
  } = json;

  if (environmentName === null) {
    const firstEnvironment = first(environments);
    environment = firstEnvironment; ///
  } else {
    environment = environments.find(environment => {
      const {
        name
      } = environment,
            found = name === environmentName;
      return found;
    });
  }

  delete environment.name;
  Object.assign(rc, environment);
  return environment;
}

function readRCFile() {
  const rcFilePath = rcFilePathFromNothing(),
        rcFileContent = readFile(rcFilePath),
        json = JSON.parse(rcFileContent);
  return json;
}

function writeRCFile(json) {
  const rcFilePath = rcFilePathFromNothing(),
        rdFileContent = JSON.stringify(json, null, "  ");
  writeFile(rcFilePath, rdFileContent);
}

function updateRCFile(addedProperties, ...deletedPropertyNames) {
  let json = readRCFile();

  if (addedProperties) {
    Object.assign(json, addedProperties);
  }

  deletedPropertyNames.forEach(deletedPropertyName => {
    delete json[deletedPropertyName];
  });
  writeRCFile(json);
}

function checkRCFileExists() {
  const rcFilePath = rcFilePathFromNothing(),
        rcFileExists = checkFileExists(rcFilePath);
  return rcFileExists;
}

function createVacuousRCFile() {
  const json = {
    "environments": [{}]
  };
  writeRCFile(json);
}

function setRCBaseExtension(rcBaseExtension) {
  baseExtension = rcBaseExtension;
}

Object.assign(_rc, {
  readRCFile,
  writeRCFile,
  updateRCFile,
  checkRCFileExists,
  createVacuousRCFile,
  setRCBaseExtension
});

function environmentNameFromArgv(argv) {
  let environmentName = null;
  argv.find(argument => {
    ///
    const matches = argument.match(/--environment=(.+)/),
          found = matches !== null;

    if (found) {
      const secondMatch = second(matches);
      environmentName = secondMatch;
    }

    return found;
  });
  return environmentName;
}

function rcFilePathFromNothing() {
  const rcFilePath = `./.${baseExtension}rc`;
  return rcFilePath;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRpb24uanMiXSwibmFtZXMiOlsicGF0aCIsImZpcnN0Iiwic2Vjb25kIiwiREVGQVVMVF9SQ19CQVNFX0VYVEVOU0lPTiIsInJlYWRGaWxlIiwid3JpdGVGaWxlIiwiY2hlY2tGaWxlRXhpc3RzIiwiZ2xvYmFsVGhpcyIsInJjIiwiX3JjIiwiYmFzZUV4dGVuc2lvbiIsImVudmlyb25tZW50TmFtZU9yQXJndiIsImVudmlyb25tZW50IiwiZW52aXJvbm1lbnROYW1lIiwiZW52aXJvbm1lbnROYW1lT3JBcmd2QXJndiIsIkFycmF5IiwiYXJndiIsImVudmlyb25tZW50TmFtZUZyb21Bcmd2IiwianNvbiIsInJlYWRSQ0ZpbGUiLCJlbnZpcm9ubWVudHMiLCJmaXJzdEVudmlyb25tZW50IiwiZmluZCIsIm5hbWUiLCJmb3VuZCIsIk9iamVjdCIsImFzc2lnbiIsInJjRmlsZVBhdGgiLCJyY0ZpbGVQYXRoRnJvbU5vdGhpbmciLCJyY0ZpbGVDb250ZW50IiwiSlNPTiIsInBhcnNlIiwid3JpdGVSQ0ZpbGUiLCJyZEZpbGVDb250ZW50Iiwic3RyaW5naWZ5IiwidXBkYXRlUkNGaWxlIiwiYWRkZWRQcm9wZXJ0aWVzIiwiZGVsZXRlZFByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwiZGVsZXRlZFByb3BlcnR5TmFtZSIsImNoZWNrUkNGaWxlRXhpc3RzIiwicmNGaWxlRXhpc3RzIiwiY3JlYXRlVmFjdW91c1JDRmlsZSIsInNldFJDQmFzZUV4dGVuc2lvbiIsInJjQmFzZUV4dGVuc2lvbiIsImFyZ3VtZW50IiwibWF0Y2hlcyIsIm1hdGNoIiwic2Vjb25kTWF0Y2giXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE9BQU9BLElBQVAsTUFBaUIsTUFBakI7QUFFQSxTQUFTQyxLQUFULEVBQWdCQyxNQUFoQixRQUE4QixvQkFBOUI7QUFDQSxTQUFTQyx5QkFBVCxRQUEwQyxjQUExQztBQUNBLFNBQVNDLFFBQVQsRUFBbUJDLFNBQW5CLEVBQThCQyxlQUE5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O0FBQ0Q7O0FBRUQsU0FBU0MsbUJBQVQsR0FBK0I7QUFDN0IsUUFBTXhCLElBQUksR0FBRztBQUNYLG9CQUFnQixDQUNkLEVBRGM7QUFETCxHQUFiO0FBTUFjLEVBQUFBLFdBQVcsQ0FBQ2QsSUFBRCxDQUFYO0FBQ0Q7O0FBRUQsU0FBU3lCLGtCQUFULENBQTRCQyxlQUE1QixFQUE2QztBQUFFbEMsRUFBQUEsYUFBYSxHQUFHa0MsZUFBaEI7QUFBa0M7O0FBRWpGbkIsTUFBTSxDQUFDQyxNQUFQLENBQWNqQixHQUFkLEVBQW1CO0FBQ2pCVSxFQUFBQSxVQURpQjtBQUVqQmEsRUFBQUEsV0FGaUI7QUFHakJHLEVBQUFBLFlBSGlCO0FBSWpCSyxFQUFBQSxpQkFKaUI7QUFLakJFLEVBQUFBLG1CQUxpQjtBQU1qQkMsRUFBQUE7QUFOaUIsQ0FBbkI7O0FBU0EsU0FBUzFCLHVCQUFULENBQWlDRCxJQUFqQyxFQUF1QztBQUNyQyxNQUFJSCxlQUFlLEdBQUcsSUFBdEI7QUFFQUcsRUFBQUEsSUFBSSxDQUFDTSxJQUFMLENBQVd1QixRQUFELElBQWM7QUFBRztBQUN6QixVQUFNQyxPQUFPLEdBQUdELFFBQVEsQ0FBQ0UsS0FBVCxDQUFlLG9CQUFmLENBQWhCO0FBQUEsVUFDTXZCLEtBQUssR0FBSXNCLE9BQU8sS0FBSyxJQUQzQjs7QUFHQSxRQUFJdEIsS0FBSixFQUFXO0FBQ1QsWUFBTXdCLFdBQVcsR0FBRzlDLE1BQU0sQ0FBQzRDLE9BQUQsQ0FBMUI7QUFFQWpDLE1BQUFBLGVBQWUsR0FBR21DLFdBQWxCO0FBQ0Q7O0FBRUQsV0FBT3hCLEtBQVA7QUFDRCxHQVhEO0FBYUEsU0FBT1gsZUFBUDtBQUNEOztBQUVELFNBQVNlLHFCQUFULEdBQWlDO0FBQy9CLFFBQU1ELFVBQVUsR0FBSSxNQUFLakIsYUFBYyxJQUF2QztBQUVBLFNBQU9pQixVQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcblxuaW1wb3J0IHsgZmlyc3QsIHNlY29uZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IERFRkFVTFRfUkNfQkFTRV9FWFRFTlNJT04gfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyByZWFkRmlsZSwgd3JpdGVGaWxlLCBjaGVja0ZpbGVFeGlzdHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2ZpbGVTeXN0ZW1cIjtcblxuaWYgKCFnbG9iYWxUaGlzLnJjKSB7XG4gIGdsb2JhbFRoaXMucmMgPSBfcmM7XG59XG5cbmNvbnN0IHsgcmMgfSA9IGdsb2JhbFRoaXM7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmNcbn07XG5cbmxldCBiYXNlRXh0ZW5zaW9uID0gREVGQVVMVF9SQ19CQVNFX0VYVEVOU0lPTjtcblxuZnVuY3Rpb24gX3JjKGVudmlyb25tZW50TmFtZU9yQXJndiA9IG51bGwpIHtcbiAgbGV0IGVudmlyb25tZW50LFxuICAgICAgZW52aXJvbm1lbnROYW1lLFxuICAgICAgZW52aXJvbm1lbnROYW1lT3JBcmd2QXJndiA9IChlbnZpcm9ubWVudE5hbWVPckFyZ3YgaW5zdGFuY2VvZiBBcnJheSk7XG5cbiAgaWYgKGVudmlyb25tZW50TmFtZU9yQXJndkFyZ3YpIHtcbiAgICBjb25zdCBhcmd2ID0gZW52aXJvbm1lbnROYW1lT3JBcmd2OyAvLy9cblxuICAgIGVudmlyb25tZW50TmFtZSA9IGVudmlyb25tZW50TmFtZUZyb21Bcmd2KGFyZ3YpO1xuICB9IGVsc2Uge1xuICAgIGVudmlyb25tZW50TmFtZSA9IGVudmlyb25tZW50TmFtZU9yQXJndjsgIC8vL1xuICB9XG5cbiAgY29uc3QganNvbiA9IHJlYWRSQ0ZpbGUoKSxcbiAgICAgICAgeyBlbnZpcm9ubWVudHMgfSA9IGpzb247XG5cbiAgaWYgKGVudmlyb25tZW50TmFtZSA9PT0gbnVsbCkge1xuICAgIGNvbnN0IGZpcnN0RW52aXJvbm1lbnQgPSBmaXJzdChlbnZpcm9ubWVudHMpO1xuXG4gICAgZW52aXJvbm1lbnQgPSBmaXJzdEVudmlyb25tZW50OyAvLy9cbiAgfSBlbHNlIHtcbiAgICBlbnZpcm9ubWVudCA9IGVudmlyb25tZW50cy5maW5kKChlbnZpcm9ubWVudCkgPT4ge1xuICAgICAgY29uc3QgeyBuYW1lIH0gPSBlbnZpcm9ubWVudCxcbiAgICAgICAgICAgIGZvdW5kID0gKG5hbWUgPT09IGVudmlyb25tZW50TmFtZSk7XG5cbiAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9KTtcbiAgfVxuXG4gIGRlbGV0ZSBlbnZpcm9ubWVudC5uYW1lO1xuXG4gIE9iamVjdC5hc3NpZ24ocmMsIGVudmlyb25tZW50KTtcblxuICByZXR1cm4gZW52aXJvbm1lbnQ7XG59XG5cbmZ1bmN0aW9uIHJlYWRSQ0ZpbGUoKSB7XG4gIGNvbnN0IHJjRmlsZVBhdGggPSByY0ZpbGVQYXRoRnJvbU5vdGhpbmcoKSxcbiAgICAgICAgcmNGaWxlQ29udGVudCA9IHJlYWRGaWxlKHJjRmlsZVBhdGgpLFxuICAgICAgICBqc29uID0gSlNPTi5wYXJzZShyY0ZpbGVDb250ZW50KTtcblxuICByZXR1cm4ganNvbjsgICAgICBcbn1cblxuZnVuY3Rpb24gd3JpdGVSQ0ZpbGUoanNvbikge1xuICBjb25zdCByY0ZpbGVQYXRoID0gcmNGaWxlUGF0aEZyb21Ob3RoaW5nKCksXG4gICAgICAgIHJkRmlsZUNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShqc29uLCBudWxsLCBcIiAgXCIpO1xuXG4gIHdyaXRlRmlsZShyY0ZpbGVQYXRoLCByZEZpbGVDb250ZW50KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUkNGaWxlKGFkZGVkUHJvcGVydGllcywgLi4uZGVsZXRlZFByb3BlcnR5TmFtZXMpIHtcbiAgbGV0IGpzb24gPSByZWFkUkNGaWxlKCk7XG5cbiAgaWYgKGFkZGVkUHJvcGVydGllcykge1xuICAgIE9iamVjdC5hc3NpZ24oanNvbiwgYWRkZWRQcm9wZXJ0aWVzKTtcbiAgfVxuXG4gIGRlbGV0ZWRQcm9wZXJ0eU5hbWVzLmZvckVhY2goKGRlbGV0ZWRQcm9wZXJ0eU5hbWUpID0+IHtcbiAgICBkZWxldGUganNvbltkZWxldGVkUHJvcGVydHlOYW1lXTtcbiAgfSk7XG5cbiAgd3JpdGVSQ0ZpbGUoanNvbik7ICAgICAgXG59XG5cbmZ1bmN0aW9uIGNoZWNrUkNGaWxlRXhpc3RzKCkge1xuICBjb25zdCByY0ZpbGVQYXRoID0gcmNGaWxlUGF0aEZyb21Ob3RoaW5nKCksXG4gICAgICAgIHJjRmlsZUV4aXN0cyA9IGNoZWNrRmlsZUV4aXN0cyhyY0ZpbGVQYXRoKTtcblxuICByZXR1cm4gcmNGaWxlRXhpc3RzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVWYWN1b3VzUkNGaWxlKCkge1xuICBjb25zdCBqc29uID0ge1xuICAgIFwiZW52aXJvbm1lbnRzXCI6IFtcbiAgICAgIHt9XG4gICAgXVxuICB9O1xuXG4gIHdyaXRlUkNGaWxlKGpzb24pO1xufVxuXG5mdW5jdGlvbiBzZXRSQ0Jhc2VFeHRlbnNpb24ocmNCYXNlRXh0ZW5zaW9uKSB7IGJhc2VFeHRlbnNpb24gPSByY0Jhc2VFeHRlbnNpb247IH1cblxuT2JqZWN0LmFzc2lnbihfcmMsIHtcbiAgcmVhZFJDRmlsZSxcbiAgd3JpdGVSQ0ZpbGUsXG4gIHVwZGF0ZVJDRmlsZSxcbiAgY2hlY2tSQ0ZpbGVFeGlzdHMsXG4gIGNyZWF0ZVZhY3VvdXNSQ0ZpbGUsXG4gIHNldFJDQmFzZUV4dGVuc2lvblxufSk7XG5cbmZ1bmN0aW9uIGVudmlyb25tZW50TmFtZUZyb21Bcmd2KGFyZ3YpIHtcbiAgbGV0IGVudmlyb25tZW50TmFtZSA9IG51bGw7XG5cbiAgYXJndi5maW5kKChhcmd1bWVudCkgPT4geyAgLy8vXG4gICAgY29uc3QgbWF0Y2hlcyA9IGFyZ3VtZW50Lm1hdGNoKC8tLWVudmlyb25tZW50PSguKykvKSxcbiAgICAgICAgICBmb3VuZCA9IChtYXRjaGVzICE9PSBudWxsKTtcblxuICAgIGlmIChmb3VuZCkge1xuICAgICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICAgIGVudmlyb25tZW50TmFtZSA9IHNlY29uZE1hdGNoO1xuICAgIH1cblxuICAgIHJldHVybiBmb3VuZDtcbiAgfSk7XG5cbiAgcmV0dXJuIGVudmlyb25tZW50TmFtZTtcbn1cblxuZnVuY3Rpb24gcmNGaWxlUGF0aEZyb21Ob3RoaW5nKCkge1xuICBjb25zdCByY0ZpbGVQYXRoID0gYC4vLiR7YmFzZUV4dGVuc2lvbn1yY2A7XG5cbiAgcmV0dXJuIHJjRmlsZVBhdGg7XG59XG4iXX0=