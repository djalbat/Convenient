'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.whilst = whilst;
exports.forEach = forEach;
exports.sequence = sequence;
exports.eventually = eventually;
exports.repeatedly = repeatedly;
exports.forwardsForEach = forwardsForEach;
exports.backwardsForEach = backwardsForEach;
exports["default"] = void 0;

function whilst(callback, done, context) {
  var count = -1;

  function next() {
    count++;
    var index = count,
        ///
    terminate = callback(next, done, context, index);

    if (terminate) {
      done();
    }
  }

  next();
}

function forEach(array, callback, done, context) {
  var length = array.length; ///

  var count = -1;

  function next() {
    count++;
    var terminate = count === length;

    if (terminate) {
      done();
    } else {
      var index = count,
          ///
      element = array[index];
      callback(element, next, done, context, index);
    }
  }

  next();
}

function sequence(callbacks, done, context) {
  var length = callbacks.length; ///

  var count = -1;

  function next() {
    count++;
    var terminate = count === length;

    if (terminate) {
      done();
    } else {
      var index = count,
          ///
      callback = callbacks[index];
      callback(next, done, context, index);
    }
  }

  next();
}

function eventually(callbacks, done, context) {
  var length = callbacks.length; ///

  var count = 0;

  function next() {
    count++;
    var terminate = count === length;

    if (terminate) {
      done();
    }
  }

  callbacks.forEach(function (callback, index) {
    callback(next, done, context, index);
  });
}

function repeatedly(callback, length, done, context) {
  var count = 0;

  function next() {
    count++;
    var terminate = count === length;

    if (terminate) {
      done();
    }
  }

  for (var index = 0; index < length; index++) {
    callback(next, done, context, index);
  }
}

function forwardsForEach(array, callback, done, context) {
  var length = array.length; ///

  var count = -1;

  function next() {
    count++;
    var terminate = count === length;

    if (terminate) {
      done();
    } else {
      var index = count,
          ///
      element = array[index];
      callback(element, next, done, context, index);
    }
  }

  next();
}

function backwardsForEach(array, callback, done, context) {
  var length = array.length; ///

  var count = length;

  function next() {
    count--;
    var terminate = count === -1;

    if (terminate) {
      done();
    } else {
      var index = count,
          ///
      element = array[index];
      callback(element, next, done, context, index);
    }
  }

  next();
}

var _default = {
  whilst: whilst,
  forEach: forEach,
  sequence: sequence,
  eventually: eventually,
  repeatedly: repeatedly,
  forwardsForEach: forwardsForEach,
  backwardsForEach: backwardsForEach
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaHJvbm91cy5qcyJdLCJuYW1lcyI6WyJ3aGlsc3QiLCJjYWxsYmFjayIsImRvbmUiLCJjb250ZXh0IiwiY291bnQiLCJuZXh0IiwiaW5kZXgiLCJ0ZXJtaW5hdGUiLCJmb3JFYWNoIiwiYXJyYXkiLCJsZW5ndGgiLCJlbGVtZW50Iiwic2VxdWVuY2UiLCJjYWxsYmFja3MiLCJldmVudHVhbGx5IiwicmVwZWF0ZWRseSIsImZvcndhcmRzRm9yRWFjaCIsImJhY2t3YXJkc0ZvckVhY2giXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztBQUVPLFNBQVNBLE1BQVQsQ0FBZ0JDLFFBQWhCLEVBQTBCQyxJQUExQixFQUFnQ0MsT0FBaEMsRUFBeUM7QUFDOUMsTUFBSUMsS0FBSyxHQUFHLENBQUMsQ0FBYjs7QUFFQSxXQUFTQyxJQUFULEdBQWdCO0FBQ2RELElBQUFBLEtBQUs7QUFFTCxRQUFNRSxLQUFLLEdBQUdGLEtBQWQ7QUFBQSxRQUFzQjtBQUNoQkcsSUFBQUEsU0FBUyxHQUFHTixRQUFRLENBQUNJLElBQUQsRUFBT0gsSUFBUCxFQUFhQyxPQUFiLEVBQXNCRyxLQUF0QixDQUQxQjs7QUFHQSxRQUFJQyxTQUFKLEVBQWU7QUFDYkwsTUFBQUEsSUFBSTtBQUNMO0FBQ0Y7O0FBRURHLEVBQUFBLElBQUk7QUFDTDs7QUFFTSxTQUFTRyxPQUFULENBQWlCQyxLQUFqQixFQUF3QlIsUUFBeEIsRUFBa0NDLElBQWxDLEVBQXdDQyxPQUF4QyxFQUFpRDtBQUN0RCxNQUFNTyxNQUFNLEdBQUdELEtBQUssQ0FBQ0MsTUFBckIsQ0FEc0QsQ0FDeEI7O0FBRTlCLE1BQUlOLEtBQUssR0FBRyxDQUFDLENBQWI7O0FBRUEsV0FBU0MsSUFBVCxHQUFnQjtBQUNkRCxJQUFBQSxLQUFLO0FBRUwsUUFBTUcsU0FBUyxHQUFJSCxLQUFLLEtBQUtNLE1BQTdCOztBQUVBLFFBQUlILFNBQUosRUFBZTtBQUNiTCxNQUFBQSxJQUFJO0FBQ0wsS0FGRCxNQUVPO0FBQ0ws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clxuZXhwb3J0IGZ1bmN0aW9uIHdoaWxzdChjYWxsYmFjaywgZG9uZSwgY29udGV4dCkge1xyXG4gIGxldCBjb3VudCA9IC0xO1xyXG5cclxuICBmdW5jdGlvbiBuZXh0KCkge1xyXG4gICAgY291bnQrKztcclxuXHJcbiAgICBjb25zdCBpbmRleCA9IGNvdW50LCAgLy8vXHJcbiAgICAgICAgICB0ZXJtaW5hdGUgPSBjYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0LCBpbmRleCk7XHJcblxyXG4gICAgaWYgKHRlcm1pbmF0ZSkge1xyXG4gICAgICBkb25lKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZXh0KCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoKGFycmF5LCBjYWxsYmFjaywgZG9uZSwgY29udGV4dCkge1xyXG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgIC8vL1xyXG5cclxuICBsZXQgY291bnQgPSAtMTtcclxuXHJcbiAgZnVuY3Rpb24gbmV4dCgpIHtcclxuICAgIGNvdW50Kys7XHJcblxyXG4gICAgY29uc3QgdGVybWluYXRlID0gKGNvdW50ID09PSBsZW5ndGgpO1xyXG5cclxuICAgIGlmICh0ZXJtaW5hdGUpIHtcclxuICAgICAgZG9uZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgaW5kZXggPSBjb3VudCwgIC8vL1xyXG4gICAgICAgICAgICBlbGVtZW50ID0gYXJyYXlbaW5kZXhdO1xyXG5cclxuICAgICAgY2FsbGJhY2soZWxlbWVudCwgbmV4dCwgZG9uZSwgY29udGV4dCwgaW5kZXgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmV4dCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVuY2UoY2FsbGJhY2tzLCBkb25lLCBjb250ZXh0KSB7XHJcbiAgY29uc3QgbGVuZ3RoID0gY2FsbGJhY2tzLmxlbmd0aDsgIC8vL1xyXG5cclxuICBsZXQgY291bnQgPSAtMTtcclxuXHJcbiAgZnVuY3Rpb24gbmV4dCgpIHtcclxuICAgIGNvdW50Kys7XHJcblxyXG4gICAgY29uc3QgdGVybWluYXRlID0gKGNvdW50ID09PSBsZW5ndGgpO1xyXG5cclxuICAgIGlmICh0ZXJtaW5hdGUpIHtcclxuICAgICAgZG9uZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgaW5kZXggPSBjb3VudCwgIC8vL1xyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1tpbmRleF07XHJcblxyXG4gICAgICBjYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0LCBpbmRleCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZXh0KCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBldmVudHVhbGx5KGNhbGxiYWNrcywgZG9uZSwgY29udGV4dCkge1xyXG4gIGNvbnN0IGxlbmd0aCA9IGNhbGxiYWNrcy5sZW5ndGg7ICAvLy9cclxuXHJcbiAgbGV0IGNvdW50ID0gMDtcclxuXHJcbiAgZnVuY3Rpb24gbmV4dCgpIHtcclxuICAgIGNvdW50Kys7XHJcblxyXG4gICAgY29uc3QgdGVybWluYXRlID0gKGNvdW50ID09PSBsZW5ndGgpO1xyXG5cclxuICAgIGlmICh0ZXJtaW5hdGUpIHtcclxuICAgICAgZG9uZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24oY2FsbGJhY2ssIGluZGV4KSB7XHJcbiAgICBjYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0LCBpbmRleCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXBlYXRlZGx5KGNhbGxiYWNrLCBsZW5ndGgsIGRvbmUsIGNvbnRleHQpIHtcclxuICBsZXQgY291bnQgPSAwO1xyXG5cclxuICBmdW5jdGlvbiBuZXh0KCkge1xyXG4gICAgY291bnQrKztcclxuXHJcbiAgICBjb25zdCB0ZXJtaW5hdGUgPSAoY291bnQgPT09IGxlbmd0aCk7XHJcblxyXG4gICAgaWYgKHRlcm1pbmF0ZSkge1xyXG4gICAgICBkb25lKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICBjYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0LCBpbmRleCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZHNGb3JFYWNoKGFycmF5LCBjYWxsYmFjaywgZG9uZSwgY29udGV4dCkge1xyXG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgIC8vL1xyXG5cclxuICBsZXQgY291bnQgPSAtMTtcclxuXHJcbiAgZnVuY3Rpb24gbmV4dCgpIHtcclxuICAgIGNvdW50Kys7XHJcblxyXG4gICAgY29uc3QgdGVybWluYXRlID0gKGNvdW50ID09PSBsZW5ndGgpO1xyXG5cclxuICAgIGlmICh0ZXJtaW5hdGUpIHtcclxuICAgICAgZG9uZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgaW5kZXggPSBjb3VudCwgIC8vL1xyXG4gICAgICAgICAgICBlbGVtZW50ID0gYXJyYXlbaW5kZXhdO1xyXG5cclxuICAgICAgY2FsbGJhY2soZWxlbWVudCwgbmV4dCwgZG9uZSwgY29udGV4dCwgaW5kZXgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmV4dCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYmFja3dhcmRzRm9yRWFjaChhcnJheSwgY2FsbGJhY2ssIGRvbmUsIGNvbnRleHQpIHtcclxuICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7ICAvLy9cclxuXHJcbiAgbGV0IGNvdW50ID0gbGVuZ3RoO1xyXG5cclxuICBmdW5jdGlvbiBuZXh0KCkge1xyXG4gICAgY291bnQtLTtcclxuXHJcbiAgICBjb25zdCB0ZXJtaW5hdGUgPSAoY291bnQgPT09IC0xKTtcclxuXHJcbiAgICBpZiAodGVybWluYXRlKSB7XHJcbiAgICAgIGRvbmUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gY291bnQsICAvLy9cclxuICAgICAgICAgICAgZWxlbWVudCA9IGFycmF5W2luZGV4XTtcclxuXHJcbiAgICAgIGNhbGxiYWNrKGVsZW1lbnQsIG5leHQsIGRvbmUsIGNvbnRleHQsIGluZGV4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5leHQoKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHdoaWxzdCxcclxuICBmb3JFYWNoLFxyXG4gIHNlcXVlbmNlLFxyXG4gIGV2ZW50dWFsbHksXHJcbiAgcmVwZWF0ZWRseSxcclxuICBmb3J3YXJkc0ZvckVhY2gsXHJcbiAgYmFja3dhcmRzRm9yRWFjaFxyXG59O1xyXG4iXX0=