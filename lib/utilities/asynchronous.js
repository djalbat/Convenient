'use strict';

function whilst(callback, done, context) {
  var count = -1;

  function next() {
    count++;

    var index = count,
        ///
    terminate = callback(next, done, context, index);

    if (terminate) {
      done();
    }
  }

  next();
}

function forEach(array, callback, done, context) {
  var length = array.length; ///

  var count = -1;

  function next() {
    count++;

    var terminate = count === length;

    if (terminate) {
      done();
    } else {
      var index = count,
          ///
      element = array[index];

      callback(element, next, done, context, index);
    }
  }

  next();
}

function sequence(callbacks, done, context) {
  var length = callbacks.length; ///

  var count = -1;

  function next() {
    count++;

    var terminate = count === length;

    if (terminate) {
      done();
    } else {
      var index = count,
          ///
      callback = callbacks[index];

      callback(next, done, context, index);
    }
  }

  next();
}

function eventually(callbacks, done, context) {
  var length = callbacks.length; ///

  var count = 0;

  function next() {
    count++;

    var terminate = count === length;

    if (terminate) {
      done();
    }
  }

  callbacks.forEach(function (callback, index) {
    callback(next, done, context, index);
  });
}

function repeatedly(callback, length, done, context) {
  var count = 0;

  function next() {
    count++;

    var terminate = count === length;

    if (terminate) {
      done();
    }
  }

  for (var index = 0; index < length; index++) {
    callback(next, done, context, index);
  }
}

module.exports = {
  whilst: whilst,
  forEach: forEach,
  sequence: sequence,
  eventually: eventually,
  repeatedly: repeatedly
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvYXN5bmNocm9ub3VzLmpzIl0sIm5hbWVzIjpbIndoaWxzdCIsImNhbGxiYWNrIiwiZG9uZSIsImNvbnRleHQiLCJjb3VudCIsIm5leHQiLCJpbmRleCIsInRlcm1pbmF0ZSIsImZvckVhY2giLCJhcnJheSIsImxlbmd0aCIsImVsZW1lbnQiLCJzZXF1ZW5jZSIsImNhbGxiYWNrcyIsImV2ZW50dWFsbHkiLCJyZXBlYXRlZGx5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsU0FBU0EsTUFBVCxDQUFnQkMsUUFBaEIsRUFBMEJDLElBQTFCLEVBQWdDQyxPQUFoQyxFQUF5QztBQUN2QyxNQUFJQyxRQUFRLENBQUMsQ0FBYjs7QUFFQSxXQUFTQyxJQUFULEdBQWdCO0FBQ2REOztBQUVBLFFBQU1FLFFBQVFGLEtBQWQ7QUFBQSxRQUFzQjtBQUNoQkcsZ0JBQVlOLFNBQVNJLElBQVQsRUFBZUgsSUFBZixFQUFxQkMsT0FBckIsRUFBOEJHLEtBQTlCLENBRGxCOztBQUdBLFFBQUlDLFNBQUosRUFBZTtBQUNiTDtBQUNEO0FBQ0Y7O0FBRURHO0FBQ0Q7O0FBRUQsU0FBU0csT0FBVCxDQUFpQkMsS0FBakIsRUFBd0JSLFFBQXhCLEVBQWtDQyxJQUFsQyxFQUF3Q0MsT0FBeEMsRUFBaUQ7QUFDL0MsTUFBTU8sU0FBU0QsTUFBTUMsTUFBckIsQ0FEK0MsQ0FDakI7O0FBRTlCLE1BQUlOLFFBQVEsQ0FBQyxDQUFiOztBQUVBLFdBQVNDLElBQVQsR0FBZ0I7QUFDZEQ7O0FBRUEsUUFBTUcsWUFBYUgsVUFBVU0sTUFBN0I7O0FBRUEsUUFBSUgsU0FBSixFQUFlO0FBQ2JMO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBTUksUUFBUUYsS0FBZDtBQUFBLFVBQXNCO0FBQ2hCTyxnQkFBVUYsTUFBTUgsS0FBTixDQURoQjs7QUFHQUwsZUFBU1UsT0FBVCxFQUFrQk4sSUFBbEIsRUFBd0JILElBQXhCLEVBQThCQyxPQUE5QixFQUF1Q0csS0FBdkM7QUFDRDtBQUNGOztBQUVERDtBQUNEOztBQUVELFNBQVNPLFFBQVQsQ0FBa0JDLFNBQWxCLEVBQTZCWCxJQUE3QixFQUFtQ0MsT0FBbkMsRUFBNEM7QUFDMUMsTUFBTU8sU0FBU0csVUFBVUgsTUFBekIsQ0FEMEMsQ0FDUjs7QUFFbEMsTUFBSU4sUUFBUSxDQUFDLENBQWI7O0FBRUEsV0FBU0MsSUFBVCxHQUFnQjtBQUNkRDs7QUFFQSxRQUFNRyxZQUFhSCxVQUFVTSxNQUE3Qjs7QUFFQSxRQUFJSCxTQUFKLEVBQWU7QUFDYkw7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFNSSxRQUFRRixLQUFkO0FBQUEsVUFBc0I7QUFDaEJILGlCQUFXWSxVQUFVUCxLQUFWLENBRGpCOztBQUdBTCxlQUFTSSxJQUFULEVBQWVILElBQWYsRUFBcUJDLE9BQXJCLEVBQThCRyxLQUE5QjtBQUNEO0FBQ0Y7O0FBRUREO0FBQ0Q7O0FBRUQsU0FBU1MsVUFBVCxDQUFvQkQsU0FBcEIsRUFBK0JYLElBQS9CLEVBQXFDQyxPQUFyQyxFQUE4QztBQUM1QyxNQUFNTyxTQUFTRyxVQUFVSCxNQUF6QixDQUQ0QyxDQUNWOztBQUVsQyxNQUFJTixRQUFRLENBQVo7O0FBRUEsV0FBU0MsSUFBVCxHQUFnQjtBQUNkRDs7QUFFQSxRQUFNRyxZQUFhSCxVQUFVTSxNQUE3Qjs7QUFFQSxRQUFJSCxTQUFKLEVBQWU7QUFDYkw7QUFDRDtBQUNGOztBQUVEVyxZQUFVTCxPQUFWLENBQWtCLFVBQVNQLFFBQVQsRUFBbUJLLEtBQW5CLEVBQTBCO0FBQzFDTCxhQUFTSSxJQUFULEVBQWVILElBQWYsRUFBcUJDLE9BQXJCLEVBQThCRyxLQUE5QjtBQUNELEdBRkQ7QUFHRDs7QUFFRCxTQUFTUyxVQUFULENBQW9CZCxRQUFwQixFQUE4QlMsTUFBOUIsRUFBc0NSLElBQXRDLEVBQTRDQyxPQUE1QyxFQUFxRDtBQUNuRCxNQUFJQyxRQUFRLENBQVo7O0FBRUEsV0FBU0MsSUFBVCxHQUFnQjtBQUNkRDs7QUFFQSxRQUFNRyxZQUFhSCxVQUFVTSxNQUE3Qjs7QUFFQSxRQUFJSCxTQUFKLEVBQWU7QUFDYkw7QUFDRDtBQUNGOztBQUVELE9BQUssSUFBSUksUUFBUSxDQUFqQixFQUFvQkEsUUFBUUksTUFBNUIsRUFBb0NKLE9BQXBDLEVBQTZDO0FBQzNDTCxhQUFTSSxJQUFULEVBQWVILElBQWYsRUFBcUJDLE9BQXJCLEVBQThCRyxLQUE5QjtBQUNEO0FBQ0Y7O0FBRURVLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmpCLFVBQVFBLE1BRE87QUFFZlEsV0FBU0EsT0FGTTtBQUdmSSxZQUFVQSxRQUhLO0FBSWZFLGNBQVlBLFVBSkc7QUFLZkMsY0FBWUE7QUFMRyxDQUFqQiIsImZpbGUiOiJhc3luY2hyb25vdXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5mdW5jdGlvbiB3aGlsc3QoY2FsbGJhY2ssIGRvbmUsIGNvbnRleHQpIHtcclxuICBsZXQgY291bnQgPSAtMTtcclxuXHJcbiAgZnVuY3Rpb24gbmV4dCgpIHtcclxuICAgIGNvdW50Kys7XHJcblxyXG4gICAgY29uc3QgaW5kZXggPSBjb3VudCwgIC8vL1xyXG4gICAgICAgICAgdGVybWluYXRlID0gY2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCwgaW5kZXgpO1xyXG5cclxuICAgIGlmICh0ZXJtaW5hdGUpIHtcclxuICAgICAgZG9uZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmV4dCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmb3JFYWNoKGFycmF5LCBjYWxsYmFjaywgZG9uZSwgY29udGV4dCkge1xyXG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgIC8vL1xyXG5cclxuICBsZXQgY291bnQgPSAtMTtcclxuXHJcbiAgZnVuY3Rpb24gbmV4dCgpIHtcclxuICAgIGNvdW50Kys7XHJcblxyXG4gICAgY29uc3QgdGVybWluYXRlID0gKGNvdW50ID09PSBsZW5ndGgpO1xyXG5cclxuICAgIGlmICh0ZXJtaW5hdGUpIHtcclxuICAgICAgZG9uZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgaW5kZXggPSBjb3VudCwgIC8vL1xyXG4gICAgICAgICAgICBlbGVtZW50ID0gYXJyYXlbaW5kZXhdO1xyXG5cclxuICAgICAgY2FsbGJhY2soZWxlbWVudCwgbmV4dCwgZG9uZSwgY29udGV4dCwgaW5kZXgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmV4dCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXF1ZW5jZShjYWxsYmFja3MsIGRvbmUsIGNvbnRleHQpIHtcclxuICBjb25zdCBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoOyAgLy8vXHJcblxyXG4gIGxldCBjb3VudCA9IC0xO1xyXG5cclxuICBmdW5jdGlvbiBuZXh0KCkge1xyXG4gICAgY291bnQrKztcclxuXHJcbiAgICBjb25zdCB0ZXJtaW5hdGUgPSAoY291bnQgPT09IGxlbmd0aCk7XHJcblxyXG4gICAgaWYgKHRlcm1pbmF0ZSkge1xyXG4gICAgICBkb25lKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBpbmRleCA9IGNvdW50LCAgLy8vXHJcbiAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2tzW2luZGV4XTtcclxuXHJcbiAgICAgIGNhbGxiYWNrKG5leHQsIGRvbmUsIGNvbnRleHQsIGluZGV4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5leHQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZXZlbnR1YWxseShjYWxsYmFja3MsIGRvbmUsIGNvbnRleHQpIHtcclxuICBjb25zdCBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoOyAgLy8vXHJcblxyXG4gIGxldCBjb3VudCA9IDA7XHJcblxyXG4gIGZ1bmN0aW9uIG5leHQoKSB7XHJcbiAgICBjb3VudCsrO1xyXG5cclxuICAgIGNvbnN0IHRlcm1pbmF0ZSA9IChjb3VudCA9PT0gbGVuZ3RoKTtcclxuXHJcbiAgICBpZiAodGVybWluYXRlKSB7XHJcbiAgICAgIGRvbmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrLCBpbmRleCkge1xyXG4gICAgY2FsbGJhY2sobmV4dCwgZG9uZSwgY29udGV4dCwgaW5kZXgpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXBlYXRlZGx5KGNhbGxiYWNrLCBsZW5ndGgsIGRvbmUsIGNvbnRleHQpIHtcclxuICBsZXQgY291bnQgPSAwO1xyXG5cclxuICBmdW5jdGlvbiBuZXh0KCkge1xyXG4gICAgY291bnQrKztcclxuXHJcbiAgICBjb25zdCB0ZXJtaW5hdGUgPSAoY291bnQgPT09IGxlbmd0aCk7XHJcblxyXG4gICAgaWYgKHRlcm1pbmF0ZSkge1xyXG4gICAgICBkb25lKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICBjYWxsYmFjayhuZXh0LCBkb25lLCBjb250ZXh0LCBpbmRleCk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICB3aGlsc3Q6IHdoaWxzdCxcclxuICBmb3JFYWNoOiBmb3JFYWNoLFxyXG4gIHNlcXVlbmNlOiBzZXF1ZW5jZSxcclxuICBldmVudHVhbGx5OiBldmVudHVhbGx5LFxyXG4gIHJlcGVhdGVkbHk6IHJlcGVhdGVkbHlcclxufTtcclxuIl19