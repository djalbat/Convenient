"use strict";

export function first(array) {
  return array[0];
}
export function second(array) {
  return array[1];
}
export function third(array) {
  return array[2];
}
export function fourth(array) {
  return array[3];
}
export function fifth(array) {
  return array[4];
}
export function fifthLast(array) {
  return array[array.length - 5];
}
export function fourthLast(array) {
  return array[array.length - 4];
}
export function thirdLast(array) {
  return array[array.length - 3];
}
export function secondLast(array) {
  return array[array.length - 2];
}
export function last(array) {
  return array[array.length - 1];
}
export function head(array) {
  return array.slice(0, 1);
}
export function tail(array) {
  return array.slice(1);
}
export function push(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}
export function unshift(array1, array2) {
  Array.prototype.unshift.apply(array1, array2);
}
export function concat(array1, elementOrArray2) {
  const array2 = elementOrArray2 instanceof Array ? elementOrArray2 : [elementOrArray2];
  push(array1, array2);
}
export function clear(array) {
  const start = 0;
  return array.splice(start);
}
export function copy(array1, array2) {
  const start = 0,
        deleteCount = array2.length; ///

  splice(array1, start, deleteCount, array2);
}
export function merge(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}
export function splice(array1, start, deleteCount = Infinity, array2 = []) {
  const args = [start, deleteCount, ...array2],
        deletedItemsArray = Array.prototype.splice.apply(array1, args);
  return deletedItemsArray;
}
export function replace(array, element, test) {
  let start;
  const found = array.some((element, index) => {
    const passed = test(element, index);

    if (passed) {
      start = index; ///

      return true;
    }
  });

  if (found) {
    const deleteCount = 1;
    array.splice(start, deleteCount, element);
  }

  return found;
}
export function filter(array, test) {
  const filteredElements = [];
  backwardsForEach(array, (element, index) => {
    const passed = test(element, index);

    if (!passed) {
      const start = index,
            ///
      deleteCount = 1,
            deletedElements = array.splice(start, deleteCount),
            firstDeletedElement = first(deletedElements);
      filteredElements.unshift(firstDeletedElement); ///
    }
  });
  return filteredElements;
}
export function find(array, test) {
  const elements = [];
  forwardsForEach(array, (element, index) => {
    const passed = test(element, index);

    if (passed) {
      elements.push(element);
    }
  });
  return elements;
}
export function prune(array, test) {
  let prunedElement = undefined;
  array.some((element, index) => {
    const passed = test(element, index);

    if (!passed) {
      const start = index,
            ///
      deleteCount = 1,
            deletedElements = array.splice(start, deleteCount),
            firstDeletedElement = first(deletedElements);
      prunedElement = firstDeletedElement; ///

      return true;
    }
  });
  return prunedElement;
}
export function patch(array, element, test) {
  const found = array.some((element, index) => {
    const passed = test(element, index);

    if (passed) {
      return true;
    }
  });

  if (found) {
    array.push(element);
  }

  return found;
}
export function augment(array1, array2, test) {
  array2.forEach((element, index) => {
    const passed = test(element, index);

    if (passed) {
      array1.push(element);
    }
  });
}
export function separate(array, array1, array2, test) {
  array.forEach((element, index) => {
    const passed = test(element, index);
    passed ? array1.push(element) : array2.push(element);
  });
}
export function forwardsSome(array, callback) {
  const arrayLength = array.length;

  for (let index = 0; index < arrayLength; index++) {
    const element = array[index],
          result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}
export function backwardsSome(array, callback) {
  const arrayLength = array.length;

  for (let index = arrayLength - 1; index >= 0; index--) {
    const element = array[index],
          result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}
export function forwardsEvery(array, callback) {
  const arrayLength = array.length;

  for (let index = 0; index < arrayLength; index++) {
    const element = array[index],
          result = callback(element, index);

    if (!result) {
      return false;
    }
  }

  return true;
}
export function backwardsEvery(array, callback) {
  const arrayLength = array.length;

  for (let index = arrayLength - 1; index >= 0; index--) {
    const element = array[index],
          result = callback(element, index);

    if (!result) {
      return false;
    }
  }

  return true;
}
export function forwardsReduce(array, callback, initialValue) {
  let value = initialValue;
  forwardsForEach(array, (element, index) => {
    value = callback(value, element, index);
  });
  return value;
}
export function backwardsReduce(array, callback, initialValue) {
  let value = initialValue;
  backwardsForEach(array, (element, index) => {
    value = callback(value, element, index);
  });
  return value;
}
export function forwardsForEach(array, callback) {
  const arrayLength = array.length;

  for (let index = 0; index < arrayLength; index++) {
    const element = array[index];
    callback(element, index);
  }
}
export function backwardsForEach(array, callback) {
  const arrayLength = array.length;

  for (let index = arrayLength - 1; index >= 0; index--) {
    const element = array[index];
    callback(element, index);
  }
}
export default {
  first,
  second,
  third,
  fourth,
  fifth,
  fifthLast,
  fourthLast,
  thirdLast,
  secondLast,
  last,
  head,
  tail,
  push,
  unshift,
  concat,
  clear,
  copy,
  merge,
  splice,
  replace,
  filter,
  find,
  prune,
  patch,
  augment,
  separate,
  forwardsSome,
  backwardsSome,
  forwardsEvery,
  backwardsEvery,
  forwardsReduce,
  backwardsReduce,
  forwardsForEach,
  backwardsForEach
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIl0sIm5hbWVzIjpbImZpcnN0IiwiYXJyYXkiLCJzZWNvbmQiLCJ0aGlyZCIsImZvdXJ0aCIsImZpZnRoIiwiZmlmdGhMYXN0IiwibGVuZ3RoIiwiZm91cnRoTGFzdCIsInRoaXJkTGFzdCIsInNlY29uZExhc3QiLCJsYXN0IiwiaGVhZCIsInNsaWNlIiwidGFpbCIsInB1c2giLCJhcnJheTEiLCJhcnJheTIiLCJBcnJheSIsInByb3RvdHlwZSIsImFwcGx5IiwidW5zaGlmdCIsImNvbmNhdCIsImVsZW1lbnRPckFycmF5MiIsImNsZWFyIiwic3RhcnQiLCJzcGxpY2UiLCJjb3B5IiwiZGVsZXRlQ291bnQiLCJtZXJnZSIsIkluZmluaXR5IiwiYXJncyIsImRlbGV0ZWRJdGVtc0FycmF5IiwicmVwbGFjZSIsImVsZW1lbnQiLCJ0ZXN0IiwiZm91bmQiLCJzb21lIiwiaW5kZXgiLCJwYXNzZWQiLCJmaWx0ZXIiLCJmaWx0ZXJlZEVsZW1lbnRzIiwiYmFja3dhcmRzRm9yRWFjaCIsImRlbGV0ZWRFbGVtZW50cyIsImZpcnN0RGVsZXRlZEVsZW1lbnQiLCJmaW5kIiwiZWxlbWVudHMiLCJmb3J3YXJkc0ZvckVhY2giLCJwcnVuZSIsInBydW5lZEVsZW1lbnQiLCJ1bmRlZmluZWQiLCJwYXRjaCIsImF1Z21lbnQiLCJmb3JFYWNoIiwic2VwYXJhdGUiLCJmb3J3YXJkc1NvbWUiLCJjYWxsYmFjayIsImFycmF5TGVuZ3RoIiwicmVzdWx0IiwiYmFja3dhcmRzU29tZSIsImZvcndhcmRzRXZlcnkiLCJiYWNrd2FyZHNFdmVyeSIsImZvcndhcmRzUmVkdWNlIiwiaW5pdGlhbFZhbHVlIiwidmFsdWUiLCJiYWNrd2FyZHNSZWR1Y2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE9BQU8sU0FBU0EsS0FBVCxDQUFlQyxLQUFmLEVBQXNCO0FBQUUsU0FBT0EsS0FBSyxDQUFDLENBQUQsQ0FBWjtBQUFpQjtBQUVoRCxPQUFPLFNBQVNDLE1BQVQsQ0FBZ0JE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WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0KGFycmF5KSB7IHJldHVybiBhcnJheVswXTt9XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWNvbmQoYXJyYXkpIHsgcmV0dXJuIGFycmF5WzFdOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiB0aGlyZChhcnJheSkgeyByZXR1cm4gYXJyYXlbMl07IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvdXJ0aChhcnJheSkgeyByZXR1cm4gYXJyYXlbM107IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpZnRoKGFycmF5KSB7IHJldHVybiBhcnJheVs0XTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gZmlmdGhMYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSA1XTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gZm91cnRoTGFzdChhcnJheSkgeyByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gNF07IH1cblxuZXhwb3J0IGZ1bmN0aW9uIHRoaXJkTGFzdChhcnJheSkgeyByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gM107IH1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlY29uZExhc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDJdOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gaGVhZChhcnJheSkgeyByZXR1cm4gYXJyYXkuc2xpY2UoMCwgMSk7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHsgcmV0dXJuIGFycmF5LnNsaWNlKDEpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXNoKGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zaGlmdChhcnJheTEsIGFycmF5MikgeyBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShhcnJheTEsIGFycmF5Mik7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdChhcnJheTEsIGVsZW1lbnRPckFycmF5Mikge1xuICBjb25zdCBhcnJheTIgPSAoZWxlbWVudE9yQXJyYXkyIGluc3RhbmNlb2YgQXJyYXkpID9cbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudE9yQXJyYXkyIDpcbiAgICAgICAgICAgICAgICAgICAgIFtlbGVtZW50T3JBcnJheTJdO1xuICBcbiAgcHVzaChhcnJheTEsIGFycmF5Mik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhcihhcnJheSkge1xuICBjb25zdCBzdGFydCA9IDA7XG4gIFxuICByZXR1cm4gYXJyYXkuc3BsaWNlKHN0YXJ0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoYXJyYXkxLCBhcnJheTIpIHtcbiAgY29uc3Qgc3RhcnQgPSAwLFxuICAgICAgICBkZWxldGVDb3VudCA9IGFycmF5Mi5sZW5ndGg7ICAvLy9cbiAgXG4gIHNwbGljZShhcnJheTEsIHN0YXJ0LCBkZWxldGVDb3VudCwgYXJyYXkyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaWNlKGFycmF5MSwgc3RhcnQsIGRlbGV0ZUNvdW50ID0gSW5maW5pdHksIGFycmF5MiA9IFtdKSB7XG4gIGNvbnN0IGFyZ3MgPSBbc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5hcnJheTJdLFxuICAgICAgICBkZWxldGVkSXRlbXNBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoYXJyYXkxLCBhcmdzKTtcblxuICByZXR1cm4gZGVsZXRlZEl0ZW1zQXJyYXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlKGFycmF5LCBlbGVtZW50LCB0ZXN0KSB7XG4gIGxldCBzdGFydDtcbiAgXG4gIGNvbnN0IGZvdW5kID0gYXJyYXkuc29tZSgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIHN0YXJ0ID0gaW5kZXg7ICAvLy9cbiAgICAgIFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgXG4gIGlmIChmb3VuZCkge1xuICAgIGNvbnN0IGRlbGV0ZUNvdW50ID0gMTtcblxuICAgIGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIGVsZW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGZvdW5kO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKGFycmF5LCB0ZXN0KSB7XG4gIGNvbnN0IGZpbHRlcmVkRWxlbWVudHMgPSBbXTtcbiAgXG4gIGJhY2t3YXJkc0ZvckVhY2goYXJyYXksIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKCFwYXNzZWQpIHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gaW5kZXgsICAvLy9cbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMSxcbiAgICAgICAgICAgIGRlbGV0ZWRFbGVtZW50cyA9IGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpLFxuICAgICAgICAgICAgZmlyc3REZWxldGVkRWxlbWVudCA9IGZpcnN0KGRlbGV0ZWRFbGVtZW50cyk7XG4gICAgICBcbiAgICAgIGZpbHRlcmVkRWxlbWVudHMudW5zaGlmdChmaXJzdERlbGV0ZWRFbGVtZW50KTsgIC8vL1xuICAgIH1cbiAgfSk7XG4gIFxuICByZXR1cm4gZmlsdGVyZWRFbGVtZW50cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmQoYXJyYXksIHRlc3QpIHtcbiAgY29uc3QgZWxlbWVudHMgPSBbXTtcblxuICBmb3J3YXJkc0ZvckVhY2goYXJyYXksIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHBhc3NlZCkge1xuICAgICAgZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlbGVtZW50cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBydW5lKGFycmF5LCB0ZXN0KSB7XG4gIGxldCBwcnVuZWRFbGVtZW50ID0gdW5kZWZpbmVkO1xuICBcbiAgYXJyYXkuc29tZSgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcGFzc2VkKSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IDEsXG4gICAgICAgICAgICBkZWxldGVkRWxlbWVudHMgPSBhcnJheS5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KSxcbiAgICAgICAgICAgIGZpcnN0RGVsZXRlZEVsZW1lbnQgPSBmaXJzdChkZWxldGVkRWxlbWVudHMpO1xuICAgICAgXG4gICAgICBwcnVuZWRFbGVtZW50ID0gZmlyc3REZWxldGVkRWxlbWVudDsgIC8vL1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICBcbiAgcmV0dXJuIHBydW5lZEVsZW1lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRjaChhcnJheSwgZWxlbWVudCwgdGVzdCkge1xuICBjb25zdCBmb3VuZCA9IGFycmF5LnNvbWUoKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG5cbiAgaWYgKGZvdW5kKSB7XG4gICAgYXJyYXkucHVzaChlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBmb3VuZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF1Z21lbnQoYXJyYXkxLCBhcnJheTIsIHRlc3QpIHtcbiAgYXJyYXkyLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICBhcnJheTEucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VwYXJhdGUoYXJyYXksIGFycmF5MSwgYXJyYXkyLCB0ZXN0KSB7XG4gIGFycmF5LmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBwYXNzZWQgP1xuICAgICAgYXJyYXkxLnB1c2goZWxlbWVudCkgOlxuICAgICAgICBhcnJheTIucHVzaChlbGVtZW50KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkc1NvbWUoYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuICAgIFxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhY2t3YXJkc1NvbWUoYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gYXJyYXlMZW5ndGggLSAxOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkc0V2ZXJ5KGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlMZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiYWNrd2FyZHNFdmVyeShhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaW5kZXggPSBhcnJheUxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkc1JlZHVjZShhcnJheSwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSkge1xuICBsZXQgdmFsdWUgPSBpbml0aWFsVmFsdWU7XG5cbiAgZm9yd2FyZHNGb3JFYWNoKGFycmF5LCAoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICB2YWx1ZSA9IGNhbGxiYWNrKHZhbHVlLCBlbGVtZW50LCBpbmRleCk7XG4gIH0pO1xuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhY2t3YXJkc1JlZHVjZShhcnJheSwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSkge1xuICBsZXQgdmFsdWUgPSBpbml0aWFsVmFsdWU7XG5cbiAgYmFja3dhcmRzRm9yRWFjaChhcnJheSwgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgdmFsdWUgPSBjYWxsYmFjayh2YWx1ZSwgZWxlbWVudCwgaW5kZXgpO1xuICB9KTtcblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkc0ZvckVhY2goYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF07XG5cbiAgICBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhY2t3YXJkc0ZvckVhY2goYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gYXJyYXlMZW5ndGggLSAxOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFycmF5W2luZGV4XTtcblxuICAgIGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGZpcnN0LFxuICBzZWNvbmQsXG4gIHRoaXJkLFxuICBmb3VydGgsXG4gIGZpZnRoLFxuICBmaWZ0aExhc3QsXG4gIGZvdXJ0aExhc3QsXG4gIHRoaXJkTGFzdCxcbiAgc2Vjb25kTGFzdCxcbiAgbGFzdCxcbiAgaGVhZCxcbiAgdGFpbCxcbiAgcHVzaCxcbiAgdW5zaGlmdCxcbiAgY29uY2F0LFxuICBjbGVhcixcbiAgY29weSxcbiAgbWVyZ2UsXG4gIHNwbGljZSxcbiAgcmVwbGFjZSxcbiAgZmlsdGVyLFxuICBmaW5kLFxuICBwcnVuZSxcbiAgcGF0Y2gsXG4gIGF1Z21lbnQsXG4gIHNlcGFyYXRlLFxuICBmb3J3YXJkc1NvbWUsXG4gIGJhY2t3YXJkc1NvbWUsXG4gIGZvcndhcmRzRXZlcnksXG4gIGJhY2t3YXJkc0V2ZXJ5LFxuICBmb3J3YXJkc1JlZHVjZSxcbiAgYmFja3dhcmRzUmVkdWNlLFxuICBmb3J3YXJkc0ZvckVhY2gsXG4gIGJhY2t3YXJkc0ZvckVhY2hcbn07XG4iXX0=