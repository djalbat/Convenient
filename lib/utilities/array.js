"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.first = first;
exports.second = second;
exports.third = third;
exports.fourth = fourth;
exports.fifth = fifth;
exports.fifthLast = fifthLast;
exports.fourthLast = fourthLast;
exports.thirdLast = thirdLast;
exports.secondLast = secondLast;
exports.last = last;
exports.tail = tail;
exports.push = push;
exports.unshift = unshift;
exports.concat = concat;
exports.clear = clear;
exports.copy = copy;
exports.merge = merge;
exports.splice = splice;
exports.replace = replace;
exports.filter = filter;
exports.find = find;
exports.prune = prune;
exports.patch = patch;
exports.augment = augment;
exports.separate = separate;
exports.forwardsSome = forwardsSome;
exports.backwardsSome = backwardsSome;
exports.forwardsEvery = forwardsEvery;
exports.backwardsEvery = backwardsEvery;
exports.forwardsReduce = forwardsReduce;
exports.backwardsReduce = backwardsReduce;
exports.forwardsForEach = forwardsForEach;
exports.backwardsForEach = backwardsForEach;
exports["default"] = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function first(array) {
  return array[0];
}

function second(array) {
  return array[1];
}

function third(array) {
  return array[2];
}

function fourth(array) {
  return array[3];
}

function fifth(array) {
  return array[4];
}

function fifthLast(array) {
  return array[array.length - 5];
}

function fourthLast(array) {
  return array[array.length - 4];
}

function thirdLast(array) {
  return array[array.length - 3];
}

function secondLast(array) {
  return array[array.length - 2];
}

function last(array) {
  return array[array.length - 1];
}

function tail(array) {
  return array.slice(1);
}

function push(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}

function unshift(array1, array2) {
  Array.prototype.unshift.apply(array1, array2);
}

function concat(array1, elementOrArray2) {
  var array2 = elementOrArray2 instanceof Array ? elementOrArray2 : [elementOrArray2];
  push(array1, array2);
}

function clear(array) {
  var start = 0;
  return array.splice(start);
}

function copy(array1, array2) {
  var start = 0,
      deleteCount = array2.length; ///

  splice(array1, start, deleteCount, array2);
}

function merge(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}

function splice(array1, start) {
  var deleteCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
  var array2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var args = [start, deleteCount].concat(_toConsumableArray(array2)),
      deletedItemsArray = Array.prototype.splice.apply(array1, args);
  return deletedItemsArray;
}

function replace(array, element, test) {
  var start = -1;
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      start = index; ///

      return true;
    }
  });

  if (found) {
    var deleteCount = 1;
    array.splice(start, deleteCount, element);
  }

  return found;
}

function filter(array, test) {
  var filteredElements = [];
  backwardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (!passed) {
      var start = index,
          ///
      deleteCount = 1,
          deletedElements = array.splice(start, deleteCount),
          firstDeletedElement = first(deletedElements);
      filteredElements.unshift(firstDeletedElement); ///
    }
  });
  return filteredElements;
}

function find(array, test) {
  var elements = [];
  forwardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (passed) {
      elements.push(element);
    }
  });
  return elements;
}

function prune(array, test) {
  var prunedElement = undefined;
  array.some(function (element, index) {
    var passed = test(element, index);

    if (!passed) {
      var start = index,
          ///
      deleteCount = 1,
          deletedElements = array.splice(start, deleteCount),
          firstDeletedElement = first(deletedElements);
      prunedElement = firstDeletedElement; ///

      return true;
    }
  });
  return prunedElement;
}

function patch(array, element, test) {
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      return true;
    }
  });

  if (found) {
    array.push(element);
  }

  return found;
}

function augment(array1, array2, test) {
  array2.forEach(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      array1.push(element);
    }
  });
}

function separate(array, array1, array2, test) {
  array.forEach(function (element, index) {
    var passed = test(element, index);
    passed ? array1.push(element) : array2.push(element);
  });
}

function forwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function backwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function forwardsEvery(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index],
        result = callback(element, index);

    if (!result) {
      return false;
    }
  }

  return true;
}

function backwardsEvery(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index],
        result = callback(element, index);

    if (!result) {
      return false;
    }
  }

  return true;
}

function forwardsReduce(array, callback, initialValue) {
  var value = initialValue;
  forwardsForEach(array, function (element, index) {
    value = callback(value, element, index);
  });
  return value;
}

function backwardsReduce(array, callback, initialValue) {
  var value = initialValue;
  backwardsForEach(array, function (element, index) {
    value = callback(value, element, index);
  });
  return value;
}

function forwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index];
    callback(element, index);
  }
}

function backwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index];
    callback(element, index);
  }
}

var _default = {
  first: first,
  second: second,
  third: third,
  fourth: fourth,
  fifth: fifth,
  fifthLast: fifthLast,
  fourthLast: fourthLast,
  thirdLast: thirdLast,
  secondLast: secondLast,
  last: last,
  tail: tail,
  push: push,
  unshift: unshift,
  concat: concat,
  clear: clear,
  copy: copy,
  merge: merge,
  splice: splice,
  replace: replace,
  filter: filter,
  find: find,
  prune: prune,
  patch: patch,
  augment: augment,
  separate: separate,
  forwardsSome: forwardsSome,
  backwardsSome: backwardsSome,
  forwardsEvery: forwardsEvery,
  backwardsEvery: backwardsEvery,
  forwardsReduce: forwardsReduce,
  backwardsReduce: backwardsReduce,
  forwardsForEach: forwardsForEach,
  backwardsForEach: backwardsForEach
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIl0sIm5hbWVzIjpbImZpcnN0IiwiYXJyYXkiLCJzZWNvbmQiLCJ0aGlyZCIsImZvdXJ0aCIsImZpZnRoIiwiZmlmdGhMYXN0IiwibGVuZ3RoIiwiZm91cnRoTGFzdCIsInRoaXJkTGFzdCIsInNlY29uZExhc3QiLCJsYXN0IiwidGFpbCIsInNsaWNlIiwicHVzaCIsImFycmF5MSIsImFycmF5MiIsIkFycmF5IiwicHJvdG90eXBlIiwiYXBwbHkiLCJ1bnNoaWZ0IiwiY29uY2F0IiwiZWxlbWVudE9yQXJyYXkyIiwiY2xlYXIiLCJzdGFydCIsInNwbGljZSIsImNvcHkiLCJkZWxldGVDb3VudCIsIm1lcmdlIiwiSW5maW5pdHkiLCJhcmdzIiwiZGVsZXRlZEl0ZW1zQXJyYXkiLCJyZXBsYWNlIiwiZWxlbWVudCIsInRlc3QiLCJmb3VuZCIsInNvbWUiLCJpbmRleCIsInBhc3NlZCIsImZpbHRlciIsImZpbHRlcmVkRWxlbWVudHMiLCJiYWNrd2FyZHNGb3JFYWNoIiwiZGVsZXRlZEVsZW1lbnRzIiwiZmlyc3REZWxldGVkRWxlbWVudCIsImZpbmQiLCJlbGVtZW50cyIsImZvcndhcmRzRm9yRWFjaCIsInBydW5lIiwicHJ1bmVkRWxlbWVudCIsInVuZGVmaW5lZCIsInBhdGNoIiwiYXVnbWVudCIsImZvckVhY2giLCJzZXBhcmF0ZSIsImZvcndhcmRzU29tZSIsImNhbGxiYWNrIiwiYXJyYXlMZW5ndGgiLCJyZXN1bHQiLCJiYWNrd2FyZHNTb21lIiwiZm9yd2FyZHNFdmVyeSIsImJhY2t3YXJkc0V2ZXJ5IiwiZm9yd2FyZHNSZWR1Y2UiLCJpbml0aWFsVmFsdWUiLCJ2YWx1ZSIsImJhY2t3YXJkc1JlZHVjZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVPLFNBQVNBLEtBQVQsQ0FBZUMsS0FBZixFQUFzQjtBQUFFLFNBQU9BLEtBQUssQ0FBQyxDQUFELENBQVo7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RUFBQUEsY0FBYyxFQUFkQSxjQTdCYTtBQThCYkMsRUFBQUEsY0FBYyxFQUFkQSxjQTlCYTtBQStCYkcsRUFBQUEsZUFBZSxFQUFmQSxlQS9CYTtBQWdDYmxCLEVBQUFBLGVBQWUsRUFBZkEsZUFoQ2E7QUFpQ2JMLEVBQUFBLGdCQUFnQixFQUFoQkE7QUFqQ2EsQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZmlyc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5WzBdO31cblxuZXhwb3J0IGZ1bmN0aW9uIHNlY29uZChhcnJheSkgeyByZXR1cm4gYXJyYXlbMV07IH1cblxuZXhwb3J0IGZ1bmN0aW9uIHRoaXJkKGFycmF5KSB7IHJldHVybiBhcnJheVsyXTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gZm91cnRoKGFycmF5KSB7IHJldHVybiBhcnJheVszXTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gZmlmdGgoYXJyYXkpIHsgcmV0dXJuIGFycmF5WzRdOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWZ0aExhc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDVdOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3VydGhMYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSA0XTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gdGhpcmRMYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAzXTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gc2Vjb25kTGFzdChhcnJheSkgeyByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMl07IH1cblxuZXhwb3J0IGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWlsKGFycmF5KSB7IHJldHVybiBhcnJheS5zbGljZSgxKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gcHVzaChhcnJheTEsIGFycmF5MikgeyBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShhcnJheTEsIGFycmF5Mik7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuc2hpZnQoYXJyYXkxLCBhcnJheTIpIHsgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoYXJyYXkxLCBhcnJheTIpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoYXJyYXkxLCBlbGVtZW50T3JBcnJheTIpIHtcbiAgY29uc3QgYXJyYXkyID0gKGVsZW1lbnRPckFycmF5MiBpbnN0YW5jZW9mIEFycmF5KSA/XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRPckFycmF5MiA6XG4gICAgICAgICAgICAgICAgICAgICBbZWxlbWVudE9yQXJyYXkyXTtcbiAgXG4gIHB1c2goYXJyYXkxLCBhcnJheTIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXIoYXJyYXkpIHtcbiAgY29uc3Qgc3RhcnQgPSAwO1xuICBcbiAgcmV0dXJuIGFycmF5LnNwbGljZShzdGFydCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KGFycmF5MSwgYXJyYXkyKSB7XG4gIGNvbnN0IHN0YXJ0ID0gMCxcbiAgICAgICAgZGVsZXRlQ291bnQgPSBhcnJheTIubGVuZ3RoOyAgLy8vXG4gIFxuICBzcGxpY2UoYXJyYXkxLCBzdGFydCwgZGVsZXRlQ291bnQsIGFycmF5Mik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZShhcnJheTEsIGFycmF5MikgeyBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShhcnJheTEsIGFycmF5Mik7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGljZShhcnJheTEsIHN0YXJ0LCBkZWxldGVDb3VudCA9IEluZmluaXR5LCBhcnJheTIgPSBbXSkge1xuICBjb25zdCBhcmdzID0gW3N0YXJ0LCBkZWxldGVDb3VudCwgLi4uYXJyYXkyXSxcbiAgICAgICAgZGVsZXRlZEl0ZW1zQXJyYXkgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KGFycmF5MSwgYXJncyk7XG5cbiAgcmV0dXJuIGRlbGV0ZWRJdGVtc0FycmF5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZShhcnJheSwgZWxlbWVudCwgdGVzdCkge1xuICBsZXQgc3RhcnQgPSAtMTtcbiAgXG4gIGNvbnN0IGZvdW5kID0gYXJyYXkuc29tZSgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIHN0YXJ0ID0gaW5kZXg7ICAvLy9cbiAgICAgIFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgXG4gIGlmIChmb3VuZCkge1xuICAgIGNvbnN0IGRlbGV0ZUNvdW50ID0gMTtcblxuICAgIGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIGVsZW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGZvdW5kO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKGFycmF5LCB0ZXN0KSB7XG4gIGNvbnN0IGZpbHRlcmVkRWxlbWVudHMgPSBbXTtcbiAgXG4gIGJhY2t3YXJkc0ZvckVhY2goYXJyYXksIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKCFwYXNzZWQpIHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gaW5kZXgsICAvLy9cbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMSxcbiAgICAgICAgICAgIGRlbGV0ZWRFbGVtZW50cyA9IGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpLFxuICAgICAgICAgICAgZmlyc3REZWxldGVkRWxlbWVudCA9IGZpcnN0KGRlbGV0ZWRFbGVtZW50cyk7XG4gICAgICBcbiAgICAgIGZpbHRlcmVkRWxlbWVudHMudW5zaGlmdChmaXJzdERlbGV0ZWRFbGVtZW50KTsgIC8vL1xuICAgIH1cbiAgfSk7XG4gIFxuICByZXR1cm4gZmlsdGVyZWRFbGVtZW50cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmQoYXJyYXksIHRlc3QpIHtcbiAgY29uc3QgZWxlbWVudHMgPSBbXTtcblxuICBmb3J3YXJkc0ZvckVhY2goYXJyYXksIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHBhc3NlZCkge1xuICAgICAgZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlbGVtZW50cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBydW5lKGFycmF5LCB0ZXN0KSB7XG4gIGxldCBwcnVuZWRFbGVtZW50ID0gdW5kZWZpbmVkO1xuICBcbiAgYXJyYXkuc29tZSgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcGFzc2VkKSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IDEsXG4gICAgICAgICAgICBkZWxldGVkRWxlbWVudHMgPSBhcnJheS5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KSxcbiAgICAgICAgICAgIGZpcnN0RGVsZXRlZEVsZW1lbnQgPSBmaXJzdChkZWxldGVkRWxlbWVudHMpO1xuICAgICAgXG4gICAgICBwcnVuZWRFbGVtZW50ID0gZmlyc3REZWxldGVkRWxlbWVudDsgIC8vL1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICBcbiAgcmV0dXJuIHBydW5lZEVsZW1lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRjaChhcnJheSwgZWxlbWVudCwgdGVzdCkge1xuICBjb25zdCBmb3VuZCA9IGFycmF5LnNvbWUoKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG5cbiAgaWYgKGZvdW5kKSB7XG4gICAgYXJyYXkucHVzaChlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBmb3VuZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF1Z21lbnQoYXJyYXkxLCBhcnJheTIsIHRlc3QpIHtcbiAgYXJyYXkyLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICBhcnJheTEucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VwYXJhdGUoYXJyYXksIGFycmF5MSwgYXJyYXkyLCB0ZXN0KSB7XG4gIGFycmF5LmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBwYXNzZWQgP1xuICAgICAgYXJyYXkxLnB1c2goZWxlbWVudCkgOlxuICAgICAgICBhcnJheTIucHVzaChlbGVtZW50KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkc1NvbWUoYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuICAgIFxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhY2t3YXJkc1NvbWUoYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gYXJyYXlMZW5ndGggLSAxOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkc0V2ZXJ5KGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlMZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiYWNrd2FyZHNFdmVyeShhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaW5kZXggPSBhcnJheUxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkc1JlZHVjZShhcnJheSwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSkge1xuICBsZXQgdmFsdWUgPSBpbml0aWFsVmFsdWU7XG5cbiAgZm9yd2FyZHNGb3JFYWNoKGFycmF5LCAoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICB2YWx1ZSA9IGNhbGxiYWNrKHZhbHVlLCBlbGVtZW50LCBpbmRleCk7XG4gIH0pO1xuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhY2t3YXJkc1JlZHVjZShhcnJheSwgY2FsbGJhY2ssIGluaXRpYWxWYWx1ZSkge1xuICBsZXQgdmFsdWUgPSBpbml0aWFsVmFsdWU7XG5cbiAgYmFja3dhcmRzRm9yRWFjaChhcnJheSwgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgdmFsdWUgPSBjYWxsYmFjayh2YWx1ZSwgZWxlbWVudCwgaW5kZXgpO1xuICB9KTtcblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkc0ZvckVhY2goYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF07XG5cbiAgICBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhY2t3YXJkc0ZvckVhY2goYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gYXJyYXlMZW5ndGggLSAxOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFycmF5W2luZGV4XTtcblxuICAgIGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGZpcnN0LFxuICBzZWNvbmQsXG4gIHRoaXJkLFxuICBmb3VydGgsXG4gIGZpZnRoLFxuICBmaWZ0aExhc3QsXG4gIGZvdXJ0aExhc3QsXG4gIHRoaXJkTGFzdCxcbiAgc2Vjb25kTGFzdCxcbiAgbGFzdCxcbiAgdGFpbCxcbiAgcHVzaCxcbiAgdW5zaGlmdCxcbiAgY29uY2F0LFxuICBjbGVhcixcbiAgY29weSxcbiAgbWVyZ2UsXG4gIHNwbGljZSxcbiAgcmVwbGFjZSxcbiAgZmlsdGVyLFxuICBmaW5kLFxuICBwcnVuZSxcbiAgcGF0Y2gsXG4gIGF1Z21lbnQsXG4gIHNlcGFyYXRlLFxuICBmb3J3YXJkc1NvbWUsXG4gIGJhY2t3YXJkc1NvbWUsXG4gIGZvcndhcmRzRXZlcnksXG4gIGJhY2t3YXJkc0V2ZXJ5LFxuICBmb3J3YXJkc1JlZHVjZSxcbiAgYmFja3dhcmRzUmVkdWNlLFxuICBmb3J3YXJkc0ZvckVhY2gsXG4gIGJhY2t3YXJkc0ZvckVhY2hcbn07XG4iXX0=