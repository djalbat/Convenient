'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function first(array) {
  return array[0];
}

function second(array) {
  return array[1];
}

function third(array) {
  return array[2];
}

function fourth(array) {
  return array[3];
}

function fifth(array) {
  return array[4];
}

function fifthLast(array) {
  return array[array.length - 5];
}

function fourthLast(array) {
  return array[array.length - 4];
}

function thirdLast(array) {
  return array[array.length - 3];
}

function secondLast(array) {
  return array[array.length - 2];
}

function last(array) {
  return array[array.length - 1];
}

function tail(array) {
  return array.slice(1);
}

function push(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}

function unshift(array1, array2) {
  Array.prototype.unshift.apply(array1, array2);
}

function clear(array) {
  var start = 0;

  return array.splice(start);
}

function copy(array1, array2) {
  var start = 0,
      deleteCount = array2.length; ///

  splice(array1, start, deleteCount, array2);
}

function merge(array1, array2) {
  var start = array2.length,
      ///
  deleteCount = 0;

  splice(array1, start, deleteCount, array2);
}

function splice(array1, start, deleteCount) {
  var array2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  var args = [start, deleteCount].concat(_toConsumableArray(array2)),
      deletedItemsArray = Array.prototype.splice.apply(array1, args);

  return deletedItemsArray;
}

function replace(array, element, test) {
  var start = -1;

  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      start = index; ///

      return true;
    }
  });

  if (found) {
    var deleteCount = 1;

    array.splice(start, deleteCount, element);
  }

  return found;
}

function filter(array, test) {
  backwardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (!passed) {
      var start = index,
          ///
      deleteCount = 1;

      array.splice(start, deleteCount);
    }
  });
}

function transfer(array1, array2, test) {
  backwardsForEach(array1, function (element, index) {
    var passed = test(element, index);

    if (passed) {
      var start = index,
          ///
      deleteCount = 1;

      array1.splice(start, deleteCount);

      array2.push(element);
    }
  });
}

function find(array, test) {
  var elements = [];

  forwardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (passed) {
      elements.push(element);
    }
  });

  return elements;
}

function prune(array, test) {
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      var start = index,
          ///
      deleteCount = 1;

      array.splice(start, deleteCount);

      return true;
    }
  });

  return found;
}

function patch(array, element, test) {
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      return true;
    }
  });

  if (found) {
    array.push(element);
  }

  return found;
}

function augment(array1, array2, test) {
  array2.forEach(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      array1.push(element);
    }
  });
}

function separate(array, array1, array2, test) {
  array.forEach(function (element, index) {
    var passed = test(element, index);

    passed ? array1.push(element) : array2.push(element);
  });
}

function forwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function backwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function forwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index];

    callback(element, index);
  }
}

function backwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index];

    callback(element, index);
  }
}

module.exports = {
  first: first,
  second: second,
  third: third,
  fourth: fourth,
  fifth: fifth,
  fifthLast: fifthLast,
  fourthLast: fourthLast,
  thirdLast: thirdLast,
  secondLast: secondLast,
  last: last,
  tail: tail,
  push: push,
  unshift: unshift,
  clear: clear,
  copy: copy,
  merge: merge,
  splice: splice,
  replace: replace,
  filter: filter,
  transfer: transfer,
  find: find,
  prune: prune,
  patch: patch,
  augment: augment,
  separate: separate,
  forwardsSome: forwardsSome,
  backwardsSome: backwardsSome,
  forwardsForEach: forwardsForEach,
  backwardsForEach: backwardsForEach
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvYXJyYXkuanMiXSwibmFtZXMiOlsiZmlyc3QiLCJhcnJheSIsInNlY29uZCIsInRoaXJkIiwiZm91cnRoIiwiZmlmdGgiLCJmaWZ0aExhc3QiLCJsZW5ndGgiLCJmb3VydGhMYXN0IiwidGhpcmRMYXN0Iiwic2Vjb25kTGFzdCIsImxhc3QiLCJ0YWlsIiwic2xpY2UiLCJwdXNoIiwiYXJyYXkxIiwiYXJyYXkyIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJhcHBseSIsInVuc2hpZnQiLCJjbGVhciIsInN0YXJ0Iiwic3BsaWNlIiwiY29weSIsImRlbGV0ZUNvdW50IiwibWVyZ2UiLCJhcmdzIiwiZGVsZXRlZEl0ZW1zQXJyYXkiLCJyZXBsYWNlIiwiZWxlbWVudCIsInRlc3QiLCJmb3VuZCIsInNvbWUiLCJpbmRleCIsInBhc3NlZCIsImZpbHRlciIsImJhY2t3YXJkc0ZvckVhY2giLCJ0cmFuc2ZlciIsImZpbmQiLCJlbGVtZW50cyIsImZvcndhcmRzRm9yRWFjaCIsInBydW5lIiwicGF0Y2giLCJhdWdtZW50IiwiZm9yRWFjaCIsInNlcGFyYXRlIiwiZm9yd2FyZHNTb21lIiwiY2FsbGJhY2siLCJhcnJheUxlbmd0aCIsInJlc3VsdCIsImJhY2t3YXJkc1NvbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLFNBQVNBLEtBQVQsQ0FBZUMsS0FBZixFQUFzQjtBQUFFLFNBQU9BLE1BQU0sQ0FBTixDQUFQO0FBQWtCOztBQUUxQyxTQUFTQyxNQUFULENBQWdCRCxLQUFoQixFQUF1QjtBQUFFLFNBQU9BLE1BQU0sQ0FBTixDQUFQO0FBQWtCOztBQUUzQyxTQUFTRSxLQUFULENBQWVGLEtBQWYsRUFBc0I7QUFBRSxTQUFPQSxNQUFNLENBQU4sQ0FBUDtBQUFrQjs7QUFFMUMsU0FBU0csTUFBVCxDQUFnQkgsS0FBaEIsRUFBdUI7QUFBRSxTQUFPQSxNQUFNLENBQU4sQ0FBUDtBQUFrQjs7QUFF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UUEsTUFuQk87QUFvQmZFLFlBQVVBLFFBcEJLO0FBcUJmQyxRQUFNQSxJQXJCUztBQXNCZkcsU0FBT0EsS0F0QlE7QUF1QmZDLFNBQU9BLEtBdkJRO0FBd0JmQyxXQUFTQSxPQXhCTTtBQXlCZkUsWUFBVUEsUUF6Qks7QUEwQmZDLGdCQUFjQSxZQTFCQztBQTJCZkksaUJBQWVBLGFBM0JBO0FBNEJmVixtQkFBaUJBLGVBNUJGO0FBNkJmSixvQkFBa0JBO0FBN0JILENBQWpCIiwiZmlsZSI6ImFycmF5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBmaXJzdChhcnJheSkgeyByZXR1cm4gYXJyYXlbMF07IH1cblxuZnVuY3Rpb24gc2Vjb25kKGFycmF5KSB7IHJldHVybiBhcnJheVsxXTsgfVxuXG5mdW5jdGlvbiB0aGlyZChhcnJheSkgeyByZXR1cm4gYXJyYXlbMl07IH1cblxuZnVuY3Rpb24gZm91cnRoKGFycmF5KSB7IHJldHVybiBhcnJheVszXTsgfVxuXG5mdW5jdGlvbiBmaWZ0aChhcnJheSkgeyByZXR1cm4gYXJyYXlbNF07IH1cblxuZnVuY3Rpb24gZmlmdGhMYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSA1XTsgfVxuXG5mdW5jdGlvbiBmb3VydGhMYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSA0XTsgfVxuXG5mdW5jdGlvbiB0aGlyZExhc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDNdOyB9XG5cbmZ1bmN0aW9uIHNlY29uZExhc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDJdOyB9XG5cbmZ1bmN0aW9uIGxhc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdOyB9XG5cbmZ1bmN0aW9uIHRhaWwoYXJyYXkpIHsgcmV0dXJuIGFycmF5LnNsaWNlKDEpOyB9XG5cbmZ1bmN0aW9uIHB1c2goYXJyYXkxLCBhcnJheTIpIHsgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYXJyYXkxLCBhcnJheTIpOyB9XG5cbmZ1bmN0aW9uIHVuc2hpZnQoYXJyYXkxLCBhcnJheTIpIHsgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoYXJyYXkxLCBhcnJheTIpOyB9XG5cbmZ1bmN0aW9uIGNsZWFyKGFycmF5KSB7XG4gIGNvbnN0IHN0YXJ0ID0gMDtcbiAgXG4gIHJldHVybiBhcnJheS5zcGxpY2Uoc3RhcnQpO1xufVxuXG5mdW5jdGlvbiBjb3B5KGFycmF5MSwgYXJyYXkyKSB7XG4gIGNvbnN0IHN0YXJ0ID0gMCxcbiAgICAgICAgZGVsZXRlQ291bnQgPSBhcnJheTIubGVuZ3RoOyAgLy8vXG4gIFxuICBzcGxpY2UoYXJyYXkxLCBzdGFydCwgZGVsZXRlQ291bnQsIGFycmF5Mik7XG59XG5cbmZ1bmN0aW9uIG1lcmdlKGFycmF5MSwgYXJyYXkyKSB7XG4gIGNvbnN0IHN0YXJ0ID0gYXJyYXkyLmxlbmd0aCwgIC8vL1xuICAgICAgICBkZWxldGVDb3VudCA9IDA7XG5cbiAgc3BsaWNlKGFycmF5MSwgc3RhcnQsIGRlbGV0ZUNvdW50LCBhcnJheTIpO1xufVxuXG5mdW5jdGlvbiBzcGxpY2UoYXJyYXkxLCBzdGFydCwgZGVsZXRlQ291bnQsIGFycmF5MiA9IFtdKSB7XG4gIGNvbnN0IGFyZ3MgPSBbc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5hcnJheTJdLFxuICAgICAgICBkZWxldGVkSXRlbXNBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoYXJyYXkxLCBhcmdzKTtcblxuICByZXR1cm4gZGVsZXRlZEl0ZW1zQXJyYXk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2UoYXJyYXksIGVsZW1lbnQsIHRlc3QpIHtcbiAgbGV0IHN0YXJ0ID0gLTE7XG4gIFxuICBjb25zdCBmb3VuZCA9IGFycmF5LnNvbWUoZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIHN0YXJ0ID0gaW5kZXg7ICAvLy9cbiAgICAgIFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgXG4gIGlmIChmb3VuZCkge1xuICAgIGNvbnN0IGRlbGV0ZUNvdW50ID0gMTtcblxuICAgIGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIGVsZW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXIoYXJyYXksIHRlc3QpIHtcbiAgYmFja3dhcmRzRm9yRWFjaChhcnJheSwgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcGFzc2VkKSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IDE7XG5cbiAgICAgIGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZmVyKGFycmF5MSwgYXJyYXkyLCB0ZXN0KSB7XG4gIGJhY2t3YXJkc0ZvckVhY2goYXJyYXkxLCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHBhc3NlZCkge1xuICAgICAgY29uc3Qgc3RhcnQgPSBpbmRleCwgIC8vL1xuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xuXG4gICAgICBhcnJheTEuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCk7XG5cbiAgICAgIGFycmF5Mi5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbmQoYXJyYXksIHRlc3QpIHtcbiAgY29uc3QgZWxlbWVudHMgPSBbXTtcblxuICBmb3J3YXJkc0ZvckVhY2goYXJyYXksIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICBlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBwcnVuZShhcnJheSwgdGVzdCkge1xuICBjb25zdCBmb3VuZCA9IGFycmF5LnNvbWUoZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gaW5kZXgsICAvLy9cbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcblxuICAgICAgYXJyYXkuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBwYXRjaChhcnJheSwgZWxlbWVudCwgdGVzdCkge1xuICBjb25zdCBmb3VuZCA9IGFycmF5LnNvbWUoZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cblxuICBpZiAoZm91bmQpIHtcbiAgICBhcnJheS5wdXNoKGVsZW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50KGFycmF5MSwgYXJyYXkyLCB0ZXN0KSB7XG4gIGFycmF5Mi5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICBhcnJheTEucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXBhcmF0ZShhcnJheSwgYXJyYXkxLCBhcnJheTIsIHRlc3QpIHtcbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgcGFzc2VkID9cbiAgICAgIGFycmF5MS5wdXNoKGVsZW1lbnQpIDpcbiAgICAgICAgYXJyYXkyLnB1c2goZWxlbWVudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkc1NvbWUoYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuICAgIFxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYmFja3dhcmRzU29tZShhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaW5kZXggPSBhcnJheUxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZHNGb3JFYWNoKGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlMZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhY2t3YXJkc0ZvckVhY2goYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAodmFyIGluZGV4ID0gYXJyYXlMZW5ndGggLSAxOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFycmF5W2luZGV4XTtcblxuICAgIGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmlyc3Q6IGZpcnN0LFxuICBzZWNvbmQ6IHNlY29uZCxcbiAgdGhpcmQ6IHRoaXJkLFxuICBmb3VydGg6IGZvdXJ0aCxcbiAgZmlmdGg6IGZpZnRoLFxuICBmaWZ0aExhc3Q6IGZpZnRoTGFzdCxcbiAgZm91cnRoTGFzdDogZm91cnRoTGFzdCxcbiAgdGhpcmRMYXN0OiB0aGlyZExhc3QsXG4gIHNlY29uZExhc3Q6IHNlY29uZExhc3QsXG4gIGxhc3Q6IGxhc3QsXG4gIHRhaWw6IHRhaWwsXG4gIHB1c2g6IHB1c2gsXG4gIHVuc2hpZnQ6IHVuc2hpZnQsXG4gIGNsZWFyOiBjbGVhcixcbiAgY29weTogY29weSxcbiAgbWVyZ2U6IG1lcmdlLFxuICBzcGxpY2U6IHNwbGljZSxcbiAgcmVwbGFjZTogcmVwbGFjZSxcbiAgZmlsdGVyOiBmaWx0ZXIsXG4gIHRyYW5zZmVyOiB0cmFuc2ZlcixcbiAgZmluZDogZmluZCxcbiAgcHJ1bmU6IHBydW5lLFxuICBwYXRjaDogcGF0Y2gsXG4gIGF1Z21lbnQ6IGF1Z21lbnQsXG4gIHNlcGFyYXRlOiBzZXBhcmF0ZSxcbiAgZm9yd2FyZHNTb21lOiBmb3J3YXJkc1NvbWUsXG4gIGJhY2t3YXJkc1NvbWU6IGJhY2t3YXJkc1NvbWUsXG4gIGZvcndhcmRzRm9yRWFjaDogZm9yd2FyZHNGb3JFYWNoLFxuICBiYWNrd2FyZHNGb3JFYWNoOiBiYWNrd2FyZHNGb3JFYWNoXG59O1xuIl19