'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function first(array) {
  return array[0];
}

function second(array) {
  return array[1];
}

function third(array) {
  return array[2];
}

function fourth(array) {
  return array[3];
}

function fifth(array) {
  return array[4];
}

function fifthLast(array) {
  return array[array.length - 5];
}

function fourthLast(array) {
  return array[array.length - 4];
}

function thirdLast(array) {
  return array[array.length - 3];
}

function secondLast(array) {
  return array[array.length - 2];
}

function last(array) {
  return array[array.length - 1];
}

function tail(array) {
  return array.slice(1);
}

function push(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}

function unshift(array1, array2) {
  Array.prototype.unshift.apply(array1, array2);
}

function concat(array1, array2) {
  if (!(array2 instanceof Array)) {
    array2 = [array2];
  }

  var start = 0,
      deleteCount = 0;

  splice(array1, start, deleteCount, array2);
}

function clear(array) {
  var start = 0;

  return array.splice(start);
}

function copy(array1, array2) {
  var start = 0,
      deleteCount = array2.length; ///

  splice(array1, start, deleteCount, array2);
}

function merge(array1, array2) {
  var start = array2.length,
      ///
  deleteCount = 0;

  splice(array1, start, deleteCount, array2);
}

function splice(array1, start, deleteCount) {
  var array2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  var args = [start, deleteCount].concat(_toConsumableArray(array2)),
      deletedItemsArray = Array.prototype.splice.apply(array1, args);

  return deletedItemsArray;
}

function replace(array, element, test) {
  var start = -1;

  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      start = index; ///

      return true;
    }
  });

  if (found) {
    var deleteCount = 1;

    array.splice(start, deleteCount, element);
  }

  return found;
}

function filter(array, test) {
  var filteredElements = [];

  backwardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (!passed) {
      var start = index,
          ///
      deleteCount = 1,
          deletedElements = array.splice(start, deleteCount),
          firstDeletedElement = first(deletedElements);

      filteredElements.unshift(firstDeletedElement); ///
    }
  });

  return filteredElements;
}

function find(array, test) {
  var elements = [];

  forwardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (passed) {
      elements.push(element);
    }
  });

  return elements;
}

function prune(array, test) {
  var prunedElement = undefined;

  array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      var start = index,
          ///
      deleteCount = 1,
          deletedElements = array.splice(start, deleteCount),
          firstDeletedElement = first(deletedElements);

      prunedElement = firstDeletedElement; ///

      return true;
    }
  });

  return prunedElement;
}

function patch(array, element, test) {
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      return true;
    }
  });

  if (found) {
    array.push(element);
  }

  return found;
}

function augment(array1, array2, test) {
  array2.forEach(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      array1.push(element);
    }
  });
}

function separate(array, array1, array2, test) {
  array.forEach(function (element, index) {
    var passed = test(element, index);

    passed ? array1.push(element) : array2.push(element);
  });
}

function forwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function backwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function forwardsEvery(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index],
        result = callback(element, index);

    if (!result) {
      return false;
    }
  }

  return true;
}

function backwardsEvery(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index],
        result = callback(element, index);

    if (!result) {
      return false;
    }
  }

  return true;
}

function forwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index];

    callback(element, index);
  }
}

function backwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index];

    callback(element, index);
  }
}

module.exports = {
  first: first,
  second: second,
  third: third,
  fourth: fourth,
  fifth: fifth,
  fifthLast: fifthLast,
  fourthLast: fourthLast,
  thirdLast: thirdLast,
  secondLast: secondLast,
  last: last,
  tail: tail,
  push: push,
  unshift: unshift,
  concat: concat,
  clear: clear,
  copy: copy,
  merge: merge,
  splice: splice,
  replace: replace,
  filter: filter,
  find: find,
  prune: prune,
  patch: patch,
  augment: augment,
  separate: separate,
  forwardsSome: forwardsSome,
  backwardsSome: backwardsSome,
  forwardsEvery: forwardsEvery,
  backwardsEvery: backwardsEvery,
  forwardsForEach: forwardsForEach,
  backwardsForEach: backwardsForEach
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvYXJyYXkuanMiXSwibmFtZXMiOlsiZmlyc3QiLCJhcnJheSIsInNlY29uZCIsInRoaXJkIiwiZm91cnRoIiwiZmlmdGgiLCJmaWZ0aExhc3QiLCJsZW5ndGgiLCJmb3VydGhMYXN0IiwidGhpcmRMYXN0Iiwic2Vjb25kTGFzdCIsImxhc3QiLCJ0YWlsIiwic2xpY2UiLCJwdXNoIiwiYXJyYXkxIiwiYXJyYXkyIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJhcHBseSIsInVuc2hpZnQiLCJjb25jYXQiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwiY2xlYXIiLCJjb3B5IiwibWVyZ2UiLCJhcmdzIiwiZGVsZXRlZEl0ZW1zQXJyYXkiLCJyZXBsYWNlIiwiZWxlbWVudCIsInRlc3QiLCJmb3VuZCIsInNvbWUiLCJpbmRleCIsInBhc3NlZCIsImZpbHRlciIsImZpbHRlcmVkRWxlbWVudHMiLCJiYWNrd2FyZHNGb3JFYWNoIiwiZGVsZXRlZEVsZW1lbnRzIiwiZmlyc3REZWxldGVkRWxlbWVudCIsImZpbmQiLCJlbGVtZW50cyIsImZvcndhcmRzRm9yRWFjaCIsInBydW5lIiwicHJ1bmVkRWxlbWVudCIsInVuZGVmaW5lZCIsInBhdGNoIiwiYXVnbWVudCIsImZvckVhY2giLCJzZXBhcmF0ZSIsImZvcndhcmRzU29tZSIsImNhbGxiYWNrIiwiYXJyYXlMZW5ndGgiLCJyZXN1bHQiLCJiYWNrd2FyZHNTb21lIiwiZm9yd2FyZHNFdmVyeSIsImJhY2t3YXJkc0V2ZXJ5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxTQUFTQSxLQUFULENBQWVDLEtBQWYsRUFBc0I7QUFBRSxTQUFPQSxNQUFNLENBQU4sQ0FBUDtBQUFrQjs7QUFFMUMsU0FBU0MsTUFBVCxDQUFnQkQsS0FBaEIsRUFBdUI7QUFBRSxTQUFPQSxNQUFNLENBQU4sQ0FBUDtBQUFrQjs7QUFFM0MsU0FBU0UsS0FBVCxDQUFl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QmZNLFdBQVNBLE9BbkJNO0FBb0JmTyxVQUFRQSxNQXBCTztBQXFCZkssUUFBTUEsSUFyQlM7QUFzQmZHLFNBQU9BLEtBdEJRO0FBdUJmRyxTQUFPQSxLQXZCUTtBQXdCZkMsV0FBU0EsT0F4Qk07QUF5QmZFLFlBQVVBLFFBekJLO0FBMEJmQyxnQkFBY0EsWUExQkM7QUEyQmZJLGlCQUFlQSxhQTNCQTtBQTRCZkMsaUJBQWVBLGFBNUJBO0FBNkJmQyxrQkFBZ0JBLGNBN0JEO0FBOEJmZCxtQkFBaUJBLGVBOUJGO0FBK0JmTCxvQkFBa0JBO0FBL0JILENBQWpCIiwiZmlsZSI6ImFycmF5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBmaXJzdChhcnJheSkgeyByZXR1cm4gYXJyYXlbMF07IH1cblxuZnVuY3Rpb24gc2Vjb25kKGFycmF5KSB7IHJldHVybiBhcnJheVsxXTsgfVxuXG5mdW5jdGlvbiB0aGlyZChhcnJheSkgeyByZXR1cm4gYXJyYXlbMl07IH1cblxuZnVuY3Rpb24gZm91cnRoKGFycmF5KSB7IHJldHVybiBhcnJheVszXTsgfVxuXG5mdW5jdGlvbiBmaWZ0aChhcnJheSkgeyByZXR1cm4gYXJyYXlbNF07IH1cblxuZnVuY3Rpb24gZmlmdGhMYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSA1XTsgfVxuXG5mdW5jdGlvbiBmb3VydGhMYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSA0XTsgfVxuXG5mdW5jdGlvbiB0aGlyZExhc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDNdOyB9XG5cbmZ1bmN0aW9uIHNlY29uZExhc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDJdOyB9XG5cbmZ1bmN0aW9uIGxhc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdOyB9XG5cbmZ1bmN0aW9uIHRhaWwoYXJyYXkpIHsgcmV0dXJuIGFycmF5LnNsaWNlKDEpOyB9XG5cbmZ1bmN0aW9uIHB1c2goYXJyYXkxLCBhcnJheTIpIHsgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYXJyYXkxLCBhcnJheTIpOyB9XG5cbmZ1bmN0aW9uIHVuc2hpZnQoYXJyYXkxLCBhcnJheTIpIHsgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoYXJyYXkxLCBhcnJheTIpOyB9XG5cbmZ1bmN0aW9uIGNvbmNhdChhcnJheTEsIGFycmF5Mikge1xuICBpZiAoIShhcnJheTIgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICBhcnJheTIgPSBbYXJyYXkyXTtcbiAgfVxuXG4gIGNvbnN0IHN0YXJ0ID0gMCxcbiAgICAgICAgZGVsZXRlQ291bnQgPSAwO1xuXG4gIHNwbGljZShhcnJheTEsIHN0YXJ0LCBkZWxldGVDb3VudCwgYXJyYXkyKTtcbn1cblxuZnVuY3Rpb24gY2xlYXIoYXJyYXkpIHtcbiAgY29uc3Qgc3RhcnQgPSAwO1xuICBcbiAgcmV0dXJuIGFycmF5LnNwbGljZShzdGFydCk7XG59XG5cbmZ1bmN0aW9uIGNvcHkoYXJyYXkxLCBhcnJheTIpIHtcbiAgY29uc3Qgc3RhcnQgPSAwLFxuICAgICAgICBkZWxldGVDb3VudCA9IGFycmF5Mi5sZW5ndGg7ICAvLy9cbiAgXG4gIHNwbGljZShhcnJheTEsIHN0YXJ0LCBkZWxldGVDb3VudCwgYXJyYXkyKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2UoYXJyYXkxLCBhcnJheTIpIHtcbiAgY29uc3Qgc3RhcnQgPSBhcnJheTIubGVuZ3RoLCAgLy8vXG4gICAgICAgIGRlbGV0ZUNvdW50ID0gMDtcblxuICBzcGxpY2UoYXJyYXkxLCBzdGFydCwgZGVsZXRlQ291bnQsIGFycmF5Mik7XG59XG5cbmZ1bmN0aW9uIHNwbGljZShhcnJheTEsIHN0YXJ0LCBkZWxldGVDb3VudCwgYXJyYXkyID0gW10pIHtcbiAgY29uc3QgYXJncyA9IFtzdGFydCwgZGVsZXRlQ291bnQsIC4uLmFycmF5Ml0sXG4gICAgICAgIGRlbGV0ZWRJdGVtc0FycmF5ID0gQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShhcnJheTEsIGFyZ3MpO1xuXG4gIHJldHVybiBkZWxldGVkSXRlbXNBcnJheTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZShhcnJheSwgZWxlbWVudCwgdGVzdCkge1xuICBsZXQgc3RhcnQgPSAtMTtcbiAgXG4gIGNvbnN0IGZvdW5kID0gYXJyYXkuc29tZShmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHBhc3NlZCkge1xuICAgICAgc3RhcnQgPSBpbmRleDsgIC8vL1xuICAgICAgXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICBcbiAgaWYgKGZvdW5kKSB7XG4gICAgY29uc3QgZGVsZXRlQ291bnQgPSAxO1xuXG4gICAgYXJyYXkuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCwgZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gZm91bmQ7XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihhcnJheSwgdGVzdCkge1xuICBjb25zdCBmaWx0ZXJlZEVsZW1lbnRzID0gW107XG4gIFxuICBiYWNrd2FyZHNGb3JFYWNoKGFycmF5LCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKCFwYXNzZWQpIHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gaW5kZXgsICAvLy9cbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMSxcbiAgICAgICAgICAgIGRlbGV0ZWRFbGVtZW50cyA9IGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpLFxuICAgICAgICAgICAgZmlyc3REZWxldGVkRWxlbWVudCA9IGZpcnN0KGRlbGV0ZWRFbGVtZW50cyk7XG4gICAgICBcbiAgICAgIGZpbHRlcmVkRWxlbWVudHMudW5zaGlmdChmaXJzdERlbGV0ZWRFbGVtZW50KTsgIC8vL1xuICAgIH1cbiAgfSk7XG4gIFxuICByZXR1cm4gZmlsdGVyZWRFbGVtZW50cztcbn1cblxuZnVuY3Rpb24gZmluZChhcnJheSwgdGVzdCkge1xuICBjb25zdCBlbGVtZW50cyA9IFtdO1xuXG4gIGZvcndhcmRzRm9yRWFjaChhcnJheSwgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIGVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIHBydW5lKGFycmF5LCB0ZXN0KSB7XG4gIGxldCBwcnVuZWRFbGVtZW50ID0gdW5kZWZpbmVkO1xuICBcbiAgYXJyYXkuc29tZShmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHBhc3NlZCkge1xuICAgICAgY29uc3Qgc3RhcnQgPSBpbmRleCwgIC8vL1xuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSAxLFxuICAgICAgICAgICAgZGVsZXRlZEVsZW1lbnRzID0gYXJyYXkuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCksXG4gICAgICAgICAgICBmaXJzdERlbGV0ZWRFbGVtZW50ID0gZmlyc3QoZGVsZXRlZEVsZW1lbnRzKTtcbiAgICAgIFxuICAgICAgcHJ1bmVkRWxlbWVudCA9IGZpcnN0RGVsZXRlZEVsZW1lbnQ7ICAvLy9cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgXG4gIHJldHVybiBwcnVuZWRFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBwYXRjaChhcnJheSwgZWxlbWVudCwgdGVzdCkge1xuICBjb25zdCBmb3VuZCA9IGFycmF5LnNvbWUoZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cblxuICBpZiAoZm91bmQpIHtcbiAgICBhcnJheS5wdXNoKGVsZW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50KGFycmF5MSwgYXJyYXkyLCB0ZXN0KSB7XG4gIGFycmF5Mi5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICBhcnJheTEucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXBhcmF0ZShhcnJheSwgYXJyYXkxLCBhcnJheTIsIHRlc3QpIHtcbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgcGFzc2VkID9cbiAgICAgIGFycmF5MS5wdXNoKGVsZW1lbnQpIDpcbiAgICAgICAgYXJyYXkyLnB1c2goZWxlbWVudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkc1NvbWUoYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuICAgIFxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYmFja3dhcmRzU29tZShhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaW5kZXggPSBhcnJheUxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZHNFdmVyeShhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5TGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBiYWNrd2FyZHNFdmVyeShhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaW5kZXggPSBhcnJheUxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRzRm9yRWFjaChhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5TGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFycmF5W2luZGV4XTtcblxuICAgIGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYWNrd2FyZHNGb3JFYWNoKGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBmb3IgKGxldCBpbmRleCA9IGFycmF5TGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF07XG5cbiAgICBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZpcnN0OiBmaXJzdCxcbiAgc2Vjb25kOiBzZWNvbmQsXG4gIHRoaXJkOiB0aGlyZCxcbiAgZm91cnRoOiBmb3VydGgsXG4gIGZpZnRoOiBmaWZ0aCxcbiAgZmlmdGhMYXN0OiBmaWZ0aExhc3QsXG4gIGZvdXJ0aExhc3Q6IGZvdXJ0aExhc3QsXG4gIHRoaXJkTGFzdDogdGhpcmRMYXN0LFxuICBzZWNvbmRMYXN0OiBzZWNvbmRMYXN0LFxuICBsYXN0OiBsYXN0LFxuICB0YWlsOiB0YWlsLFxuICBwdXNoOiBwdXNoLFxuICB1bnNoaWZ0OiB1bnNoaWZ0LFxuICBjb25jYXQ6IGNvbmNhdCxcbiAgY2xlYXI6IGNsZWFyLFxuICBjb3B5OiBjb3B5LFxuICBtZXJnZTogbWVyZ2UsXG4gIHNwbGljZTogc3BsaWNlLFxuICByZXBsYWNlOiByZXBsYWNlLFxuICBmaWx0ZXI6IGZpbHRlcixcbiAgZmluZDogZmluZCxcbiAgcHJ1bmU6IHBydW5lLFxuICBwYXRjaDogcGF0Y2gsXG4gIGF1Z21lbnQ6IGF1Z21lbnQsXG4gIHNlcGFyYXRlOiBzZXBhcmF0ZSxcbiAgZm9yd2FyZHNTb21lOiBmb3J3YXJkc1NvbWUsXG4gIGJhY2t3YXJkc1NvbWU6IGJhY2t3YXJkc1NvbWUsXG4gIGZvcndhcmRzRXZlcnk6IGZvcndhcmRzRXZlcnksXG4gIGJhY2t3YXJkc0V2ZXJ5OiBiYWNrd2FyZHNFdmVyeSxcbiAgZm9yd2FyZHNGb3JFYWNoOiBmb3J3YXJkc0ZvckVhY2gsXG4gIGJhY2t3YXJkc0ZvckVhY2g6IGJhY2t3YXJkc0ZvckVhY2hcbn07XG4iXX0=