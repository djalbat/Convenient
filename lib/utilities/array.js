'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function first(array) {
  return array[0];
}

function second(array) {
  return array[1];
}

function third(array) {
  return array[2];
}

function fourth(array) {
  return array[3];
}

function fifth(array) {
  return array[4];
}

function fifthLast(array) {
  return array[array.length - 5];
}

function fourthLast(array) {
  return array[array.length - 4];
}

function thirdLast(array) {
  return array[array.length - 3];
}

function secondLast(array) {
  return array[array.length - 2];
}

function last(array) {
  return array[array.length - 1];
}

function tail(array) {
  return array.slice(1);
}

function push(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}

function unshift(array1, array2) {
  Array.prototype.unshift.apply(array1, array2);
}

function concat(array1, elementOrArray2) {
  var array2 = elementOrArray2 instanceof Array ? elementOrArray2 : [elementOrArray2];

  push(array1, array2);
}

function clear(array) {
  var start = 0;

  return array.splice(start);
}

function copy(array1, array2) {
  var start = 0,
      deleteCount = array2.length; ///

  splice(array1, start, deleteCount, array2);
}

function merge(array1, array2) {
  Array.prototype.push.apply(array1, array2);
}

function splice(array1, start) {
  var deleteCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
  var array2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  var args = [start, deleteCount].concat(_toConsumableArray(array2)),
      deletedItemsArray = Array.prototype.splice.apply(array1, args);

  return deletedItemsArray;
}

function replace(array, element, test) {
  var start = -1;

  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      start = index; ///

      return true;
    }
  });

  if (found) {
    var deleteCount = 1;

    array.splice(start, deleteCount, element);
  }

  return found;
}

function filter(array, test) {
  var filteredElements = [];

  backwardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (!passed) {
      var start = index,
          ///
      deleteCount = 1,
          deletedElements = array.splice(start, deleteCount),
          firstDeletedElement = first(deletedElements);

      filteredElements.unshift(firstDeletedElement); ///
    }
  });

  return filteredElements;
}

function find(array, test) {
  var elements = [];

  forwardsForEach(array, function (element, index) {
    var passed = test(element, index);

    if (passed) {
      elements.push(element);
    }
  });

  return elements;
}

function prune(array, test) {
  var prunedElement = undefined;

  array.some(function (element, index) {
    var passed = test(element, index);

    if (!passed) {
      var start = index,
          ///
      deleteCount = 1,
          deletedElements = array.splice(start, deleteCount),
          firstDeletedElement = first(deletedElements);

      prunedElement = firstDeletedElement; ///

      return true;
    }
  });

  return prunedElement;
}

function patch(array, element, test) {
  var found = array.some(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      return true;
    }
  });

  if (found) {
    array.push(element);
  }

  return found;
}

function augment(array1, array2, test) {
  array2.forEach(function (element, index) {
    var passed = test(element, index);

    if (passed) {
      array1.push(element);
    }
  });
}

function separate(array, array1, array2, test) {
  array.forEach(function (element, index) {
    var passed = test(element, index);

    passed ? array1.push(element) : array2.push(element);
  });
}

function forwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function backwardsSome(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index],
        result = callback(element, index);

    if (result) {
      return true;
    }
  }

  return false;
}

function forwardsEvery(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index],
        result = callback(element, index);

    if (!result) {
      return false;
    }
  }

  return true;
}

function backwardsEvery(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index],
        result = callback(element, index);

    if (!result) {
      return false;
    }
  }

  return true;
}

function forwardsReduce(array, callback, initialValue) {
  var value = initialValue;

  forwardsForEach(array, function (element, index) {
    value = callback(value, element, index);
  });

  return value;
}

function backwardsReduce(array, callback, initialValue) {
  var value = initialValue;

  backwardsForEach(array, function (element, index) {
    value = callback(value, element, index);
  });

  return value;
}

function forwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = 0; index < arrayLength; index++) {
    var element = array[index];

    callback(element, index);
  }
}

function backwardsForEach(array, callback) {
  var arrayLength = array.length;

  for (var index = arrayLength - 1; index >= 0; index--) {
    var element = array[index];

    callback(element, index);
  }
}

module.exports = {
  first: first,
  second: second,
  third: third,
  fourth: fourth,
  fifth: fifth,
  fifthLast: fifthLast,
  fourthLast: fourthLast,
  thirdLast: thirdLast,
  secondLast: secondLast,
  last: last,
  tail: tail,
  push: push,
  unshift: unshift,
  concat: concat,
  clear: clear,
  copy: copy,
  merge: merge,
  splice: splice,
  replace: replace,
  filter: filter,
  find: find,
  prune: prune,
  patch: patch,
  augment: augment,
  separate: separate,
  forwardsSome: forwardsSome,
  backwardsSome: backwardsSome,
  forwardsEvery: forwardsEvery,
  backwardsEvery: backwardsEvery,
  forwardsReduce: forwardsReduce,
  backwardsReduce: backwardsReduce,
  forwardsForEach: forwardsForEach,
  backwardsForEach: backwardsForEach
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvYXJyYXkuanMiXSwibmFtZXMiOlsiZmlyc3QiLCJhcnJheSIsInNlY29uZCIsInRoaXJkIiwiZm91cnRoIiwiZmlmdGgiLCJmaWZ0aExhc3QiLCJsZW5ndGgiLCJmb3VydGhMYXN0IiwidGhpcmRMYXN0Iiwic2Vjb25kTGFzdCIsImxhc3QiLCJ0YWlsIiwic2xpY2UiLCJwdXNoIiwiYXJyYXkxIiwiYXJyYXkyIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJhcHBseSIsInVuc2hpZnQiLCJjb25jYXQiLCJlbGVtZW50T3JBcnJheTIiLCJjbGVhciIsInN0YXJ0Iiwic3BsaWNlIiwiY29weSIsImRlbGV0ZUNvdW50IiwibWVyZ2UiLCJJbmZpbml0eSIsImFyZ3MiLCJkZWxldGVkSXRlbXNBcnJheSIsInJlcGxhY2UiLCJlbGVtZW50IiwidGVzdCIsImZvdW5kIiwic29tZSIsImluZGV4IiwicGFzc2VkIiwiZmlsdGVyIiwiZmlsdGVyZWRFbGVtZW50cyIsImJhY2t3YXJkc0ZvckVhY2giLCJkZWxldGVkRWxlbWVudHMiLCJmaXJzdERlbGV0ZWRFbGVtZW50IiwiZmluZCIsImVsZW1lbnRzIiwiZm9yd2FyZHNGb3JFYWNoIiwicHJ1bmUiLCJwcnVuZWRFbGVtZW50IiwidW5kZWZpbmVkIiwicGF0Y2giLCJhdWdtZW50IiwiZm9yRWFjaCIsInNlcGFyYXRlIiwiZm9yd2FyZHNTb21lIiwiY2FsbGJhY2siLCJhcnJheUxlbmd0aCIsInJlc3VsdCIsImJhY2t3YXJkc1NvbWUiLCJmb3J3YXJkc0V2ZXJ5IiwiYmFja3dhcmRzRXZlcnkiLCJmb3J3YXJkc1JlZHVjZSIsImluaXRpYWxWYWx1ZSIsInZhbHVlIiwiYmFja3dhcmRzUmVkdWNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxTQUFTQSxLQUFULENBQWVDLEtBQWYsRUFBc0I7QUFBRSxTQUFPQSxNQUFNLENBQU4sQ0FBUDtBQUFrQjs7QUFF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LEVBQWtDbkIsU0FBUyxDQUEzQyxFQUE4Q0EsT0FBOUMsRUFBdUQ7QUFDckQsUUFBTUosVUFBVWhDLE1BQU1vQyxLQUFOLENBQWhCOztBQUVBa0IsYUFBU3RCLE9BQVQsRUFBa0JJLEtBQWxCO0FBQ0Q7QUFDRjs7QUFFRDRCLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmxFLGNBRGU7QUFFZkUsZ0JBRmU7QUFHZkMsY0FIZTtBQUlmQyxnQkFKZTtBQUtmQyxjQUxlO0FBTWZDLHNCQU5lO0FBT2ZFLHdCQVBlO0FBUWZDLHNCQVJlO0FBU2ZDLHdCQVRlO0FBVWZDLFlBVmU7QUFXZkMsWUFYZTtBQVlmRSxZQVplO0FBYWZNLGtCQWJlO0FBY2ZDLGdCQWRlO0FBZWZFLGNBZmU7QUFnQmZHLFlBaEJlO0FBaUJmRSxjQWpCZTtBQWtCZkgsZ0JBbEJlO0FBbUJmTyxrQkFuQmU7QUFvQmZPLGdCQXBCZTtBQXFCZkssWUFyQmU7QUFzQmZHLGNBdEJlO0FBdUJmRyxjQXZCZTtBQXdCZkMsa0JBeEJlO0FBeUJmRSxvQkF6QmU7QUEwQmZDLDRCQTFCZTtBQTJCZkksOEJBM0JlO0FBNEJmQyw4QkE1QmU7QUE2QmZDLGdDQTdCZTtBQThCaEJDLGdDQTlCZ0I7QUErQmhCRyxrQ0EvQmdCO0FBZ0NmbEIsa0NBaENlO0FBaUNmTDtBQWpDZSxDQUFqQiIsImZpbGUiOiJhcnJheS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gZmlyc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5WzBdOyB9XG5cbmZ1bmN0aW9uIHNlY29uZChhcnJheSkgeyByZXR1cm4gYXJyYXlbMV07IH1cblxuZnVuY3Rpb24gdGhpcmQoYXJyYXkpIHsgcmV0dXJuIGFycmF5WzJdOyB9XG5cbmZ1bmN0aW9uIGZvdXJ0aChhcnJheSkgeyByZXR1cm4gYXJyYXlbM107IH1cblxuZnVuY3Rpb24gZmlmdGgoYXJyYXkpIHsgcmV0dXJuIGFycmF5WzRdOyB9XG5cbmZ1bmN0aW9uIGZpZnRoTGFzdChhcnJheSkgeyByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gNV07IH1cblxuZnVuY3Rpb24gZm91cnRoTGFzdChhcnJheSkgeyByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gNF07IH1cblxuZnVuY3Rpb24gdGhpcmRMYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAzXTsgfVxuXG5mdW5jdGlvbiBzZWNvbmRMYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAyXTsgfVxuXG5mdW5jdGlvbiBsYXN0KGFycmF5KSB7IHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTsgfVxuXG5mdW5jdGlvbiB0YWlsKGFycmF5KSB7IHJldHVybiBhcnJheS5zbGljZSgxKTsgfVxuXG5mdW5jdGlvbiBwdXNoKGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5mdW5jdGlvbiB1bnNoaWZ0KGFycmF5MSwgYXJyYXkyKSB7IEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGFycmF5MSwgYXJyYXkyKTsgfVxuXG5mdW5jdGlvbiBjb25jYXQoYXJyYXkxLCBlbGVtZW50T3JBcnJheTIpIHtcbiAgY29uc3QgYXJyYXkyID0gKGVsZW1lbnRPckFycmF5MiBpbnN0YW5jZW9mIEFycmF5KSA/XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRPckFycmF5MiA6XG4gICAgICAgICAgICAgICAgICAgICBbZWxlbWVudE9yQXJyYXkyXTtcbiAgXG4gIHB1c2goYXJyYXkxLCBhcnJheTIpO1xufVxuXG5mdW5jdGlvbiBjbGVhcihhcnJheSkge1xuICBjb25zdCBzdGFydCA9IDA7XG4gIFxuICByZXR1cm4gYXJyYXkuc3BsaWNlKHN0YXJ0KTtcbn1cblxuZnVuY3Rpb24gY29weShhcnJheTEsIGFycmF5Mikge1xuICBjb25zdCBzdGFydCA9IDAsXG4gICAgICAgIGRlbGV0ZUNvdW50ID0gYXJyYXkyLmxlbmd0aDsgIC8vL1xuICBcbiAgc3BsaWNlKGFycmF5MSwgc3RhcnQsIGRlbGV0ZUNvdW50LCBhcnJheTIpO1xufVxuXG5mdW5jdGlvbiBtZXJnZShhcnJheTEsIGFycmF5MikgeyBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShhcnJheTEsIGFycmF5Mik7IH1cblxuZnVuY3Rpb24gc3BsaWNlKGFycmF5MSwgc3RhcnQsIGRlbGV0ZUNvdW50ID0gSW5maW5pdHksIGFycmF5MiA9IFtdKSB7XG4gIGNvbnN0IGFyZ3MgPSBbc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5hcnJheTJdLFxuICAgICAgICBkZWxldGVkSXRlbXNBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoYXJyYXkxLCBhcmdzKTtcblxuICByZXR1cm4gZGVsZXRlZEl0ZW1zQXJyYXk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2UoYXJyYXksIGVsZW1lbnQsIHRlc3QpIHtcbiAgbGV0IHN0YXJ0ID0gLTE7XG4gIFxuICBjb25zdCBmb3VuZCA9IGFycmF5LnNvbWUoZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIHN0YXJ0ID0gaW5kZXg7ICAvLy9cbiAgICAgIFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgXG4gIGlmIChmb3VuZCkge1xuICAgIGNvbnN0IGRlbGV0ZUNvdW50ID0gMTtcblxuICAgIGFycmF5LnNwbGljZShzdGFydCwgZGVsZXRlQ291bnQsIGVsZW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXIoYXJyYXksIHRlc3QpIHtcbiAgY29uc3QgZmlsdGVyZWRFbGVtZW50cyA9IFtdO1xuICBcbiAgYmFja3dhcmRzRm9yRWFjaChhcnJheSwgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcGFzc2VkKSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IDEsXG4gICAgICAgICAgICBkZWxldGVkRWxlbWVudHMgPSBhcnJheS5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KSxcbiAgICAgICAgICAgIGZpcnN0RGVsZXRlZEVsZW1lbnQgPSBmaXJzdChkZWxldGVkRWxlbWVudHMpO1xuICAgICAgXG4gICAgICBmaWx0ZXJlZEVsZW1lbnRzLnVuc2hpZnQoZmlyc3REZWxldGVkRWxlbWVudCk7ICAvLy9cbiAgICB9XG4gIH0pO1xuICBcbiAgcmV0dXJuIGZpbHRlcmVkRWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIGZpbmQoYXJyYXksIHRlc3QpIHtcbiAgY29uc3QgZWxlbWVudHMgPSBbXTtcblxuICBmb3J3YXJkc0ZvckVhY2goYXJyYXksIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBpZiAocGFzc2VkKSB7XG4gICAgICBlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBwcnVuZShhcnJheSwgdGVzdCkge1xuICBsZXQgcHJ1bmVkRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgXG4gIGFycmF5LnNvbWUoZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcGFzc2VkKSB7XG4gICAgICBjb25zdCBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IDEsXG4gICAgICAgICAgICBkZWxldGVkRWxlbWVudHMgPSBhcnJheS5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KSxcbiAgICAgICAgICAgIGZpcnN0RGVsZXRlZEVsZW1lbnQgPSBmaXJzdChkZWxldGVkRWxlbWVudHMpO1xuICAgICAgXG4gICAgICBwcnVuZWRFbGVtZW50ID0gZmlyc3REZWxldGVkRWxlbWVudDsgIC8vL1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICBcbiAgcmV0dXJuIHBydW5lZEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIHBhdGNoKGFycmF5LCBlbGVtZW50LCB0ZXN0KSB7XG4gIGNvbnN0IGZvdW5kID0gYXJyYXkuc29tZShmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgIGNvbnN0IHBhc3NlZCA9IHRlc3QoZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHBhc3NlZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuXG4gIGlmIChmb3VuZCkge1xuICAgIGFycmF5LnB1c2goZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gZm91bmQ7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnQoYXJyYXkxLCBhcnJheTIsIHRlc3QpIHtcbiAgYXJyYXkyLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXNzZWQgPSB0ZXN0KGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmIChwYXNzZWQpIHtcbiAgICAgIGFycmF5MS5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNlcGFyYXRlKGFycmF5LCBhcnJheTEsIGFycmF5MiwgdGVzdCkge1xuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgY29uc3QgcGFzc2VkID0gdGVzdChlbGVtZW50LCBpbmRleCk7XG5cbiAgICBwYXNzZWQgP1xuICAgICAgYXJyYXkxLnB1c2goZWxlbWVudCkgOlxuICAgICAgICBhcnJheTIucHVzaChlbGVtZW50KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRzU29tZShhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5TGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG4gICAgXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBiYWNrd2FyZHNTb21lKGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBmb3IgKGxldCBpbmRleCA9IGFycmF5TGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkc0V2ZXJ5KGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlMZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGVsZW1lbnQsIGluZGV4KTtcblxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGJhY2t3YXJkc0V2ZXJ5KGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBmb3IgKGxldCBpbmRleCA9IGFycmF5TGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZHNSZWR1Y2UoYXJyYXksIGNhbGxiYWNrLCBpbml0aWFsVmFsdWUpIHtcblx0bGV0IHZhbHVlID0gaW5pdGlhbFZhbHVlO1xuXG5cdGZvcndhcmRzRm9yRWFjaChhcnJheSwgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcblx0XHR2YWx1ZSA9IGNhbGxiYWNrKHZhbHVlLCBlbGVtZW50LCBpbmRleCk7XG5cdH0pO1xuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYmFja3dhcmRzUmVkdWNlKGFycmF5LCBjYWxsYmFjaywgaW5pdGlhbFZhbHVlKSB7XG5cdGxldCB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcblxuXHRiYWNrd2FyZHNGb3JFYWNoKGFycmF5LCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuXHRcdHZhbHVlID0gY2FsbGJhY2sodmFsdWUsIGVsZW1lbnQsIGluZGV4KTtcblx0fSk7XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkc0ZvckVhY2goYXJyYXksIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGFycmF5TGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF07XG5cbiAgICBjYWxsYmFjayhlbGVtZW50LCBpbmRleCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFja3dhcmRzRm9yRWFjaChhcnJheSwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXlMZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaW5kZXggPSBhcnJheUxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgY2FsbGJhY2soZWxlbWVudCwgaW5kZXgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaXJzdCxcbiAgc2Vjb25kLFxuICB0aGlyZCxcbiAgZm91cnRoLFxuICBmaWZ0aCxcbiAgZmlmdGhMYXN0LFxuICBmb3VydGhMYXN0LFxuICB0aGlyZExhc3QsXG4gIHNlY29uZExhc3QsXG4gIGxhc3QsXG4gIHRhaWwsXG4gIHB1c2gsXG4gIHVuc2hpZnQsXG4gIGNvbmNhdCxcbiAgY2xlYXIsXG4gIGNvcHksXG4gIG1lcmdlLFxuICBzcGxpY2UsXG4gIHJlcGxhY2UsXG4gIGZpbHRlcixcbiAgZmluZCxcbiAgcHJ1bmUsXG4gIHBhdGNoLFxuICBhdWdtZW50LFxuICBzZXBhcmF0ZSxcbiAgZm9yd2FyZHNTb21lLFxuICBiYWNrd2FyZHNTb21lLFxuICBmb3J3YXJkc0V2ZXJ5LFxuICBiYWNrd2FyZHNFdmVyeSxcblx0Zm9yd2FyZHNSZWR1Y2UsXG5cdGJhY2t3YXJkc1JlZHVjZSxcbiAgZm9yd2FyZHNGb3JFYWNoLFxuICBiYWNrd2FyZHNGb3JFYWNoXG59O1xuIl19